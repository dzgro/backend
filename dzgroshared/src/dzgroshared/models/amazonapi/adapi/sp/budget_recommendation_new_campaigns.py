# generated by datamodel-codegen:
#   filename:  budget_recommendation_new_campaigns.json
#   timestamp: 2025-07-23T04:03:28+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class Type(Enum):
    close_match = 'CLOSE_MATCH'
    loose_match = 'LOOSE_MATCH'
    substitutes = 'SUBSTITUTES'
    complements = 'COMPLEMENTS'
    keyword_broad_match = 'KEYWORD_BROAD_MATCH'
    keyword_exact_match = 'KEYWORD_EXACT_MATCH'
    keyword_phrase_match = 'KEYWORD_PHRASE_MATCH'


class TargetingExpression(BaseModel):
    """
    The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases. your keyword targeting ads with search phrases.
    """

    class Config:
        validate_by_name= True

    type: Type
    value: str | None = Field(None, description='The targeting expression value.')


class Clicks(BaseModel):
    """
    Clicks benchmark.
    """

    class Config:
        validate_by_name= True

    lower: int | None = Field(None, description='lower bound.')
    upper: int | None = Field(None, description='upper bound.')


class TargetingType(Enum):
    """
    Specifies the targeting type.
    """

    manual = 'manual'
    auto = 'auto'


class BudgetRecommendationNewCampaignsErrorMessage(BaseModel):
    class Config:
        validate_by_name= True

    __root__: str


class BudgetRecommendationNewCampaignsException(BaseModel):
    class Config:
        validate_by_name= True

    message: BudgetRecommendationNewCampaignsErrorMessage | None = None


class Asin(BaseModel):
    class Config:
        validate_by_name= True

    __root__: str = Field(..., regex='[a-zA-Z0-9]{10}')


class AdGroup(BaseModel):
    class Config:
        validate_by_name= True

    targeting_expressions: list[TargetingExpression] = Field(
        ...,
        alias='targetingExpressions',
        description='The list of targeting expressions. Maximum of 100 per request.',
        max_items=100,
        min_items=1,
    )
    asins: list[Asin] = Field(
        ...,
        description='The list of ad ASINs in the ad group.',
        max_items=50,
        min_items=1,
    )
    ad_group_id: str | None = Field(
        None, alias='adGroupId', description='The ad group identifier.'
    )


class Predicate(Enum):
    placement_top = 'PLACEMENT_TOP'
    placement_rest_of_search = 'PLACEMENT_REST_OF_SEARCH'
    placement_product_page = 'PLACEMENT_PRODUCT_PAGE'


class PlacementAdjustment(BaseModel):
    """
    Specifies bid adjustments based on the placement location. Use `PLACEMENT_TOP` for the top of the search page. Use `PLACEMENT_REST_OF_SEARCH` for the rest of the search page. Use `PLACEMENT_PRODUCT_PAGE` for a product page.
    """

    class Config:
        validate_by_name= True

    predicate: Predicate | None = None
    percentage: int | None = Field(None, ge=0, le=900)


class Impressions(BaseModel):
    """
    Impressions benchmark.
    """

    class Config:
        validate_by_name= True

    lower: int | None = Field(None, description='lower bound.')
    upper: int | None = Field(None, description='upper bound.')


class Adjustment(BaseModel):
    class Config:
        validate_by_name= True

    placement_adjustment: PlacementAdjustment | None = Field(
        None, alias='placementAdjustment'
    )


class Conversions(BaseModel):
    """
    Conversions benchmark.
    """

    class Config:
        validate_by_name= True

    lower: int | None = Field(None, description='lower bound.')
    upper: int | None = Field(None, description='upper bound.')


class Strategy(Enum):
    """
    The bidding strategy selected for the campaign. Use LEGACY_FOR_SALES to lower your bid in real time when your ad may be less likely to convert to a sale. Use AUTO_FOR_SALES to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use MANUAL to use your exact bid along with any manual adjustments.
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'


class Bidding(BaseModel):
    """
    The bidding control configuration for the new campaign.
    """

    class Config:
        validate_by_name= True

    adjustments: list[Adjustment] | None = Field(
        None,
        description='Placement adjustment configuration for the campaign.',
        max_items=2,
        min_items=0,
    )
    strategy: Strategy = Field(
        ...,
        description='The bidding strategy selected for the campaign. Use LEGACY_FOR_SALES to lower your bid in real time when your ad may be less likely to convert to a sale. Use AUTO_FOR_SALES to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use MANUAL to use your exact bid along with any manual adjustments.',
    )


class BenchmarkStatus(Enum):
    """
    Specifies the processing status of the benchmark. Success - If all fields in values property (impressions, clicks, conversions) have all non-null values. Failed - If all fields in values property have all null values. Partial - If some of the fields (impressions, clicks, or conversions) in values property have null values.
    """

    success = 'success'
    failed = 'failed'
    partial = 'partial'


class Values(BaseModel):
    """
    Metrics benchmark values.
    """

    class Config:
        validate_by_name= True

    conversions: Conversions | None = None
    clicks: Clicks | None = None
    impressions: Impressions | None = None


class InitialBudgetRecommendationRequest(BaseModel):
    class Config:
        validate_by_name= True

    bidding: Bidding
    ad_groups: list[AdGroup] = Field(
        ...,
        alias='adGroups',
        description='The ad group information for this new campaign.',
        max_items=1,
        min_items=1,
    )
    end_date: str | None = Field(
        None,
        alias='endDate',
        description='The end date of the campaign in YYYYMMDD format.',
    )
    targeting_type: TargetingType = Field(
        ..., alias='targetingType', description='Specifies the targeting type.'
    )
    start_date: str | None = Field(
        None,
        alias='startDate',
        description='The start date of the campaign in YYYYMMDD format.',
    )


class Benchmark(BaseModel):
    """
    Forecasted impact metrics for next 7 days or during special days.
    """

    class Config:
        validate_by_name= True

    benchmark_status: BenchmarkStatus | None = Field(
        None,
        alias='benchmarkStatus',
        description='Specifies the processing status of the benchmark. Success - If all fields in values property (impressions, clicks, conversions) have all non-null values. Failed - If all fields in values property have all null values. Partial - If some of the fields (impressions, clicks, or conversions) in values property have null values.',
    )
    values: Values | None = None


class SpecialEvent(BaseModel):
    class Config:
        validate_by_name= True

    budget_modifier: float | None = Field(
        None,
        alias='budgetModifier',
        description='Deprecated. The factor used to boost the recommended budget.',
    )
    end_date: str | None = Field(
        None,
        alias='endDate',
        description='The end date of the special event in YYYYMMDD format.',
    )
    daily_budget: float | None = Field(
        None,
        alias='dailyBudget',
        description='Recommended daily budget for the new campaign during the special event period.',
    )
    event_key: str | None = Field(
        None, alias='eventKey', description='The key of the special event.'
    )
    event_name: str | None = Field(
        None, alias='eventName', description='The name of the special event.'
    )
    start_date: str | None = Field(
        None,
        alias='startDate',
        description='The start date of the special event in YYYYMMDD format.',
    )
    benchmark: Benchmark | None = None


class InitialBudgetRecommendationResponse(BaseModel):
    class Config:
        validate_by_name= True

    special_events: list[SpecialEvent] = Field(
        ...,
        alias='specialEvents',
        description='A list of special events around the start and end date of the campaign.',
        max_items=5,
        min_items=0,
    )
    daily_budget: float = Field(
        ...,
        alias='dailyBudget',
        description='Recommended daily budget for the new campaign. Note: value -1 means we donï¿½t have enough information to provide a recommendation.',
    )
    recommendation_id: str | None = Field(
        None,
        alias='recommendationId',
        description='Unique identifier for each recommendation.',
    )
    benchmark: Benchmark

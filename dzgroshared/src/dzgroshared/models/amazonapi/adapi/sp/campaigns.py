# generated by datamodel-codegen:
#   filename:  campaigns.json
#   timestamp: 2025-07-23T04:03:56+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum

from pydantic import BaseModel, Field, RootModel
from pydantic.json_schema import SkipJsonSchema


class SponsoredProductsBudgetErrorReason(Enum):
    budget_too_low = 'BUDGET_TOO_LOW'
    budget_too_high = 'BUDGET_TOO_HIGH'
    budget_lt_default_bids = 'BUDGET_LT_DEFAULT_BIDS'
    budget_lt_keyword_bids = 'BUDGET_LT_KEYWORD_BIDS'
    budget_lt_predefined_target_bids = 'BUDGET_LT_PREDEFINED_TARGET_BIDS'
    budget_out_of_market_place_range = 'BUDGET_OUT_OF_MARKET_PLACE_RANGE'
    budget_currency_does_not_match_marketplace_settings = 'BUDGET_CURRENCY_DOES_NOT_MATCH_MARKETPLACE_SETTINGS'
    budgeting_policy_invalid = 'BUDGETING_POLICY_INVALID'
    missing_budgeting_policy = 'MISSING_BUDGETING_POLICY'
    missing_in_budget_flag = 'MISSING_IN_BUDGET_FLAG'


class SponsoredProductsOtherErrorReason(Enum):
    other_error = 'OTHER_ERROR'


class SponsoredProductsCurrencyErrorReason(Enum):
    preferred_currency_not_set = 'PREFERRED_CURRENCY_NOT_SET'
    currency_not_supported = 'CURRENCY_NOT_SUPPORTED'
    cannot_update_currency = 'CANNOT_UPDATE_CURRENCY'
    currency_not_matching_preferred_currency = 'CURRENCY_NOT_MATCHING_PREFERRED_CURRENCY'


class SponsoredProductsQueryTermMatchType(Enum):
    """
    Match type for query filters.
    | Value |  Description |
    |-----------|------------|
    | `BROAD_MATCH` | Match if the queried value contains the filter value (substring matching). Note: If queryTermMatchType is set to BROAD_MATCH, only matches for the first query included will be returned. |
    | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
    """

    broad_match = 'BROAD_MATCH'
    exact_match = 'EXACT_MATCH'


class SponsoredProductsMarketplace(Enum):
    us = 'US'
    ca = 'CA'
    mx = 'MX'
    br = 'BR'
    uk = 'UK'
    de = 'DE'
    fr = 'FR'
    es = 'ES'
    it = 'IT'
    in_ = 'IN'
    ae = 'AE'
    sa = 'SA'
    nl = 'NL'
    pl = 'PL'
    se = 'SE'
    tr = 'TR'
    eg = 'EG'
    jp = 'JP'
    au = 'AU'
    sg = 'SG'


class SponsoredProductsOffAmazonBudgetControlStrategy(Enum):
    maximize_reach = 'MAXIMIZE_REACH'
    minimize_spend = 'MINIMIZE_SPEND'


class SponsoredProductsCampaignServingStatus(Enum):
    campaign_status_enabled = 'CAMPAIGN_STATUS_ENABLED'
    campaign_paused = 'CAMPAIGN_PAUSED'
    campaign_archived = 'CAMPAIGN_ARCHIVED'
    pending_review = 'PENDING_REVIEW'
    rejected = 'REJECTED'
    pending_start_date = 'PENDING_START_DATE'
    ended = 'ENDED'
    campaign_out_of_budget = 'CAMPAIGN_OUT_OF_BUDGET'
    campaign_incomplete = 'CAMPAIGN_INCOMPLETE'
    portfolio_status_enabled = 'PORTFOLIO_STATUS_ENABLED'
    portfolio_paused = 'PORTFOLIO_PAUSED'
    portfolio_archived = 'PORTFOLIO_ARCHIVED'
    portfolio_out_of_budget = 'PORTFOLIO_OUT_OF_BUDGET'
    portfolio_pending_start_date = 'PORTFOLIO_PENDING_START_DATE'
    portfolio_ended = 'PORTFOLIO_ENDED'
    advertiser_policing_suspended = 'ADVERTISER_POLICING_SUSPENDED'
    advertiser_policing_pending_review = 'ADVERTISER_POLICING_PENDING_REVIEW'
    advertiser_archived = 'ADVERTISER_ARCHIVED'
    advertiser_paused = 'ADVERTISER_PAUSED'
    advertiser_out_of_budget = 'ADVERTISER_OUT_OF_BUDGET'
    advertiser_payment_failure = 'ADVERTISER_PAYMENT_FAILURE'
    account_out_of_budget = 'ACCOUNT_OUT_OF_BUDGET'
    advertiser_exceed_spends_limit = 'ADVERTISER_EXCEED_SPENDS_LIMIT'
    other = 'OTHER'


class SponsoredProductsErrorCause(BaseModel):
    """
    Structure describing error cause - location in the payload and data causing error
    """

    class Config:
        allow_population_by_field_name = True

    location: str = Field(
        ...,
        description='Error location, JSON Path expression specifying element of API payload causing error',
    )
    trigger: str | SkipJsonSchema[None] = Field(default=None, description='optional value causing error')


class SponsoredProductsQuotaErrorReason(Enum):
    quota_exceeded = 'QUOTA_EXCEEDED'
    non_archived_quota_exceeded = 'NON_ARCHIVED_QUOTA_EXCEEDED'


class SponsoredProductsBudgetType(Enum):
    daily = 'DAILY'
    other = 'OTHER'


class SponsoredProductsReducedObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: list[str] = Field(..., max_length=100, min_length=0)


class SponsoredProductsNameFilter(BaseModel):
    """
    Filter entities by name
    """

    class Config:
        allow_population_by_field_name = True

    query_term_match_type: SponsoredProductsQueryTermMatchType | SkipJsonSchema[None] = Field(
        None, alias='queryTermMatchType'
    )
    include: list[str] | SkipJsonSchema[None] = Field(default=None, max_length=100, min_length=0)


class SponsoredProductsBiddingErrorReason(Enum):
    bid_gt_budget = 'BID_GT_BUDGET'
    bid_out_of_market_place_range = 'BID_OUT_OF_MARKET_PLACE_RANGE'
    bid_invalid_placement = 'BID_INVALID_PLACEMENT'
    bid_invalid_shopper_cohort_type = 'BID_INVALID_SHOPPER_COHORT_TYPE'
    bid_shopper_cohorts_more_than_allowed = 'BID_SHOPPER_COHORTS_MORE_THAN_ALLOWED'
    bid_missing_audiences = 'BID_MISSING_AUDIENCES'
    bid_audiences_more_than_allowed = 'BID_AUDIENCES_MORE_THAN_ALLOWED'
    bid_invalid_audience_segment_type = 'BID_INVALID_AUDIENCE_SEGMENT_TYPE'
    bid_invalid_audience_id = 'BID_INVALID_AUDIENCE_ID'


class SponsoredProductsPlacement(Enum):
    """
    You can enable controls to adjust your bid based on the placement location. Specify a location where you want to use bid controls. The percentage value set is the percentage of the original bid for which you want to have your bid adjustment increased. For example, a 50% Top of Search adjustment on a $1.00 bid would increase the bid to $1.50 for the opportunity to win a Top of Search placement. A further 100% Amazon Business adjustment would increase the bid to $3.00 for the Amazon Business Top of Search placement and to $2.00 for all other Amazon Business placements.
    The Amazon Business Bid Adjustment and Reporting for Sponsored Products will be coming soon to Bulksheets.
    | Predicate |  Placement |
    |-----------|------------|
    | `PLACEMENT_TOP` | Top of search (first page) |
    | `PLACEMENT_PRODUCT_PAGE` | Product pages |
    | `PLACEMENT_REST_OF_SEARCH` | Rest of the search |
    | `SITE_AMAZON_BUSINESS` | Site Amazon Business |
    """

    placement_top = 'PLACEMENT_TOP'
    placement_product_page = 'PLACEMENT_PRODUCT_PAGE'
    placement_rest_of_search = 'PLACEMENT_REST_OF_SEARCH'
    site_amazon_business = 'SITE_AMAZON_BUSINESS'


class SponsoredProductsAccessDeniedErrorCode(Enum):
    access_denied = 'ACCESS_DENIED'


class SponsoredProductsTags(RootModel[dict[str, str]]):
    pass
    


class SponsoredProductsObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: list[str] = Field(..., max_length=1000, min_length=0)


class SponsoredProductsCreateOrUpdateEntityState(Enum):
    """
    Entity state for create or update operation
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'


class SponsoredProductsCampaignServingStatusReason(Enum):
    campaign_status_enabled_detail = 'CAMPAIGN_STATUS_ENABLED_DETAIL'
    campaign_paused_detail = 'CAMPAIGN_PAUSED_DETAIL'
    campaign_archived_detail = 'CAMPAIGN_ARCHIVED_DETAIL'
    pending_review_detail = 'PENDING_REVIEW_DETAIL'
    rejected_detail = 'REJECTED_DETAIL'
    pending_start_date_detail = 'PENDING_START_DATE_DETAIL'
    ended_detail = 'ENDED_DETAIL'
    campaign_out_of_budget_detail = 'CAMPAIGN_OUT_OF_BUDGET_DETAIL'
    campaign_incomplete_detail = 'CAMPAIGN_INCOMPLETE_DETAIL'
    portfolio_status_enabled_detail = 'PORTFOLIO_STATUS_ENABLED_DETAIL'
    portfolio_paused_detail = 'PORTFOLIO_PAUSED_DETAIL'
    portfolio_archived_detail = 'PORTFOLIO_ARCHIVED_DETAIL'
    portfolio_out_of_budget_detail = 'PORTFOLIO_OUT_OF_BUDGET_DETAIL'
    portfolio_pending_start_date_detail = 'PORTFOLIO_PENDING_START_DATE_DETAIL'
    portfolio_ended_detail = 'PORTFOLIO_ENDED_DETAIL'
    advertiser_policing_suspended_detail = 'ADVERTISER_POLICING_SUSPENDED_DETAIL'
    advertiser_policing_pending_review_detail = 'ADVERTISER_POLICING_PENDING_REVIEW_DETAIL'
    advertiser_archived_detail = 'ADVERTISER_ARCHIVED_DETAIL'
    advertiser_paused_detail = 'ADVERTISER_PAUSED_DETAIL'
    advertiser_out_of_budget_detail = 'ADVERTISER_OUT_OF_BUDGET_DETAIL'
    advertiser_payment_failure_detail = 'ADVERTISER_PAYMENT_FAILURE_DETAIL'
    account_out_of_budget_detail = 'ACCOUNT_OUT_OF_BUDGET_DETAIL'
    advertiser_exceed_spends_limit_detail = 'ADVERTISER_EXCEED_SPENDS_LIMIT_DETAIL'
    other = 'OTHER'


class SponsoredProductsInternalErrorErrorCode(Enum):
    internal_error = 'INTERNAL_ERROR'


class SponsoredProductsQuotaScope(Enum):
    account = 'ACCOUNT'
    parent_entity = 'PARENT_ENTITY'


class SponsoredProductsThrottledErrorCode(Enum):
    throttled = 'THROTTLED'


class SponsoredProductsCreateOrUpdateBudgetType(Enum):
    daily = 'DAILY'


class SponsoredProductsInvalidArgumentErrorCode(Enum):
    invalid_argument = 'INVALID_ARGUMENT'


class SponsoredProductsUnauthorizedErrorCode(Enum):
    unauthorized = 'UNAUTHORIZED'


class SponsoredProductsAccessDeniedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsAccessDeniedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputErrorReason(Enum):
    invalid_token = 'INVALID_TOKEN'


class SponsoredProductsCampaignServingStatusDetail(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: SponsoredProductsCampaignServingStatusReason | SkipJsonSchema[None] = None
    help_url: str | SkipJsonSchema[None] = Field(
        None,
        alias='helpUrl',
        description='A URL with additional information about the status identifier.',
    )
    message: str | SkipJsonSchema[None] = Field(
        None,
        description='A human-readable description of the status identifier specified in the name field.',
    )


class SponsoredProductsBudget(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_type: SponsoredProductsBudgetType = Field(..., alias='budgetType')
    budget: float = Field(..., description='Monetary value')
    effective_budget: float | SkipJsonSchema[None] = Field(None, alias='effectiveBudget', description='Monetary value')


class SponsoredProductsOtherError(BaseModel):
    """
    Errors not related to any of the other error types
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsOtherErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsShopperCohortType(Enum):
    """
    This field specifies the type of shopper cohort used to apply bid adjustments. `AUDIENCE_SEGMENT` is the only supported type currently.
    | Value |  Description |
    |-----------|------------|
    | `AUDIENCE_SEGMENT` | A predefined list of the shopper ids. |
    """

    audience_segment = 'AUDIENCE_SEGMENT'


class SponsoredProductsValueLimitErrorReason(Enum):
    too_low = 'TOO_LOW'
    too_high = 'TOO_HIGH'
    invalid_enum_value = 'INVALID_ENUM_VALUE'
    not_in_list = 'NOT_IN_LIST'


class SponsoredProductsCurrencyError(BaseModel):
    """
    Errors related to currency
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsCurrencyErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateOrUpdateOffAmazonBudgetControlStrategy(Enum):
    """
    The budget control strategy for ads served off Amazon . `OffAmazonBudgetControlStrategy` is optional for create and update requests.
    Value |  Description |
    |-----------|------------|
    | `MAXIMIZE_REACH` | Prioritize more reach using your target settings. This setting may result in more impressions and opportunities for sales off Amazon. |
    | `MINIMIZE_SPEND` | Optimize ad delivery to minimize spending. This setting may result in fewer impressions off Amazon, but it can help control spend. |
    """

    maximize_reach = 'MAXIMIZE_REACH'
    minimize_spend = 'MINIMIZE_SPEND'


class SponsoredProductsEntityNotFoundErrorReason(Enum):
    entity_not_found = 'ENTITY_NOT_FOUND'


class SponsoredProductsCreateOrUpdateBudget(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_type: SponsoredProductsCreateOrUpdateBudgetType = Field(..., alias='budgetType')
    budget: float = Field(..., description='Monetary value')


class SponsoredProductsOffAmazonSettings(BaseModel):
    class Config:
        allow_population_by_field_name = True

    off_amazon_budget_control_strategy: SponsoredProductsOffAmazonBudgetControlStrategy | None = Field(
        None, alias='offAmazonBudgetControlStrategy'
    )


class SponsoredProductsMissingValueErrorReason(Enum):
    missing_value = 'MISSING_VALUE'


class SponsoredProductsAudienceSegmentType(Enum):
    """
    DEPRECATED: This field is no longer used and any provided value will be ignored. The audience type is automatically determined via the Discovery API [ListTargetableEntities](https://advertising.amazon.com/API/docs/en-us/targetable-entities#operation/ListTargetableEntities) by examining the Audience path. Audience IDs are guaranteed to be unique across all audience types, enabling this inference.
    | Value               | Description|
    |---------------------|------------|
    | `SPONSORED_ADS_AMC` | This type refers to the Audience Segments created in AMC for Sponsored Ads. See [AMC API](https://advertising.amazon.com/API/docs/en-us/amc-rba#tag/Rule-based-audience) for details on how to create AMC Audiences. Once the AMC Audiences are created, the Audience Ids can be retrieved using the Discovery API [ListTargetableEntities](https://advertising.amazon.com/API/docs/en-us/targetable-entities#operation/ListTargetableEntities) with parameters; `adProduct`=`SPONSORED_PRODUCTS`, `targetTypeFilter`=`AUDIENCE` and `pathsFilter` = `[["Audience Category", "Custom-built", "AMC"]]`. Only the audiences retrieved using these filters are usable.|
    | `BEHAVIOR_DYNAMIC`  | This type refers to the Audience Segments created by Amazon for Sponsored Ads. The Audience Ids can be retrieved using the Discovery API [ListTargetableEntities](https://advertising.amazon.com/API/docs/en-us/targetable-entities#operation/ListTargetableEntities) with parameters; `adProduct`=`SPONSORED_PRODUCTS`, `targetTypeFilter`=`AUDIENCE` and `pathsFilter` = `[["Audience Category", "Custom-built", "Product"]]`. Only the audiences retrieved using these filters are usable.|
    """

    sponsored_ads_amc = 'SPONSORED_ADS_AMC'
    behavior_dynamic = 'BEHAVIOR_DYNAMIC'


class SponsoredProductsDateErrorReason(Enum):
    invalid_date = 'INVALID_DATE'
    start_date_earlier_than_today = 'START_DATE_EARLIER_THAN_TODAY'
    end_date_earlier_than_today = 'END_DATE_EARLIER_THAN_TODAY'
    start_date_later_than_maximum = 'START_DATE_LATER_THAN_MAXIMUM'
    end_date_later_than_maximum = 'END_DATE_LATER_THAN_MAXIMUM'
    start_date_after_end_date = 'START_DATE_AFTER_END_DATE'
    updating_read_only_start_date = 'UPDATING_READ_ONLY_START_DATE'
    updating_read_only_end_date = 'UPDATING_READ_ONLY_END_DATE'
    updating_ended_campaign_without_extension = 'UPDATING_ENDED_CAMPAIGN_WITHOUT_EXTENSION'


class SponsoredProductsBillingErrorReason(Enum):
    advertiser_suspended = 'ADVERTISER_SUSPENDED'
    billing_account_not_found = 'BILLING_ACCOUNT_NOT_FOUND'
    payment_profile_not_found = 'PAYMENT_PROFILE_NOT_FOUND'
    expired_payment_method = 'EXPIRED_PAYMENT_METHOD'
    vetting_failure = 'VETTING_FAILURE'
    advertiser_billing_setup_incomplete = 'ADVERTISER_BILLING_SETUP_INCOMPLETE'


class SponsoredProductsDateError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsDateErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInternalServerExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInternalErrorErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsTargetingType(Enum):
    auto = 'AUTO'
    manual = 'MANUAL'


class SponsoredProductsBiddingStrategy(Enum):
    """
    The bidding strategy.
    | Value | Strategy name | Description |
    |----------------|---------------|-------------|
    | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
    | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
    | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
    | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'
    other = 'OTHER'


class SponsoredProductsEntityState(Enum):
    """
    The current resource state.
    | State | Description |
    | --- | --- |
    | `ENABLED` | Enabled State |
    | `PAUSED` | Paused State |
    | `PROPOSED` | Proposed State (Upcoming Feature) |
    | `ARCHIVED` | ARCHIVED State |
    | `ENABLING` | State for Draft Entity Only |
    | `USER_DELETED` | State for Draft Entity Only |
    | `OTHER` | Read Only |
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'
    archived = 'ARCHIVED'
    enabling = 'ENABLING'
    user_deleted = 'USER_DELETED'
    other = 'OTHER'


class SponsoredProductsUnsupportedMediaTypeErrorCode(Enum):
    unsupported_media_type = 'UNSUPPORTED_MEDIA_TYPE'


class SponsoredProductsEntityStateErrorReason(Enum):
    invalid_target_state = 'INVALID_TARGET_STATE'
    parent_entity_forbids_creation = 'PARENT_ENTITY_FORBIDS_CREATION'
    marketplace_state_cannot_be_archived = 'MARKETPLACE_STATE_CANNOT_BE_ARCHIVED'
    auto_targeting_clause_cannot_be_archived_manually = 'AUTO_TARGETING_CLAUSE_CANNOT_BE_ARCHIVED_MANUALLY'
    archived_entity_cannot_be_modified = 'ARCHIVED_ENTITY_CANNOT_BE_MODIFIED'
    invalid_state_transition = 'INVALID_STATE_TRANSITION'
    parent_archived_forbids_updates = 'PARENT_ARCHIVED_FORBIDS_UPDATES'
    parent_status_forbids_updates_and_creates = 'PARENT_STATUS_FORBIDS_UPDATES_AND_CREATES'


class SponsoredProductsEntityType(Enum):
    campaign = 'CAMPAIGN'
    ad_group = 'AD_GROUP'
    keyword = 'KEYWORD'
    product_ad = 'PRODUCT_AD'
    campaign_negative_keyword = 'CAMPAIGN_NEGATIVE_KEYWORD'
    negative_keyword = 'NEGATIVE_KEYWORD'
    targeting_clause = 'TARGETING_CLAUSE'
    negative_targeting_clause = 'NEGATIVE_TARGETING_CLAUSE'
    campaign_negative_targeting_clause = 'CAMPAIGN_NEGATIVE_TARGETING_CLAUSE'


class SponsoredProductsParentEntityErrorReason(Enum):
    parent_entity_does_not_target_these_marketplaces = 'PARENT_ENTITY_DOES_NOT_TARGET_THESE_MARKETPLACES'
    parent_entity_archived = 'PARENT_ENTITY_ARCHIVED'
    parent_entity_not_found = 'PARENT_ENTITY_NOT_FOUND'


class SponsoredProductsMissingValueError(BaseModel):
    """
    Error describing missing values in API payloads
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMissingValueErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsDeleteSponsoredProductsCampaignsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id_filter: SponsoredProductsObjectIdFilter = Field(..., alias='campaignIdFilter')


class SponsoredProductsMalformedValueErrorReason(Enum):
    forbidden_chars = 'FORBIDDEN_CHARS'
    pattern_not_matched = 'PATTERN_NOT_MATCHED'
    too_long = 'TOO_LONG'
    too_short = 'TOO_SHORT'
    leading_or_trailing_whitespace = 'LEADING_OR_TRAILING_WHITESPACE'
    blank = 'BLANK'


class SponsoredProductsBiddingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBiddingErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    upper_limit: str | SkipJsonSchema[None] = Field(default=None, alias='upperLimit')
    lower_limit: str | SkipJsonSchema[None] = Field(default=None, alias='lowerLimit')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateOrUpdateBiddingStrategy(Enum):
    """
    The bidding strategy.
    `strategy` is required for create requests if dynamicBidding is provided, but is optional for update requests.
    | Value | Strategy name | Description |
    |----------------|---------------|-------------|
    | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
    | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
    | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
    | `RULE_BASED` | Rule based bidding | See Rule based bidding documentation https://advertising.amazon.com/API/docs/en-us/sponsored-products/rule-based-bidding/overview |
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'


class SponsoredProductsPlacementBidding(BaseModel):
    class Config:
        allow_population_by_field_name = True

    percentage: int | SkipJsonSchema[None] = Field(default=None, ge=0, le=900)
    placement: SponsoredProductsPlacement | SkipJsonSchema[None] = None


class SponsoredProductsDuplicateValueErrorReason(Enum):
    duplicate_value = 'DUPLICATE_VALUE'
    name_not_unique = 'NAME_NOT_UNIQUE'
    marketplace_attributes_repeated = 'MARKETPLACE_ATTRIBUTES_REPEATED'


class SponsoredProductsSiteRestriction(Enum):
    """
    Restrict the ad to a particular site.
    If the value is absent (ie null), it means no site restrictions and defaults to current Sponsored Products campaign behavior.
    This field is coming up and is not ready for use at the moment.

    | Value | Description |
    | ---------------------- | -------------------- |
    | `AMAZON_BUSINESS` | Restrict the ad to only show on Amazon Business. |
    |  `AMAZON_HAUL`    | Restrict the ad to only show on Amazon Haul.     |
    """

    amazon_business = 'AMAZON_BUSINESS'
    amazon_haul = 'AMAZON_HAUL'


class SponsoredProductsParentEntityError(BaseModel):
    """
    Errors related to parent entity
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsParentEntityErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnauthorizedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnauthorizedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsBudgetError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBudgetErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    upper_limit: str | SkipJsonSchema[None] = Field(default=None, alias='upperLimit')
    lower_limit: str | SkipJsonSchema[None] = Field(default=None, alias='lowerLimit')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsMalformedValueError(BaseModel):
    """
    Errors being used to represent malformed values
    e.g. containing not allowed characters, not following patters etc
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMalformedValueErrorReason
    fragment: str | SkipJsonSchema[None] = Field(None, description='fragment of the value which is wrong')
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCampaignExtendedData(BaseModel):
    class Config:
        allow_population_by_field_name = True

    last_update_date_time: datetime | SkipJsonSchema[None] = Field(
        None, alias='lastUpdateDateTime', description='Last updated date in ISO 8601.'
    )
    serving_status: SponsoredProductsCampaignServingStatus | SkipJsonSchema[None] = Field(None, alias='servingStatus')
    serving_status_details: list[SponsoredProductsCampaignServingStatusDetail] | None = Field(
        None,
        alias='servingStatusDetails',
        description='The serving status reasons of the Campaign',
    )
    creation_date_time: datetime | SkipJsonSchema[None] = Field(
        None, alias='creationDateTime', description='Creation date in ISO 8601.'
    )


class SponsoredProductsBillingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBillingErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInvalidInputErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityNotFoundError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityNotFoundErrorReason
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    entity_id: str = Field(..., alias='entityId', description='The entity id in the request')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottledError(BaseModel):
    """
    Error that represents failure due to API caller exceeding allowed service limits.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsThrottledErrorCode
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottlingExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsThrottledErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsAudienceSegment(BaseModel):
    class Config:
        allow_population_by_field_name = True

    audience_id: str = Field(
        ...,
        alias='audienceId',
        description='`audienceId` is specified based on the `audienceSegmentType` used.',
        max_length=20,
        min_length=1,
    )
    audience_segment_type: SponsoredProductsAudienceSegmentType | SkipJsonSchema[None] = Field(
        None, alias='audienceSegmentType'
    )


class SponsoredProductsUnsupportedMediaTypeExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnsupportedMediaTypeErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityQuotaError(BaseModel):
    """
    Errors related to exceeding quota in campaign management service
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsQuotaErrorReason
    quota_scope: SponsoredProductsQuotaScope | SkipJsonSchema[None] = Field(default=None, alias='quotaScope')
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    quota: str | SkipJsonSchema[None] = Field(default=None, description='optional current quota')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateOrUpdateOffAmazonSettings(BaseModel):
    """
    Settings that apply to ads served off Amazon. `OffAmazonSettings` is optional for both Create and Update requests.
    This field is upcoming and is not ready for use.
    """

    class Config:
        allow_population_by_field_name = True

    off_amazon_budget_control_strategy: SponsoredProductsCreateOrUpdateOffAmazonBudgetControlStrategy | None = Field(
        None, alias='offAmazonBudgetControlStrategy'
    )


class SponsoredProductsRangeError(BaseModel):
    """
    Errors related to range constraints violations
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsValueLimitErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    allowed: list[str] | SkipJsonSchema[None] = Field(default=None, description='allowed values')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    upper_limit: str | SkipJsonSchema[None] = Field(None, alias='upperLimit', description='optional upper limit')
    lower_limit: str | SkipJsonSchema[None] = Field(None, alias='lowerLimit', description='optional lower limit')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityStateFilter(BaseModel):
    """
    Filter entities by state. To filter live entities, only 'ENABLED', 'PAUSED' and 'ARCHIVED' can be used
    """

    class Config:
        allow_population_by_field_name = True

    include: list[SponsoredProductsEntityState] = Field(..., max_length=10, min_length=0)


class SponsoredProductsDuplicateValueError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsDuplicateValueErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityStateError(BaseModel):
    """
    entity state update errors
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityStateErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsShopperCohortBidding(BaseModel):
    class Config:
        allow_population_by_field_name = True

    shopper_cohort_type: SponsoredProductsShopperCohortType = Field(..., alias='shopperCohortType')
    percentage: int | SkipJsonSchema[None] = Field(default=None, ge=0, le=900)
    audience_segments: list[SponsoredProductsAudienceSegment] | SkipJsonSchema[None] = Field(
        None,
        alias='audienceSegments',
        description='A list of Audience Segments. Shoppers belonging to these segments will be selected for applying the bid adjustments. This is a required field when using "AUDIENCE_SEGMENT" option for `shopperCohortType`.',
        max_length=1,
        min_length=1,
    )


class SponsoredProductsInternalServerError(BaseModel):
    """
    Error that represents non-retryable API service error. Sending the same request will result in another error.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInternalErrorErrorCode
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCampaignAccessErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_not_found_error: SponsoredProductsEntityNotFoundError | SkipJsonSchema[None] = Field(
        None, alias='entityNotFoundError'
    )
    missing_value_error: SponsoredProductsMissingValueError | SkipJsonSchema[None] = Field(
        None, alias='missingValueError'
    )
    date_error: SponsoredProductsDateError | SkipJsonSchema[None] = Field(default=None, alias='dateError')
    malformed_value_error: SponsoredProductsMalformedValueError | SkipJsonSchema[None] = Field(
        None, alias='malformedValueError'
    )
    internal_server_error: SponsoredProductsInternalServerError | SkipJsonSchema[None] = Field(
        None, alias='internalServerError'
    )
    range_error: SponsoredProductsRangeError | SkipJsonSchema[None] = Field(default=None, alias='rangeError')
    other_error: SponsoredProductsOtherError | SkipJsonSchema[None] = Field(default=None, alias='otherError')
    throttled_error: SponsoredProductsThrottledError | SkipJsonSchema[None] = Field(None, alias='throttledError')
    invalid_input_error: SponsoredProductsInvalidInputError | SkipJsonSchema[None] = Field(
        None, alias='invalidInputError'
    )


class SponsoredProductsCreateOrUpdateDynamicBidding(BaseModel):
    """
    Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
    For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
    """

    class Config:
        allow_population_by_field_name = True

    shopper_cohort_bidding: list[SponsoredProductsShopperCohortBidding] | SkipJsonSchema[None] = Field(
        None,
        alias='shopperCohortBidding',
        description='Specifies Shopper Cohorts based bid adjustment controls. `shopperCohortBidding` is optional for both Create and Update requests.\nYou can enable this control to adjust your bid based on the shopper cohorts. The percentage value set is the percentage of the original bid including any other bid adjustments such as `placementBidding`. For example, a `placementBidding` with 50% adjustment on a $1.00 bid would increase the bid to $1.50, and a `shopperCohortBidding` with 100% adjustment would further increase the bid to $3.00.',
        max_length=1,
        min_length=0,
    )
    placement_bidding: list[SponsoredProductsPlacementBidding] | SkipJsonSchema[None] = Field(
        None, alias='placementBidding'
    )
    strategy: SponsoredProductsCreateOrUpdateBiddingStrategy | SkipJsonSchema[None] = None


class SponsoredProductsListSponsoredProductsCampaignsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id_filter: SponsoredProductsObjectIdFilter | SkipJsonSchema[None] = Field(None, alias='campaignIdFilter')
    portfolio_id_filter: SponsoredProductsReducedObjectIdFilter | SkipJsonSchema[None] = Field(
        None, alias='portfolioIdFilter'
    )
    state_filter: SponsoredProductsEntityStateFilter | SkipJsonSchema[None] = Field(None, alias='stateFilter')
    max_results: int | SkipJsonSchema[None] = Field(
        None,
        alias='maxResults',
        description='Number of records to include in the paginated response. Defaults to max page size for given API',
    )
    next_token: str | SkipJsonSchema[None] = Field(
        None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )
    include_extended_data_fields: bool | SkipJsonSchema[None] = Field(
        None,
        alias='includeExtendedDataFields',
        description='Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus',
    )
    name_filter: SponsoredProductsNameFilter | SkipJsonSchema[None] = Field(default=None, alias='nameFilter')


class SponsoredProductsCampaignMutationErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_state_error: SponsoredProductsEntityStateError | SkipJsonSchema[None] = Field(None, alias='entityStateError')
    missing_value_error: SponsoredProductsMissingValueError | SkipJsonSchema[None] = Field(
        None, alias='missingValueError'
    )
    date_error: SponsoredProductsDateError | SkipJsonSchema[None] = Field(default=None, alias='dateError')
    bidding_error: SponsoredProductsBiddingError | SkipJsonSchema[None] = Field(None, alias='biddingError')
    duplicate_value_error: SponsoredProductsDuplicateValueError | SkipJsonSchema[None] = Field(
        None, alias='duplicateValueError'
    )
    range_error: SponsoredProductsRangeError | SkipJsonSchema[None] = Field(default=None, alias='rangeError')
    parent_entity_error: SponsoredProductsParentEntityError | SkipJsonSchema[None] = Field(
        None, alias='parentEntityError'
    )
    other_error: SponsoredProductsOtherError | SkipJsonSchema[None] = Field(default=None, alias='otherError')
    throttled_error: SponsoredProductsThrottledError | SkipJsonSchema[None] = Field(None, alias='throttledError')
    entity_not_found_error: SponsoredProductsEntityNotFoundError | SkipJsonSchema[None] = Field(
        None, alias='entityNotFoundError'
    )
    malformed_value_error: SponsoredProductsMalformedValueError | SkipJsonSchema[None] = Field(
        None, alias='malformedValueError'
    )
    budget_error: SponsoredProductsBudgetError | SkipJsonSchema[None] = Field(default=None, alias='budgetError')
    currency_error: SponsoredProductsCurrencyError | SkipJsonSchema[None] = Field(None, alias='currencyError')
    billing_error: SponsoredProductsBillingError | SkipJsonSchema[None] = Field(None, alias='billingError')
    entity_quota_error: SponsoredProductsEntityQuotaError | SkipJsonSchema[None] = Field(None, alias='entityQuotaError')
    internal_server_error: SponsoredProductsInternalServerError | SkipJsonSchema[None] = Field(
        None, alias='internalServerError'
    )


class SponsoredProductsCreateCampaign(BaseModel):
    class Config:
        allow_population_by_field_name = True

    site_restrictions: list[SponsoredProductsSiteRestriction] | SkipJsonSchema[None] = Field(
        None,
        alias='siteRestrictions',
        description='Restrict the ad to a particular site. siteRestrictions is an optional field.\nIf this field is not set, ads from the campaign will appear on Amazon - including both Amazon retail and Amazon Business - as well as select sites and apps off Amazon.\nPlease note that: 1) AMAZON_BUSINESS option is only available for Amazon Business operated marketplaces (US, CA, MX, UK, DE, FR, IT, ES, IN, JP), and AMAZON_HAUL option is only available in US;\n2) siteRestrictions cannot be changed post campaign creation;\n3) siteRestrictions don�t support shopperCohortBidding setting, SITE_AMAZON_BUSINESS placementBidding setting and offAmazonSettings;\n4) Only AMAZON_BUSINESS option is ready for use at the moment.',
        max_length=1,
        min_length=1,
    )
    portfolio_id: str | SkipJsonSchema[None] = Field(
        None,
        alias='portfolioId',
        description='The identifier of an existing portfolio to which the campaign is associated.',
    )
    off_amazon_settings: SponsoredProductsCreateOrUpdateOffAmazonSettings | SkipJsonSchema[None] = Field(
        None, alias='offAmazonSettings'
    )
    end_date: date | SkipJsonSchema[None] = Field(
        None, alias='endDate', description='The format of the date is YYYY-MM-DD.'
    )
    name: str = Field(..., description='The name of the campaign.')
    targeting_type: SponsoredProductsTargetingType = Field(..., alias='targetingType')
    state: SponsoredProductsCreateOrUpdateEntityState
    dynamic_bidding: SponsoredProductsCreateOrUpdateDynamicBidding | SkipJsonSchema[None] = Field(
        None, alias='dynamicBidding'
    )
    start_date: date | SkipJsonSchema[None] = Field(
        None,
        alias='startDate',
        description="Default: today's date. The format of the date is YYYY-MM-DD.",
    )
    budget: SponsoredProductsCreateOrUpdateBudget
    tags: SponsoredProductsTags | SkipJsonSchema[None] = None


class SponsoredProductsDynamicBidding(BaseModel):
    class Config:
        allow_population_by_field_name = True

    shopper_cohort_bidding: list[SponsoredProductsShopperCohortBidding] | SkipJsonSchema[None] = Field(
        None,
        alias='shopperCohortBidding',
        description='Specifies Shopper Cohorts based bid adjustment controls. `shopperCohortBidding` is optional for both Create and Update requests.\nYou can enable this control to adjust your bid based on the shopper cohorts. The percentage value set is the percentage of the original bid including any other bid adjustments such as `placementBidding`. For example, a `placementBidding` with 50% adjustment on a $1.00 bid would increase the bid to $1.50, and a `shopperCohortBidding` with 100% adjustment would further increase the bid to $3.00.',
        max_length=1,
        min_length=0,
    )
    placement_bidding: list[SponsoredProductsPlacementBidding] | SkipJsonSchema[None] = Field(
        None, alias='placementBidding'
    )
    strategy: SponsoredProductsBiddingStrategy


class SponsoredProductsCampaignAccessError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsCampaignAccessErrorSelector = Field(..., alias='errorValue')


class SponsoredProductsUpdateCampaign(BaseModel):
    class Config:
        allow_population_by_field_name = True

    site_restrictions: list[SponsoredProductsSiteRestriction] | SkipJsonSchema[None] = Field(
        None,
        alias='siteRestrictions',
        description='Restrict the ad to a particular site. siteRestrictions is an optional field.\nIf this field is not set, ads from the campaign will appear on Amazon - including both Amazon retail and Amazon Business - as well as select sites and apps off Amazon.\nPlease note that: 1) AMAZON_BUSINESS option is only available for Amazon Business operated marketplaces (US, CA, MX, UK, DE, FR, IT, ES, IN, JP), and AMAZON_HAUL option is only available in US;\n2) siteRestrictions cannot be changed post campaign creation;\n3) siteRestrictions don�t support shopperCohortBidding setting, SITE_AMAZON_BUSINESS placementBidding setting and offAmazonSettings;\n4) Only AMAZON_BUSINESS option is ready for use at the moment.',
        max_length=1,
        min_length=1,
    )
    portfolio_id: str | SkipJsonSchema[None] = Field(
        None,
        alias='portfolioId',
        description='The identifier of an existing portfolio to which the campaign is associated.',
    )
    off_amazon_settings: SponsoredProductsCreateOrUpdateOffAmazonSettings | SkipJsonSchema[None] = Field(
        None, alias='offAmazonSettings'
    )
    end_date: date | SkipJsonSchema[None] = Field(
        None, alias='endDate', description='The format of the date is YYYY-MM-DD.'
    )
    campaign_id: str = Field(..., alias='campaignId', description='The identifier of the campaign.')
    name: str | SkipJsonSchema[None] = Field(default=None, description='The name of the campaign.')
    targeting_type: SponsoredProductsTargetingType | SkipJsonSchema[None] = Field(None, alias='targetingType')
    state: SponsoredProductsCreateOrUpdateEntityState | SkipJsonSchema[None] = None
    dynamic_bidding: SponsoredProductsCreateOrUpdateDynamicBidding | SkipJsonSchema[None] = Field(
        None, alias='dynamicBidding'
    )
    start_date: date | SkipJsonSchema[None] = Field(
        None, alias='startDate', description='The format of the date is YYYY-MM-DD.'
    )
    budget: SponsoredProductsCreateOrUpdateBudget | SkipJsonSchema[None] = None
    tags: SponsoredProductsTags | SkipJsonSchema[None] = None


class SponsoredProductsCampaignMutationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsCampaignMutationErrorSelector = Field(..., alias='errorValue')


class SponsoredProductsUpdateSponsoredProductsCampaignsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaigns: list[SponsoredProductsUpdateCampaign] = Field(
        ...,
        description='An array of campaigns with updated values. Note: targetingType cannot be updated',
        max_length=1000,
        min_length=0,
    )


class SponsoredProductsCampaign(BaseModel):
    class Config:
        allow_population_by_field_name = True

    site_restrictions: list[SponsoredProductsSiteRestriction] | SkipJsonSchema[None] = Field(
        None, alias='siteRestrictions', max_length=1, min_length=1
    )
    off_amazon_settings: SponsoredProductsOffAmazonSettings | SkipJsonSchema[None] = Field(
        None, alias='offAmazonSettings'
    )
    end_date: date | SkipJsonSchema[None] = Field(
        None, alias='endDate', description='The format of the date is YYYY-MM-DD.'
    )
    campaign_id: str = Field(..., alias='campaignId', description='The identifier of the campaign.')
    dynamic_bidding: SponsoredProductsDynamicBidding | SkipJsonSchema[None] = Field(None, alias='dynamicBidding')
    tags: SponsoredProductsTags | SkipJsonSchema[None] = None
    portfolio_id: str | SkipJsonSchema[None] = Field(
        None,
        alias='portfolioId',
        description='The identifier of an existing portfolio to which the campaign is associated.',
    )
    name: str = Field(..., description='The name of the campaign.')
    targeting_type: SponsoredProductsTargetingType = Field(..., alias='targetingType')
    state: SponsoredProductsEntityState
    start_date: date = Field(..., alias='startDate', description='The format of the date is YYYY-MM-DD.')
    budget: SponsoredProductsBudget
    extended_data: SponsoredProductsCampaignExtendedData | SkipJsonSchema[None] = Field(None, alias='extendedData')


class SponsoredProductsListSponsoredProductsCampaignsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total_results: int | SkipJsonSchema[None] = Field(
        None, alias='totalResults', description='The total number of entities'
    )
    campaigns: list[SponsoredProductsCampaign] | SkipJsonSchema[None] = None
    next_token: str | SkipJsonSchema[None] = Field(
        None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )


class SponsoredProductsCreateSponsoredProductsCampaignsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaigns: list[SponsoredProductsCreateCampaign] = Field(
        ..., description='An array of campaigns.', max_length=1000, min_length=0
    )


class SponsoredProductsCampaignMutationFailureResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    index: int = Field(
        ...,
        description='the index of the campaign in the array from the request body',
        ge=0,
    )
    errors: list[SponsoredProductsCampaignMutationError] | SkipJsonSchema[None] = Field(
        None, description='A list of validation errors'
    )


class SponsoredProductsCampaignMutationExceptionResponseContent(BaseModel):
    """
    Exception resulting in mutating campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: list[SponsoredProductsCampaignMutationError] | SkipJsonSchema[None] = None


class SponsoredProductsCampaignAccessExceptionResponseContent(BaseModel):
    """
    Exception resulting in accessing campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: list[SponsoredProductsCampaignAccessError] | SkipJsonSchema[None] = None


class SponsoredProductsCampaignMutationSuccessResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str | SkipJsonSchema[None] = Field(None, alias='campaignId', description='the campaign ID')
    index: int = Field(
        ...,
        description='the index of the campaign in the array from the request body',
        ge=0,
    )
    campaign: SponsoredProductsCampaign | SkipJsonSchema[None] = None


class SponsoredProductsBulkCampaignOperationResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    success: list[SponsoredProductsCampaignMutationSuccessResponseItem] | SkipJsonSchema[None] = Field(
        None, max_length=1000, min_length=0
    )
    error: list[SponsoredProductsCampaignMutationFailureResponseItem] | SkipJsonSchema[None] = Field(
        None, max_length=1000, min_length=0
    )


class SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaigns: SponsoredProductsBulkCampaignOperationResponse


class SponsoredProductsUpdateSponsoredProductsCampaignsResponseContent(
    SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent
):
    pass


class SponsoredProductsCreateSponsoredProductsCampaignsResponseContent(
    SponsoredProductsDeleteSponsoredProductsCampaignsResponseContent
):
    pass

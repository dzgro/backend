# generated by datamodel-codegen:
#   filename:  keyword_group_targeting_recommendations.json
#   timestamp: 2025-07-23T04:03:23+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class Asin(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., description='ASIN.', max_length=32)


class KeywordGroupsRecommendationsRequest(BaseModel):
    """
    Keyword groups request.
    """

    class Config:
        allow_population_by_field_name = True

    asins: list[Asin] = Field(
        ..., description='List of ASINs.', max_items=1000, min_items=1
    )
    country_code: str | None = Field(
        None,
        alias='countryCode',
        description='The country code representing the origin country of the input ASIN list, it will be used for generating keyword group recommendations.',
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='If the last response included this field then there are more items to retrieve.',
    )


class ErrorCode(Enum):
    """
    Error Code. For informational purpose only.
    """

    dependency_failure = 'DEPENDENCY_FAILURE'
    internal_error = 'INTERNAL_ERROR'
    invalid_request = 'INVALID_REQUEST'
    not_found = 'NOT_FOUND'
    not_implemented = 'NOT_IMPLEMENTED'
    rate_exceeded = 'RATE_EXCEEDED'
    timeout = 'TIMEOUT'
    unauthenticated = 'UNAUTHENTICATED'
    unauthorized = 'UNAUTHORIZED'
    unavailable = 'UNAVAILABLE'
    unsupported_media = 'UNSUPPORTED_MEDIA'


class Error(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_message: str | None = Field(
        None,
        alias='errorMessage',
        description='human readable error message for each error.',
        max_length=255,
    )
    error_code: ErrorCode | None = Field(
        None,
        alias='errorCode',
        description='Error Code. For informational purpose only.',
    )
    error_id: int | None = Field(
        None,
        alias='errorId',
        description='ID to indicate the granular error. Rely only on this to programmatically handle errors.',
    )


class SPKeywordGroupsException(BaseModel):
    """
    Custom Exception message.
    """

    class Config:
        allow_population_by_field_name = True

    request_id: str | None = Field(None, alias='requestId', max_length=32)
    details: str | None = Field(
        None, description='Human Readable message.', max_length=64
    )
    errors: list[Error] | None = Field(None, max_items=25, min_items=1)
    http_status_code: str | None = Field(
        None, alias='httpStatusCode', description='http status code.', max_length=4
    )


class KeywordGroup(BaseModel):
    """
    Keyword group. Represents a high level keyword targeting intent. e.g. the keyword group "gift" can target relevant search queries containing the word gift
    """

    class Config:
        allow_population_by_field_name = True

    impact_summary: str | None = Field(
        None, alias='impactSummary', description='Summary of impacts.'
    )
    description: str | None = Field(
        None, description='Detailed Keyword group description.'
    )
    sample_keywords: list[str] | None = Field(
        None,
        alias='sampleKeywords',
        description='Sample keywords that match the group.',
        max_items=10,
        min_items=0,
    )
    id: str = Field(
        ...,
        description='Unique Identifier for the keyword group. To be passed during targeting clause creation.',
    )
    text: str = Field(
        ..., description='Keyword group text. Can be used for display purposes.'
    )


class KeywordGroupsRecommendationsResponse(BaseModel):
    """
    Keyword group recommendations response.
    """

    class Config:
        allow_population_by_field_name = True

    country_code: str | None = Field(
        None,
        alias='countryCode',
        description='The country code representing the origin country of the input ASIN list, used for generating keyword group recommendations.',
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='If present then there is more data to retrieve. To retrieve, resend request with token.',
    )
    keyword_groups: list[KeywordGroup] = Field(
        ...,
        alias='keywordGroups',
        description='Keyword group recommendations for input list of ASINs.',
        max_items=50,
        min_items=0,
    )

# generated by datamodel-codegen:
#   filename:  consolidated_recommendations.json
#   timestamp: 2025-07-23T04:04:08+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class InternalServerException(BaseModel):
    """
    Returns information about an InternalServerException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class ValidationException(BaseModel):
    """
    Returns information about a ValidationException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class SevenDaysEstimatedOpportunities(BaseModel):
    class Config:
        allow_population_by_field_name = True

    estimated_incremental_clicks_lower: int | None = Field(
        None,
        alias='estimatedIncrementalClicksLower',
        description='Lower bound of the estimated incremental clicks that could be gained if all optimizations are made.',
    )
    estimated_incremental_clicks_upper: int | None = Field(
        None,
        alias='estimatedIncrementalClicksUpper',
        description='Upper bound of the estimated incremental clicks that could be gained if all optimizations are made.',
    )
    end_date: str | None = Field(
        None,
        alias='endDate',
        description='End date of the opportunities date range in YYYY-MM-DDTHH:mm:ssZ format.',
    )
    start_date: str | None = Field(
        None,
        alias='startDate',
        description='Start date of the opportunities date range in YYYY-MM-DDTHH:mm:ssZ format.',
    )


class Action(Enum):
    """
    Type of suggested action.
    """

    increase = 'INCREASE'
    decrease = 'DECREASE'


class BudgetRecommendation(BaseModel):
    """
    Contains suggested recommendation for the campaign budget.
    """

    class Config:
        allow_population_by_field_name = True

    suggested_budget: float | None = Field(
        None,
        alias='suggestedBudget',
        description='The suggested budget value for the campaign.',
    )
    action: Action | None = Field(None, description='Type of suggested action.')


class MatchType(Enum):
    """
    Keyword match type. | Value | Description | | --- | --- | | `BROAD` | Use BROAD to broadly match your keyword targeting ads with search queries.| | `EXACT` | Use EXACT to exactly match your keyword targeting ads with search queries.| | `PHRASE` | Use PHRASE to match your keyword targeting ads with search phrases.| | `GROUP` | Use GROUP to match your keyword targeting ads with keyword group. |
    """

    exact = 'EXACT'
    phrase = 'PHRASE'
    broad = 'BROAD'
    group = 'GROUP'


class Action1(Enum):
    """
    Type of action for the keyword targeting.
    """

    add = 'ADD'
    remove = 'REMOVE'
    increase = 'INCREASE'
    decrease = 'DECREASE'
    update = 'UPDATE'


class KeywordTargetingRecommendation(BaseModel):
    """
    Contains suggested recommendation for the keyword targeting.
    """

    class Config:
        allow_population_by_field_name = True

    keyword_id: str | None = Field(
        None, alias='keywordId', description='The identifier of the keyword targeting.'
    )
    suggested_bid: float | None = Field(
        None,
        alias='suggestedBid',
        description='The suggested bid value associated with this keyword targeting clause.',
    )
    match_type: MatchType | None = Field(
        None,
        alias='matchType',
        description='Keyword match type. | Value | Description | | --- | --- | | `BROAD` | Use BROAD to broadly match your keyword targeting ads with search queries.| | `EXACT` | Use EXACT to exactly match your keyword targeting ads with search queries.| | `PHRASE` | Use PHRASE to match your keyword targeting ads with search phrases.| | `GROUP` | Use GROUP to match your keyword targeting ads with keyword group. |',
    )
    action: Action1 | None = Field(
        None, description='Type of action for the keyword targeting.'
    )
    ad_group_id: str | None = Field(
        None, alias='adGroupId', description='The ad group identifier.'
    )
    keyword_text: str | None = Field(
        None, alias='keywordText', description='The keyword text.'
    )


class SuggestedBiddingStrategy(Enum):
    """
    The suggested bidding strategy value for the campaign.
    | Value | Strategy name | Description |
    |----------------|---------------|-------------|
    | `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |
    | `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |
    | `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'


class Action2(Enum):
    """
    Type of suggested action.
    """

    update = 'UPDATE'


class BiddingStrategyRecommendation(BaseModel):
    """
    Contains suggested recommendation for the campaign bidding strategy.
    """

    class Config:
        allow_population_by_field_name = True

    suggested_bidding_strategy: SuggestedBiddingStrategy | None = Field(
        None,
        alias='suggestedBiddingStrategy',
        description='The suggested bidding strategy value for the campaign.\n| Value | Strategy name | Description |\n|----------------|---------------|-------------|\n| `LEGACY_FOR_SALES` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. |\n| `AUTO_FOR_SALES` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. |\n| `MANUAL` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |',
    )
    action: Action2 | None = Field(None, description='Type of suggested action.')


class TargetingGroupExpression(Enum):
    """
    The type of targeting group expression.
    | Value | Description |
    | --- | --- |
    | `LOOSE_MATCH` | This will show your ad to shoppers who use search terms loosely related to your products.|
    | `CLOSE_MATCH` | This will show your ad to shoppers who use search terms closely related to your products.|
    | `COMPLEMENTS` | This will show your ad to shoppers who view the detail pages of products that complement your product.|
    | `SUBSTITUTES` | This will show your ad to shoppers who use detail pages of products similar to yours.|
    """

    close_match = 'CLOSE_MATCH'
    loose_match = 'LOOSE_MATCH'
    substitutes = 'SUBSTITUTES'
    complements = 'COMPLEMENTS'


class Action3(Enum):
    """
    Type of suggested action.
    """

    add = 'ADD'
    remove = 'REMOVE'
    increase = 'INCREASE'
    decrease = 'DECREASE'


class TargetingGroupBidRecommendation(BaseModel):
    """
    Contains suggested recommendation for the auto targeting group.
    """

    class Config:
        allow_population_by_field_name = True

    suggested_bid: float | None = Field(
        None,
        alias='suggestedBid',
        description='The suggested bid value associated with this targeting.',
    )
    target_id: str | None = Field(
        None, alias='targetId', description='The target identifier.'
    )
    targeting_group_expression: TargetingGroupExpression | None = Field(
        None,
        alias='targetingGroupExpression',
        description='The type of targeting group expression.\n| Value | Description |\n| --- | --- |\n| `LOOSE_MATCH` | This will show your ad to shoppers who use search terms loosely related to your products.|\n| `CLOSE_MATCH` | This will show your ad to shoppers who use search terms closely related to your products.|\n| `COMPLEMENTS` | This will show your ad to shoppers who view the detail pages of products that complement your product.|\n| `SUBSTITUTES` | This will show your ad to shoppers who use detail pages of products similar to yours.|',
    )
    action: Action3 | None = Field(None, description='Type of suggested action.')
    ad_group_id: str | None = Field(
        None, alias='adGroupId', description='The ad group identifier.'
    )


class ThrottlingException(BaseModel):
    """
    Returns information about a ThrottlingException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class UnprocessableEntityException(BaseModel):
    """
    Returns information about UnprocessableEntityException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class PlacementType(Enum):
    """
    The placement type.
    """

    placement_top = 'PLACEMENT_TOP'
    placement_product_page = 'PLACEMENT_PRODUCT_PAGE'
    placement_rest_of_search = 'PLACEMENT_REST_OF_SEARCH'


class PlacementBiddingRecommendation(BaseModel):
    """
    Contains suggested recommendation for a placement bid adjustment.
    """

    class Config:
        allow_population_by_field_name = True

    incremental_impressions_upper_percent: int | None = Field(
        None,
        alias='incrementalImpressionsUpperPercent',
        description='Upper bound of the estimated incremental impressions that could be gained if this optimization used',
    )
    suggested_bid_adjustment: float | None = Field(
        None,
        alias='suggestedBidAdjustment',
        description='The suggested bid adjustment percent value for this placement type.',
    )
    placement_type: PlacementType | None = Field(
        None, alias='placementType', description='The placement type.'
    )
    action: Action3 | None = Field(None, description='Type of suggested action.')
    incremental_impressions_lower_percent: int | None = Field(
        None,
        alias='incrementalImpressionsLowerPercent',
        description='Lower bound of the estimated incremental impressions that could be gained if this optimization used',
    )


class CampaignRecommendation(BaseModel):
    """
    This object contains a set of recommendations for a campaign across bid, budget, targeting.
    """

    class Config:
        allow_population_by_field_name = True

    seven_days_estimated_opportunities: SevenDaysEstimatedOpportunities | None = Field(
        None, alias='sevenDaysEstimatedOpportunities'
    )
    bidding_strategy_recommendation: BiddingStrategyRecommendation | None = Field(
        None, alias='biddingStrategyRecommendation'
    )
    campaign_id: str | None = Field(
        None, alias='campaignId', description='The identifier of the campaign.'
    )
    keyword_targeting_recommendations: list[KeywordTargetingRecommendation] | None = (
        Field(None, alias='keywordTargetingRecommendations', max_items=50, min_items=0)
    )
    budget_recommendation: BudgetRecommendation | None = Field(
        None, alias='budgetRecommendation'
    )
    targeting_group_bid_recommendations: (
        list[TargetingGroupBidRecommendation] | None
    ) = Field(None, alias='targetingGroupBidRecommendations', max_items=50, min_items=0)
    placement_bidding_recommendations: list[PlacementBiddingRecommendation] | None = (
        Field(None, alias='placementBiddingRecommendations', max_items=50, min_items=0)
    )


class UnauthorizedException(BaseModel):
    """
    Returns information about an UnauthorizedException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class AccessDeniedException(BaseModel):
    """
    Returns information about an AccessDeniedException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class GetCampaignRecommendationsResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='An identifier to fetch next set of campaign recommendations records in the result set if available. This will be null when at the end of result set.',
        example='MTAxNTExtY5NDE=',
    )
    recommendations: list[CampaignRecommendation] = Field(
        ..., description='List of campaign recommendations.', max_items=50, min_items=0
    )

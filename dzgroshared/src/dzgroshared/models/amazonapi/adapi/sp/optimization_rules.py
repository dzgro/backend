# generated by datamodel-codegen:
#   filename:  optimization_rules.json
#   timestamp: 2025-07-23T04:03:12+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class OptimizationRulesAPISwaggerRuleRecurrenceType(Enum):
    """
    The frequency of the optimization rule application.
    """

    daily = 'DAILY'
    weekly = 'WEEKLY'


class OptimizationRulesAPISwaggerAssociateOptimizationRulesToCampaignRequest(BaseModel):
    """
    Request body for create campaign to optimization rules association. Maximum 100 rules can be associated to each campaign.
    """

    class Config:
        validate_by_name= True

    optimization_rule_ids: list[str] = Field(
        ...,
        alias='optimizationRuleIds',
        description='An array of rule identifiers.',
        example=[
            '7bf484ff-381c-4703-82ec-66b9eb732705',
            'ed1d58dd-662b-4639-9ee2-85ff1386b946',
            '750fe03c-9884-4a72-a540-3b87521018d9',
        ],
        max_items=25,
        min_items=1,
    )


class OptimizationRulesAPISwaggerRuleSubCategoryV2(Enum):
    """
    The sub-category of the optimization rule.
    """

    schedule = 'SCHEDULE'
    performance = 'PERFORMANCE'


class OptimizationRulesAPISwaggerRuleActionOperator(Enum):
    """
    The action operation for the rule.
    """

    increment = 'INCREMENT'


class OptimizationRulesAPISwaggerFilterType(Enum):
    """
    Types of filter used for search.
    """

    exact_match = 'EXACT_MATCH'
    broad_match = 'BROAD_MATCH'


class OptimizationRulesAPISwaggerOptimizationRulesError(BaseModel):
    """
    Error response object.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    message: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class OptimizationRulesAPISwaggerActionType(Enum):
    """
    The action taken when the optimization rule is enabled. Defaults to ADOPT.
    """

    adopt = 'ADOPT'


class OptimizationRulesAPISwaggerComparisonOperator(Enum):
    """
    The comparison operator.
    """

    greater_than = 'GREATER_THAN'
    less_than = 'LESS_THAN'
    equal_to = 'EQUAL_TO'
    less_than_or_equal_to = 'LESS_THAN_OR_EQUAL_TO'
    greater_than_or_equal_to = 'GREATER_THAN_OR_EQUAL_TO'


class OptimizationRulesAPISwaggerExpressionType(Enum):
    """
    The expression types of targets for the rule.
    """

    exact = 'EXACT'
    expanded = 'EXPANDED'
    broad = 'BROAD'
    phrase = 'PHRASE'


class OptimizationRulesAPISwaggerRuleSubCategory(Enum):
    """
    The sub-category of the optimization rule.
    """

    schedule = 'SCHEDULE'


class ActionUnit(Enum):
    percent = 'PERCENT'


class OptimizationRulesAPISwaggerActionDetails(BaseModel):
    """
    Details of a rule action.
    """

    class Config:
        validate_by_name= True

    action_unit: ActionUnit = Field(..., alias='actionUnit')
    value: float = Field(
        ...,
        description='An integer between 1 & 100, representing the percent increase on base bid.',
    )
    action_operator: OptimizationRulesAPISwaggerRuleActionOperator = Field(
        ..., alias='actionOperator'
    )


class OptimizationRulesAPISwaggerRuleAttribute(Enum):
    """
    The attribute of the rule.
    """

    roas = 'ROAS'


class OptimizationRulesAPISwaggerRuleCategory(Enum):
    """
    The type of the optimization rule.
    """

    bid = 'BID'


class OptimizationRulesAPISwaggerEntityFieldFilter(BaseModel):
    """
    Filter type and value pair.
    """

    class Config:
        validate_by_name= True

    values: list[str] | None = Field(None, max_items=100, min_items=1)
    filter_type: OptimizationRulesAPISwaggerFilterType | None = Field(
        None, alias='filterType'
    )


class OptimizationRulesAPISwaggerCampaignFilter(BaseModel):
    """
    Filter on campaigns. This filter only returns associated Bid and Targeting rules, and it does not return budget rules.
    """

    class Config:
        validate_by_name= True

    campaign_id: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='campaignId'
    )


class OptimizationRulesAPISwaggerRuleAction(BaseModel):
    """
    Action to be taken by the rule.
    """

    class Config:
        validate_by_name= True

    action_type: OptimizationRulesAPISwaggerActionType = Field(..., alias='actionType')
    action_details: OptimizationRulesAPISwaggerActionDetails = Field(
        ..., alias='actionDetails'
    )


class OptimizationRulesAPISwaggerOptimizationRuleFilterV2(BaseModel):
    """
    Filter on optimization rules.
    """

    class Config:
        validate_by_name= True

    rule_category: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='ruleCategory'
    )
    rule_sub_category: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='ruleSubCategory'
    )
    rule_name: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='ruleName'
    )
    optimization_rule_id: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='optimizationRuleId'
    )


class OptimizationRulesAPISwaggerRangeTypeRuleCriteria(BaseModel):
    """
    Represents the range of rule attribute value. NOT SUPPORTED right now
    """

    class Config:
        validate_by_name= True

    min_value: float = Field(..., alias='minValue')
    max_value: float = Field(..., alias='maxValue')


class OptimizationRulesAPISwaggerTargetingType(Enum):
    """
    The type of targets for the rule.
    """

    product = 'PRODUCT'
    keyword = 'KEYWORD'


class OptimizationRulesAPISwaggerDayOfTheWeek(Enum):
    """
    Day of the week.
    """

    monday = 'MONDAY'
    tuesday = 'TUESDAY'
    wednesday = 'WEDNESDAY'
    thursday = 'THURSDAY'
    friday = 'FRIDAY'
    saturday = 'SATURDAY'
    sunday = 'SUNDAY'


class OptimizationRulesAPISwaggerDuration(BaseModel):
    """
    The duration of an optimization rule based on special events (example: Prime Day) or custom date ranges.
    """

    class Config:
        validate_by_name= True

    event_id: str | None = Field(
        None,
        alias='eventId',
        description='Identifier for the event during which the rule is applied.',
    )
    event_name: str | None = Field(
        None,
        alias='eventName',
        description='Name of the event during which the rule is applied.',
    )
    start_time: str = Field(
        ...,
        alias='startTime',
        description='Time of optimization rule creation in ISO 8061.',
    )
    end_time: str | None = Field(
        None,
        alias='endTime',
        description='Time of optimization rule completion in ISO 8061.',
    )


class OptimizationRulesAPISwaggerValueTypeRuleCriteria(BaseModel):
    """
    Represents a criteria by comparing with the rule attribute value.
    """

    class Config:
        validate_by_name= True

    comparison_operator: OptimizationRulesAPISwaggerComparisonOperator = Field(
        ..., alias='comparisonOperator'
    )
    value: float


class TimesOfDayItem(BaseModel):
    """
    List of times of the day.
    """

    class Config:
        validate_by_name= True

    start_time: str = Field(
        ...,
        alias='startTime',
        description='Time of the day in HH:00.',
        regex='^\\d{2}:00$',
    )
    end_time: str = Field(
        ...,
        alias='endTime',
        description='Time of the day in HH:00.',
        regex='^\\d{2}:00$',
    )


class OptimizationRulesAPISwaggerRuleRecurrence(BaseModel):
    """
    The recurrence of the optimization rule application.
    """

    class Config:
        validate_by_name= True

    duration: OptimizationRulesAPISwaggerDuration
    times_of_day: list[TimesOfDayItem] | None = Field(
        None,
        alias='timesOfDay',
        description='List of times of the day.',
        max_items=1,
        min_items=0,
    )
    type: OptimizationRulesAPISwaggerRuleRecurrenceType
    days_of_week: list[OptimizationRulesAPISwaggerDayOfTheWeek] | None = Field(
        None,
        alias='daysOfWeek',
        description='A list of days of the week.',
        max_items=7,
        min_items=0,
    )


class OptimizationRulesAPISwaggerSortableField(Enum):
    """
    Name of the field to sort the response in ascending order.
    """

    name = 'NAME'


class OptimizationRulesAPISwaggerRuleAttributeV2(Enum):
    """
    The attribute of the rule.
    """

    roas = 'ROAS'
    ctr = 'CTR'
    cvr = 'CVR'
    cpc = 'CPC'
    clicks = 'CLICKS'
    orders = 'ORDERS'
    spend = 'SPEND'
    sales = 'SALES'
    impressions = 'IMPRESSIONS'
    acos = 'ACOS'


class OptimizationRulesAPISwaggerRuleCategoryV2(Enum):
    """
    The type of the optimization rule.
    """

    bid = 'BID'
    budget = 'BUDGET'
    targeting = 'TARGETING'


class OptimizationRulesAPISwaggerRuleCriteria(BaseModel):
    class Config:
        validate_by_name= True

    __root__: (
        OptimizationRulesAPISwaggerRangeTypeRuleCriteria
        | OptimizationRulesAPISwaggerValueTypeRuleCriteria
    )


class OptimizationRulesAPISwaggerSingleOptimizationRuleAssociationResponse(BaseModel):
    """
    Response object for operations involving associating a single optimization rule.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful.'
    )
    optimization_rule_id: str | None = Field(
        None, alias='optimizationRuleId', description='The rule identifier.'
    )


class OptimizationRulesAPISwaggerRuleStatus(Enum):
    """
    The status of a rule. Only ENABLED and PAUSED are accepted in requests.
    """

    scheduled = 'SCHEDULED'
    enabled = 'ENABLED'
    paused = 'PAUSED'
    ended = 'ENDED'


class OptimizationRulesAPISwaggerOptimizationRuleFilter(BaseModel):
    """
    Filter on optimization rules.
    """

    class Config:
        validate_by_name= True

    rule_category: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='ruleCategory'
    )
    rule_sub_category: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='ruleSubCategory'
    )
    optimization_rule_id: OptimizationRulesAPISwaggerEntityFieldFilter | None = Field(
        None, alias='optimizationRuleId'
    )


class OptimizationRulesAPISwaggerRuleConditionV2(BaseModel):
    class Config:
        validate_by_name= True

    criteria: OptimizationRulesAPISwaggerRuleCriteria | None = Field(
        None, description='Only Value Type Criteria is supported right now.'
    )
    attribute_name: OptimizationRulesAPISwaggerRuleAttributeV2 | None = Field(
        None, alias='attributeName'
    )


class OptimizationRulesAPISwaggerSearchOptimizationRulesRequestV2(BaseModel):
    """
    Request object for searching or getting optimization rules.
    """

    class Config:
        validate_by_name= True

    max_results: float | None = Field(
        None,
        alias='maxResults',
        description='The maximum number of optimization rules to fetch.',
        ge=1.0,
        le=300.0,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the request. If the field is empty, the first page of results will be returned.',
    )
    optimization_rule_filter: (
        OptimizationRulesAPISwaggerOptimizationRuleFilterV2 | None
    ) = Field(None, alias='optimizationRuleFilter')
    sort_by: list[OptimizationRulesAPISwaggerSortableField] | None = Field(
        None,
        alias='sortBy',
        description='Sort conditions applied to the response.',
        max_items=1,
        min_items=1,
    )
    campaign_filter: OptimizationRulesAPISwaggerCampaignFilter | None = Field(
        None, alias='campaignFilter'
    )


class OptimizationRulesAPISwaggerSearchOptimizationRulesRequest(BaseModel):
    """
    Request object for searching or getting optimization rules.
    """

    class Config:
        validate_by_name= True

    next_token: str | None = Field(None, alias='nextToken')
    optimization_rule_filter: (
        OptimizationRulesAPISwaggerOptimizationRuleFilter | None
    ) = Field(None, alias='optimizationRuleFilter')
    page_size: float | None = Field(None, alias='pageSize')
    campaign_filter: OptimizationRulesAPISwaggerCampaignFilter | None = Field(
        None, alias='campaignFilter'
    )


class OptimizationRulesAPISwaggerRuleTargeting(BaseModel):
    class Config:
        validate_by_name= True

    expression_types: list[OptimizationRulesAPISwaggerExpressionType] = Field(
        ..., alias='expressionTypes', max_items=3, min_items=1
    )
    targeting_type: OptimizationRulesAPISwaggerTargetingType = Field(
        ..., alias='targetingType'
    )
    lookback_days: int = Field(
        ...,
        alias='lookbackDays',
        description='The number of days of data to look back on for the rule.',
        ge=3,
        le=65,
    )


class OptimizationRulesAPISwaggerRuleCondition(BaseModel):
    class Config:
        validate_by_name= True

    criteria: OptimizationRulesAPISwaggerRuleCriteria | None = None
    attribute_name: OptimizationRulesAPISwaggerRuleAttribute | None = Field(
        None, alias='attributeName'
    )


class OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleIdV2(BaseModel):
    class Config:
        validate_by_name= True

    recurrence: OptimizationRulesAPISwaggerRuleRecurrence | None = None
    targeting: list[OptimizationRulesAPISwaggerRuleTargeting] | None = Field(
        None, max_items=1, min_items=1
    )
    rule_category: OptimizationRulesAPISwaggerRuleCategoryV2 = Field(
        ..., alias='ruleCategory'
    )
    rule_sub_category: OptimizationRulesAPISwaggerRuleSubCategoryV2 = Field(
        ..., alias='ruleSubCategory'
    )
    rule_name: str = Field(..., alias='ruleName', description='The rule name.')
    action: OptimizationRulesAPISwaggerRuleAction | None = None
    conditions: list[OptimizationRulesAPISwaggerRuleConditionV2] | None = Field(
        None, max_items=10, min_items=1
    )
    status: OptimizationRulesAPISwaggerRuleStatus


class OptimizationRulesAPISwaggerAssociateOptimizationRulesToCampaignResponse(
    BaseModel
):
    """
    Response object for create campaign to optimization rules association.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    responses: (
        list[OptimizationRulesAPISwaggerSingleOptimizationRuleAssociationResponse]
        | None
    ) = Field(None, max_items=25, min_items=1)


class OptimizationRulesAPISwaggerCreateOptimizationRulesRequestV2(BaseModel):
    """
    Request object for creating one or multiple optimization rules.  Budget rules are not supported for this operation.
    """

    class Config:
        validate_by_name= True

    optimization_rules: list[
        OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleIdV2
    ] = Field(..., alias='optimizationRules', max_items=300, min_items=1)


class OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleId(BaseModel):
    class Config:
        validate_by_name= True

    recurrence: OptimizationRulesAPISwaggerRuleRecurrence
    rule_category: OptimizationRulesAPISwaggerRuleCategory = Field(
        ..., alias='ruleCategory'
    )
    rule_sub_category: OptimizationRulesAPISwaggerRuleSubCategory = Field(
        ..., alias='ruleSubCategory'
    )
    rule_name: str | None = Field(None, alias='ruleName', description='The rule name.')
    action: OptimizationRulesAPISwaggerRuleAction
    conditions: list[OptimizationRulesAPISwaggerRuleCondition] | None = Field(
        None, max_items=1, min_items=0
    )
    status: OptimizationRulesAPISwaggerRuleStatus | None = None


class OptimizationRulesAPISwaggerCreateOptimizationRulesRequest(BaseModel):
    """
    Request object for creating one or multiple optimization rules.
    """

    class Config:
        validate_by_name= True

    optimization_rules: list[
        OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleId
    ] = Field(..., alias='optimizationRules', max_items=1, min_items=1)


class OptimizationRulesAPISwaggerOptimizationRuleV2(
    OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleIdV2
):
    class Config:
        validate_by_name= True

    optimization_rule_id: str | None = Field(
        None, alias='optimizationRuleId', description='The rule identifier.'
    )


class OptimizationRulesAPISwaggerOptimizationRule(
    OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleId
):
    class Config:
        validate_by_name= True

    optimization_rule_id: str | None = Field(
        None, alias='optimizationRuleId', description='The rule identifier.'
    )


class OptimizationRulesAPISwaggerSingleOptimizationRuleResponse(BaseModel):
    """
    Response object for operations involving a single optimization rule.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    optimization_rule: OptimizationRulesAPISwaggerOptimizationRule | None = Field(
        None, alias='optimizationRule'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful.'
    )


class OptimizationRulesAPISwaggerSingleOptimizationRuleResponseV2(BaseModel):
    """
    Response object for operations involving a single optimization rule.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    optimization_rule: OptimizationRulesAPISwaggerOptimizationRuleV2 | None = Field(
        None, alias='optimizationRule'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful.'
    )


class OptimizationRulesAPISwaggerUpdateOptimizationRulesRequestV2(BaseModel):
    """
    Request object for updating one or multiple optimization rules. Budget rules are not supported for this operation.
    """

    class Config:
        validate_by_name= True

    optimization_rules: list[OptimizationRulesAPISwaggerOptimizationRuleV2] = Field(
        ..., alias='optimizationRules', max_items=300, min_items=1
    )


class OptimizationRulesAPISwaggerSearchOptimizationRulesResponse(BaseModel):
    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    next_token: str | None = Field(None, alias='nextToken')
    optimization_rules: list[OptimizationRulesAPISwaggerOptimizationRule] | None = (
        Field(None, alias='optimizationRules', max_items=100, min_items=0)
    )


class OptimizationRulesAPISwaggerSearchOptimizationRulesResponseV2(BaseModel):
    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    next_token: str | None = Field(None, alias='nextToken')
    optimization_rules: list[OptimizationRulesAPISwaggerOptimizationRuleV2] | None = (
        Field(None, alias='optimizationRules', max_items=300, min_items=0)
    )


class OptimizationRulesAPISwaggerUpdateOptimizationRulesRequest(BaseModel):
    """
    Request object for updating one or multiple optimization rules.
    """

    class Config:
        validate_by_name= True

    optimization_rules: list[OptimizationRulesAPISwaggerOptimizationRule] = Field(
        ..., alias='optimizationRules', max_items=25, min_items=1
    )


class OptimizationRulesAPISwaggerOptimizationRulesResponse(BaseModel):
    """
    Response object for CreateOptimizationRules and UpdateOptimizationRules API.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    responses: (
        list[OptimizationRulesAPISwaggerSingleOptimizationRuleResponse] | None
    ) = Field(None, max_items=25, min_items=1)


class OptimizationRulesAPISwaggerOptimizationRulesResponseV2(BaseModel):
    """
    Response object for CreateOptimizationRules and UpdateOptimizationRules API.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    responses: (
        list[OptimizationRulesAPISwaggerSingleOptimizationRuleResponseV2] | None
    ) = Field(None, max_items=300, min_items=1)


class OptimizationRulesAPISwaggerUpdateOptimizationRulesResponseV2(
    OptimizationRulesAPISwaggerOptimizationRulesResponseV2
):
    """
    Response object for UpdateOptimizationRules API.
    """

    class Config:
        validate_by_name= True


class OptimizationRulesAPISwaggerCreateOptimizationRulesResponseV2(
    OptimizationRulesAPISwaggerOptimizationRulesResponseV2
):
    """
    Response object for CreateOptimizationRules API.
    """

    class Config:
        validate_by_name= True

from typing import List
# generated by datamodel-codegen:
#   filename:  budgetrules.json
#   timestamp: 2025-07-23T04:02:52+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class PerformanceMetric(Enum):
    """
    The advertising performance metric.
    """

    acos = 'ACOS'
    ctr = 'CTR'
    cvr = 'CVR'
    roas = 'ROAS'


class State(Enum):
    """
    The budget rule state.
    """

    active = 'ACTIVE'
    paused = 'PAUSED'


class DayOfWeek(Enum):
    """
    The day of the week.
    """

    monday = 'MONDAY'
    tuesday = 'TUESDAY'
    wednesday = 'WEDNESDAY'
    thursday = 'THURSDAY'
    friday = 'FRIDAY'
    saturday = 'SATURDAY'
    sunday = 'SUNDAY'


class BudgetRuleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful'
    )
    rule_id: str | None = Field(
        None, alias='ruleId', description='The rule identifier.'
    )
    associated_campaign_ids: List[str] | None = Field(
        None, alias='associatedCampaignIds'
    )


class CreateAssociatedBudgetRulesRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_rule_ids: List[str] | None = Field(
        None,
        alias='budgetRuleIds',
        description='A list of budget rule identifiers.',
        max_items=25,
    )


class DateRangeTypeRuleDuration(BaseModel):
    """
    Object representing date range type rule duration.
    """

    class Config:
        allow_population_by_field_name = True

    end_date: str | None = Field(
        None,
        alias='endDate',
        description='The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.',
    )
    start_date: str = Field(
        ...,
        alias='startDate',
        description='The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.',
    )


class AssociatedBudgetRuleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful'
    )
    rule_id: str | None = Field(
        None, alias='ruleId', description='The budget rule identifier.'
    )


class DisassociateAssociatedBudgetRuleResponse(BaseModel):
    pass

    class Config:
        allow_population_by_field_name = True


class EventTypeRuleDuration(BaseModel):
    """
    Object representing event type rule duration.
    """

    class Config:
        allow_population_by_field_name = True

    event_id: str = Field(
        ...,
        alias='eventId',
        description='The event identifier. This value is available from the budget rules recommendation API.',
    )
    end_date: str | None = Field(
        None,
        alias='endDate',
        description='The event end date in YYYYMMDD format. Read-only.',
    )
    event_name: str | None = Field(
        None, alias='eventName', description='The event name. Read-only.'
    )
    start_date: str | None = Field(
        None,
        alias='startDate',
        description='The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.',
    )


class AssociatedCampaign(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    rule_status: str = Field(
        ...,
        alias='ruleStatus',
        description='The budget rule evaluation status for this campaign. Read-only.',
    )
    campaign_name: str = Field(
        ..., alias='campaignName', description='The campaign name.'
    )


class TimeOfDay(BaseModel):
    class Config:
        allow_population_by_field_name = True

    start_time: str | None = Field(
        None,
        alias='startTime',
        description="The start time of intra-day budget rule window in the format 'hh:mm:ss' ",
    )
    end_time: str | None = Field(
        None,
        alias='endTime',
        description="The end time of intra-day budget rule window in the format 'hh:mm:ss'. Required to be greater than start-time. ",
    )


class RuleDuration(BaseModel):
    class Config:
        allow_population_by_field_name = True

    event_type_rule_duration: EventTypeRuleDuration | None = Field(
        None, alias='eventTypeRuleDuration'
    )
    date_range_type_rule_duration: DateRangeTypeRuleDuration | None = Field(
        None, alias='dateRangeTypeRuleDuration'
    )


class BudgetChangeType(Enum):
    """
    The value by which to update the budget of the budget rule.
    """

    percent = 'PERCENT'


class RecurrenceType(Enum):
    """
    The frequency of the rule application.
    """

    daily = 'DAILY'


class BudgetIncreaseBy(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: BudgetChangeType
    value: float = Field(..., description='The budget value.')


class SPRuleType(Enum):
    """
    The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
    """

    schedule = 'SCHEDULE'
    performance = 'PERFORMANCE'


class Recurrence(BaseModel):
    class Config:
        allow_population_by_field_name = True

    intra_day_schedule: List[TimeOfDay] | None = Field(
        None,
        alias='intraDaySchedule',
        description='List of objects representing start and end time of desired intra-day budget rule window',
        max_items=1,
    )
    type: RecurrenceType | None = None
    days_of_week: List[DayOfWeek] | None = Field(
        None,
        alias='daysOfWeek',
        description='Object representing days of the week for weekly type rule. It is not required for daily recurrence type',
    )


class ComparisonOperator(Enum):
    """
    The comparison operator.
    """

    greater_than = 'GREATER_THAN'
    less_than = 'LESS_THAN'
    equal_to = 'EQUAL_TO'
    less_than_or_equal_to = 'LESS_THAN_OR_EQUAL_TO'
    greater_than_or_equal_to = 'GREATER_THAN_OR_EQUAL_TO'


class CreateAssociatedBudgetRulesResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    responses: List[AssociatedBudgetRuleResponse] | None = None


class BudgetRuleError(BaseModel):
    """
    The Error Response Object.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class UpdateBudgetRulesResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    responses: List[BudgetRuleResponse] | None = None


class CreateBudgetRulesResponse(UpdateBudgetRulesResponse):
    pass


class SPGetAssociatedCampaignsResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    associated_campaigns: List[AssociatedCampaign] | None = Field(
        None,
        alias='associatedCampaigns',
        description='A list of campaigns that are associated to this budget rule.',
        max_items=30,
        min_items=0,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.',
    )


class PerformanceMeasureCondition(BaseModel):
    class Config:
        allow_population_by_field_name = True

    metric_name: PerformanceMetric = Field(..., alias='metricName')
    comparison_operator: ComparisonOperator = Field(..., alias='comparisonOperator')
    threshold: float = Field(..., description='The performance threshold value.')


class SPBudgetRuleDetails(BaseModel):
    """
    Object representing details of a budget rule for SP campaign
    """

    class Config:
        allow_population_by_field_name = True

    duration: RuleDuration | None = None
    recurrence: Recurrence | None = None
    rule_type: SPRuleType | None = Field(None, alias='ruleType')
    budget_increase_by: BudgetIncreaseBy | None = Field(None, alias='budgetIncreaseBy')
    name: str | None = Field(
        None,
        description='The budget rule name. Required to be unique within a campaign.',
        max_length=355,
    )
    performance_measure_condition: PerformanceMeasureCondition | None = Field(
        None, alias='performanceMeasureCondition'
    )


class CreateSPBudgetRulesRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_rules_details: List[SPBudgetRuleDetails] | None = Field(
        None,
        alias='budgetRulesDetails',
        description='A list of budget rule details.',
        max_items=25,
    )


class SPBudgetRule(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rule_state: State | None = Field(None, alias='ruleState')
    last_updated_date: float | None = Field(
        None,
        alias='lastUpdatedDate',
        description='Epoch time of budget rule update. Read-only.',
    )
    created_date: float | None = Field(
        None,
        alias='createdDate',
        description='Epoch time of budget rule creation. Read-only.',
    )
    rule_details: SPBudgetRuleDetails | None = Field(None, alias='ruleDetails')
    rule_id: str = Field(..., alias='ruleId', description='The budget rule identifier.')
    rule_status: str | None = Field(
        None, alias='ruleStatus', description='The budget rule status. Read-only.'
    )


class SPCampaignBudgetRule(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rule_state: State | None = Field(None, alias='ruleState')
    last_updated_date: float | None = Field(
        None,
        alias='lastUpdatedDate',
        description='Epoch time of budget rule update. Read-only.',
    )
    created_date: float | None = Field(
        None,
        alias='createdDate',
        description='Epoch time of budget rule creation. Read-only.',
    )
    rule_details: SPBudgetRuleDetails | None = Field(None, alias='ruleDetails')
    rule_id: str = Field(..., alias='ruleId', description='The budget rule identifier.')
    rule_status: str | None = Field(
        None,
        alias='ruleStatus',
        description='The budget rule evaluation status. Read-only.',
    )


class GetSPBudgetRuleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_rule: SPBudgetRule | None = Field(None, alias='budgetRule')


class SPListAssociatedBudgetRulesResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    associated_rules: List[SPCampaignBudgetRule] | None = Field(
        None, alias='associatedRules', description='A list of associated budget rules.'
    )


class GetSPBudgetRulesForAdvertiserResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_rules_for_advertiser_response: List[SPBudgetRule] | None = Field(
        None,
        alias='budgetRulesForAdvertiserResponse',
        description='A list of rules created by the advertiser.',
        max_items=30,
        min_items=0,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.',
    )


class UpdateSPBudgetRulesRequest(BaseModel):
    """
    Request object for updating budget rule for SP campaign
    """

    class Config:
        allow_population_by_field_name = True

    budget_rules_details: List[SPBudgetRule] | None = Field(
        None,
        alias='budgetRulesDetails',
        description='A list of budget rule details.',
        max_items=25,
    )

# generated by datamodel-codegen:
#   filename:  product_ads.json
#   timestamp: 2025-07-23T04:03:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum

from pydantic import BaseModel, Field
from pydantic.json_schema import SkipJsonSchema


class SponsoredProductsOtherErrorReason(Enum):
    other_error = 'OTHER_ERROR'


class SponsoredProductsGlobalStoreSetting(BaseModel):
    class Config:
        allow_population_by_field_name = True

    catalog_source_country_code: str | None = Field(
        None,
        alias='catalogSourceCountryCode',
        description='Country code of source marketplace where seller has listed the product. Possible source country codes include US, UK, DE, JP, and AE.',
        max_length=2,
        min_length=2,
    )


class SponsoredProductsAdServingStatusReason(Enum):
    ad_group_status_enabled_detail = 'AD_GROUP_STATUS_ENABLED_DETAIL'
    ad_group_paused_detail = 'AD_GROUP_PAUSED_DETAIL'
    ad_group_archived_detail = 'AD_GROUP_ARCHIVED_DETAIL'
    ad_group_incomplete_detail = 'AD_GROUP_INCOMPLETE_DETAIL'
    ad_group_policing_pending_review_detail = 'AD_GROUP_POLICING_PENDING_REVIEW_DETAIL'
    ad_group_policing_creative_rejected_detail = (
        'AD_GROUP_POLICING_CREATIVE_REJECTED_DETAIL'
    )
    ad_group_low_bid_detail = 'AD_GROUP_LOW_BID_DETAIL'
    campaign_status_enabled_detail = 'CAMPAIGN_STATUS_ENABLED_DETAIL'
    campaign_paused_detail = 'CAMPAIGN_PAUSED_DETAIL'
    campaign_archived_detail = 'CAMPAIGN_ARCHIVED_DETAIL'
    pending_review_detail = 'PENDING_REVIEW_DETAIL'
    rejected_detail = 'REJECTED_DETAIL'
    pending_start_date_detail = 'PENDING_START_DATE_DETAIL'
    ended_detail = 'ENDED_DETAIL'
    campaign_out_of_budget_detail = 'CAMPAIGN_OUT_OF_BUDGET_DETAIL'
    campaign_incomplete_detail = 'CAMPAIGN_INCOMPLETE_DETAIL'
    portfolio_status_enabled_detail = 'PORTFOLIO_STATUS_ENABLED_DETAIL'
    portfolio_paused_detail = 'PORTFOLIO_PAUSED_DETAIL'
    portfolio_archived_detail = 'PORTFOLIO_ARCHIVED_DETAIL'
    portfolio_out_of_budget_detail = 'PORTFOLIO_OUT_OF_BUDGET_DETAIL'
    portfolio_pending_start_date_detail = 'PORTFOLIO_PENDING_START_DATE_DETAIL'
    portfolio_ended_detail = 'PORTFOLIO_ENDED_DETAIL'
    advertiser_policing_suspended_detail = 'ADVERTISER_POLICING_SUSPENDED_DETAIL'
    advertiser_policing_pending_review_detail = (
        'ADVERTISER_POLICING_PENDING_REVIEW_DETAIL'
    )
    advertiser_archived_detail = 'ADVERTISER_ARCHIVED_DETAIL'
    advertiser_paused_detail = 'ADVERTISER_PAUSED_DETAIL'
    advertiser_out_of_budget_detail = 'ADVERTISER_OUT_OF_BUDGET_DETAIL'
    advertiser_payment_failure_detail = 'ADVERTISER_PAYMENT_FAILURE_DETAIL'
    ad_status_live_detail = 'AD_STATUS_LIVE_DETAIL'
    ad_policing_pending_review = 'AD_POLICING_PENDING_REVIEW'
    ad_policing_suspended_detail = 'AD_POLICING_SUSPENDED_DETAIL'
    ad_paused_detail = 'AD_PAUSED_DETAIL'
    ad_archived_detail = 'AD_ARCHIVED_DETAIL'
    missing_image_detail = 'MISSING_IMAGE_DETAIL'
    moderation_adult_product_pv_detail = 'MODERATION_ADULT_PRODUCT_PV_DETAIL'
    moderation_adult_novelty_pv_detail = 'MODERATION_ADULT_NOVELTY_PV_DETAIL'
    moderation_adult_softlines_pv_detail = 'MODERATION_ADULT_SOFTLINES_PV_DETAIL'
    moderation_content_nudity_pv_detail = 'MODERATION_CONTENT_NUDITY_PV_DETAIL'
    moderation_content_provocative_pv_detail = (
        'MODERATION_CONTENT_PROVOCATIVE_PV_DETAIL'
    )
    moderation_claim_weightloss_pv_detail = 'MODERATION_CLAIM_WEIGHTLOSS_PV_DETAIL'
    moderation_error_404_pv_detail = 'MODERATION_ERROR_404_PV_DETAIL'
    moderation_graphical_sexual_images_pv_detail = (
        'MODERATION_GRAPHICAL_SEXUAL_IMAGES_PV_DETAIL'
    )
    moderation_language_offensive_pv_detail = 'MODERATION_LANGUAGE_OFFENSIVE_PV_DETAIL'
    moderation_hfss_product_pv_detail = 'MODERATION_HFSS_PRODUCT_PV_DETAIL'
    moderation_content_smoking_pv_detail = 'MODERATION_CONTENT_SMOKING_PV_DETAIL'
    moderation_smoking_related_pv_detail = 'MODERATION_SMOKING_RELATED_PV_DETAIL'
    moderation_not_compliant_to_ad_policy_pv_detail = (
        'MODERATION_NOT_COMPLIANT_TO_AD_POLICY_PV_DETAIL'
    )
    moderation_critical_events_pv_detail = 'MODERATION_CRITICAL_EVENTS_PV_DETAIL'
    account_out_of_budget_detail = 'ACCOUNT_OUT_OF_BUDGET_DETAIL'
    advertiser_account_out_of_budget_detail = 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET_DETAIL'
    advertiser_exceed_spends_limit_detail = 'ADVERTISER_EXCEED_SPENDS_LIMIT_DETAIL'
    advertiser_status_enabled_detail = 'ADVERTISER_STATUS_ENABLED_DETAIL'
    ad_creation_offline_failed = 'AD_CREATION_OFFLINE_FAILED'
    ad_creation_offline_in_progress = 'AD_CREATION_OFFLINE_IN_PROGRESS'
    ad_creation_offline_pending = 'AD_CREATION_OFFLINE_PENDING'
    campaign_ads_not_delivering_detail = 'CAMPAIGN_ADS_NOT_DELIVERING_DETAIL'
    landing_page_not_available_detail = 'LANDING_PAGE_NOT_AVAILABLE_DETAIL'
    missing_decoration_detail = 'MISSING_DECORATION_DETAIL'
    not_buyable_detail = 'NOT_BUYABLE_DETAIL'
    not_in_buybox_detail = 'NOT_IN_BUYBOX_DETAIL'
    out_of_stock_detail = 'OUT_OF_STOCK_DETAIL'
    security_scan_pending_review = 'SECURITY_SCAN_PENDING_REVIEW'
    security_scan_rejected = 'SECURITY_SCAN_REJECTED'
    status_unavailable = 'STATUS_UNAVAILABLE'
    targeting_clause_archived_detail = 'TARGETING_CLAUSE_ARCHIVED_DETAIL'
    targeting_clause_blocked_detail = 'TARGETING_CLAUSE_BLOCKED_DETAIL'
    targeting_clause_paused_detail = 'TARGETING_CLAUSE_PAUSED_DETAIL'
    targeting_clause_policing_suspended_detail = (
        'TARGETING_CLAUSE_POLICING_SUSPENDED_DETAIL'
    )
    targeting_clause_status_live_detail = 'TARGETING_CLAUSE_STATUS_LIVE_DETAIL'
    adult_product = 'ADULT_PRODUCT'
    asin_quarantined = 'ASIN_QUARANTINED'
    brand_removed = 'BRAND_REMOVED'
    cba_not_supported = 'CBA_NOT_SUPPORTED'
    closed_gl = 'CLOSED_GL'
    cp_ineligible = 'CP_INELIGIBLE'
    cp_ineligible_asin = 'CP_INELIGIBLE_ASIN'
    cp_ineligible_unknown = 'CP_INELIGIBLE_UNKNOWN'
    cp_ineligible_vendor = 'CP_INELIGIBLE_VENDOR'
    eligible_detail = 'ELIGIBLE_DETAIL'
    ineligible_condition = 'INELIGIBLE_CONDITION'
    inventory_incomplete = 'INVENTORY_INCOMPLETE'
    item_missing = 'ITEM_MISSING'
    landing_page_ineligible = 'LANDING_PAGE_INELIGIBLE'
    no_inventory_detail = 'NO_INVENTORY_DETAIL'
    no_purchasable_offer_detail = 'NO_PURCHASABLE_OFFER_DETAIL'
    offer_missing_detail = 'OFFER_MISSING_DETAIL'
    pir_rule_excluded = 'PIR_RULE_EXCLUDED'
    restricted_gl = 'RESTRICTED_GL'
    sku_defective = 'SKU_DEFECTIVE'
    variation_parent = 'VARIATION_PARENT'
    ad_policing_pending_review_detail = 'AD_POLICING_PENDING_REVIEW_DETAIL'
    other = 'OTHER'


class SponsoredProductsMarketplace(Enum):
    us = 'US'
    ca = 'CA'
    mx = 'MX'
    br = 'BR'
    uk = 'UK'
    de = 'DE'
    fr = 'FR'
    es = 'ES'
    it = 'IT'
    in_ = 'IN'
    ae = 'AE'
    sa = 'SA'
    nl = 'NL'
    pl = 'PL'
    se = 'SE'
    tr = 'TR'
    eg = 'EG'
    jp = 'JP'
    au = 'AU'
    sg = 'SG'


class SponsoredProductsAdEligibilityErrorReason(Enum):
    ad_ineligible = 'AD_INELIGIBLE'


class SponsoredProductsProductIdentifierErrorReason(Enum):
    invalid_sku = 'INVALID_SKU'
    invalid_asin = 'INVALID_ASIN'


class SponsoredProductsErrorCause(BaseModel):
    """
    Structure describing error cause - location in the payload and data causing error
    """

    class Config:
        allow_population_by_field_name = True

    location: str = Field(
        ...,
        description='Error location, JSON Path expression specifying element of API payload causing error',
    )
    trigger: str | None = Field(None, description='optional value causing error')


class SponsoredProductsQuotaErrorReason(Enum):
    quota_exceeded = 'QUOTA_EXCEEDED'
    non_archived_quota_exceeded = 'NON_ARCHIVED_QUOTA_EXCEEDED'


class SponsoredProductsReducedObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: list[str] = Field(..., max_length=100, min_length=0)


class SponsoredProductsAccessDeniedErrorCode(Enum):
    access_denied = 'ACCESS_DENIED'


class SponsoredProductsObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: list[str] = Field(..., max_length=1000, min_length=0)


class SponsoredProductsCreateOrUpdateEntityState(Enum):
    """
    Entity state for create or update operation
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'


class SponsoredProductsInternalErrorErrorCode(Enum):
    internal_error = 'INTERNAL_ERROR'


class SponsoredProductsQuotaScope(Enum):
    account = 'ACCOUNT'
    parent_entity = 'PARENT_ENTITY'


class SponsoredProductsThrottledErrorCode(Enum):
    throttled = 'THROTTLED'


class SponsoredProductsInvalidArgumentErrorCode(Enum):
    invalid_argument = 'INVALID_ARGUMENT'


class SponsoredProductsUnauthorizedErrorCode(Enum):
    unauthorized = 'UNAUTHORIZED'


class SponsoredProductsAccessDeniedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsAccessDeniedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateProductAd(BaseModel):
    class Config:
        allow_population_by_field_name = True

    global_store_setting: SponsoredProductsGlobalStoreSetting | None = Field(
        None, alias='globalStoreSetting'
    )
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    custom_text: str | SkipJsonSchema[None] = Field(
        default=None,
        alias='customText',
        description='The custom text to use for creating a custom text ad for the associated ASIN. Defined only for KDP Authors and Book Vendors in US marketplace.',
        max_length=150, min_length=50,
        pattern='^[^a-z<>^][^<>^]+$',
    )
    asin: str | None = Field(
        None,
        description='The ASIN associated with the product. Defined for vendors only.',
    )
    state: SponsoredProductsCreateOrUpdateEntityState
    sku: str | None = Field(
        None,
        description='The SKU associated with the product. Defined for seller accounts only.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )


class SponsoredProductsInvalidInputErrorReason(Enum):
    invalid_token = 'INVALID_TOKEN'


class SponsoredProductsOtherError(BaseModel):
    """
    Errors not related to any of the other error types
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsOtherErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsValueLimitErrorReason(Enum):
    too_low = 'TOO_LOW'
    too_high = 'TOO_HIGH'
    invalid_enum_value = 'INVALID_ENUM_VALUE'
    not_in_list = 'NOT_IN_LIST'


class SponsoredProductsAdServingStatus(Enum):
    ad_group_status_enabled = 'AD_GROUP_STATUS_ENABLED'
    ad_group_paused = 'AD_GROUP_PAUSED'
    ad_group_archived = 'AD_GROUP_ARCHIVED'
    ad_group_incomplete = 'AD_GROUP_INCOMPLETE'
    ad_group_policing_pending_review = 'AD_GROUP_POLICING_PENDING_REVIEW'
    ad_group_policing_creative_rejected = 'AD_GROUP_POLICING_CREATIVE_REJECTED'
    ad_group_low_bid = 'AD_GROUP_LOW_BID'
    campaign_status_enabled = 'CAMPAIGN_STATUS_ENABLED'
    campaign_paused = 'CAMPAIGN_PAUSED'
    campaign_archived = 'CAMPAIGN_ARCHIVED'
    pending_review = 'PENDING_REVIEW'
    rejected = 'REJECTED'
    pending_start_date = 'PENDING_START_DATE'
    ended = 'ENDED'
    campaign_out_of_budget = 'CAMPAIGN_OUT_OF_BUDGET'
    campaign_incomplete = 'CAMPAIGN_INCOMPLETE'
    portfolio_status_enabled = 'PORTFOLIO_STATUS_ENABLED'
    portfolio_paused = 'PORTFOLIO_PAUSED'
    portfolio_archived = 'PORTFOLIO_ARCHIVED'
    portfolio_out_of_budget = 'PORTFOLIO_OUT_OF_BUDGET'
    portfolio_pending_start_date = 'PORTFOLIO_PENDING_START_DATE'
    portfolio_ended = 'PORTFOLIO_ENDED'
    advertiser_policing_suspended = 'ADVERTISER_POLICING_SUSPENDED'
    advertiser_policing_pending_review = 'ADVERTISER_POLICING_PENDING_REVIEW'
    advertiser_archived = 'ADVERTISER_ARCHIVED'
    advertiser_paused = 'ADVERTISER_PAUSED'
    advertiser_out_of_budget = 'ADVERTISER_OUT_OF_BUDGET'
    advertiser_payment_failure = 'ADVERTISER_PAYMENT_FAILURE'
    ad_status_live = 'AD_STATUS_LIVE'
    ad_policing_pending_review = 'AD_POLICING_PENDING_REVIEW'
    ad_policing_suspended = 'AD_POLICING_SUSPENDED'
    ad_paused = 'AD_PAUSED'
    ad_archived = 'AD_ARCHIVED'
    account_out_of_budget = 'ACCOUNT_OUT_OF_BUDGET'
    advertiser_account_out_of_budget = 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET'
    advertiser_exceed_spends_limit = 'ADVERTISER_EXCEED_SPENDS_LIMIT'
    advertiser_status_enabled = 'ADVERTISER_STATUS_ENABLED'
    ad_creation_offline_failed = 'AD_CREATION_OFFLINE_FAILED'
    ad_creation_offline_in_progress = 'AD_CREATION_OFFLINE_IN_PROGRESS'
    ad_creation_offline_pending = 'AD_CREATION_OFFLINE_PENDING'
    campaign_ads_not_delivering = 'CAMPAIGN_ADS_NOT_DELIVERING'
    landing_page_not_available = 'LANDING_PAGE_NOT_AVAILABLE'
    missing_decoration = 'MISSING_DECORATION'
    missing_image = 'MISSING_IMAGE'
    not_buyable = 'NOT_BUYABLE'
    not_in_buybox = 'NOT_IN_BUYBOX'
    out_of_stock = 'OUT_OF_STOCK'
    security_scan_pending_review = 'SECURITY_SCAN_PENDING_REVIEW'
    security_scan_rejected = 'SECURITY_SCAN_REJECTED'
    status_unavailable = 'STATUS_UNAVAILABLE'
    targeting_clause_archived = 'TARGETING_CLAUSE_ARCHIVED'
    targeting_clause_blocked = 'TARGETING_CLAUSE_BLOCKED'
    targeting_clause_paused = 'TARGETING_CLAUSE_PAUSED'
    targeting_clause_policing_suspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED'
    targeting_clause_status_live = 'TARGETING_CLAUSE_STATUS_LIVE'
    eligible = 'ELIGIBLE'
    ineligible = 'INELIGIBLE'
    no_inventory = 'NO_INVENTORY'
    no_purchasable_offer = 'NO_PURCHASABLE_OFFER'
    pir_rule_excluded = 'PIR_RULE_EXCLUDED'
    campaign_pending_start_date = 'CAMPAIGN_PENDING_START_DATE'
    campaign_ended = 'CAMPAIGN_ENDED'
    ad_missing_image = 'AD_MISSING_IMAGE'
    ad_missing_decoration = 'AD_MISSING_DECORATION'
    ad_not_buyable = 'AD_NOT_BUYABLE'
    ad_not_in_buybox = 'AD_NOT_IN_BUYBOX'
    ad_out_of_stock = 'AD_OUT_OF_STOCK'
    ad_landing_page_not_available = 'AD_LANDING_PAGE_NOT_AVAILABLE'
    ad_no_purchasable_offer = 'AD_NO_PURCHASABLE_OFFER'
    ad_ineligible = 'AD_INELIGIBLE'
    ad_eligible = 'AD_ELIGIBLE'
    ad_creation_failed = 'AD_CREATION_FAILED'
    other = 'OTHER'


class SponsoredProductsEntityNotFoundErrorReason(Enum):
    entity_not_found = 'ENTITY_NOT_FOUND'


class SponsoredProductsMissingValueErrorReason(Enum):
    missing_value = 'MISSING_VALUE'


class SponsoredProductsUpdateProductAd(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_id: str = Field(..., alias='adId', description='The product ad identifier.')
    state: SponsoredProductsCreateOrUpdateEntityState | None = None


class SponsoredProductsAsinOwnershipErrorReason(Enum):
    asin_not_owned_by_author = 'ASIN_NOT_OWNED_BY_AUTHOR'


class SponsoredProductsBillingErrorReason(Enum):
    advertiser_suspended = 'ADVERTISER_SUSPENDED'
    billing_account_not_found = 'BILLING_ACCOUNT_NOT_FOUND'
    payment_profile_not_found = 'PAYMENT_PROFILE_NOT_FOUND'
    expired_payment_method = 'EXPIRED_PAYMENT_METHOD'
    vetting_failure = 'VETTING_FAILURE'
    advertiser_billing_setup_incomplete = 'ADVERTISER_BILLING_SETUP_INCOMPLETE'


class SponsoredProductsInternalServerExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInternalErrorErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnsupportedOperationErrorReason(Enum):
    unsupported_operation = 'UNSUPPORTED_OPERATION'


class SponsoredProductsEntityState(Enum):
    """
    The current resource state.
    | State | Description |
    | --- | --- |
    | `ENABLED` | Enabled State |
    | `PAUSED` | Paused State |
    | `PROPOSED` | Proposed State (Upcoming Feature) |
    | `ARCHIVED` | ARCHIVED State |
    | `ENABLING` | State for Draft Entity Only |
    | `USER_DELETED` | State for Draft Entity Only |
    | `OTHER` | Read Only |
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'
    archived = 'ARCHIVED'
    enabling = 'ENABLING'
    user_deleted = 'USER_DELETED'
    other = 'OTHER'


class SponsoredProductsUnsupportedMediaTypeErrorCode(Enum):
    unsupported_media_type = 'UNSUPPORTED_MEDIA_TYPE'


class SponsoredProductsEntityStateErrorReason(Enum):
    invalid_target_state = 'INVALID_TARGET_STATE'
    parent_entity_forbids_creation = 'PARENT_ENTITY_FORBIDS_CREATION'
    marketplace_state_cannot_be_archived = 'MARKETPLACE_STATE_CANNOT_BE_ARCHIVED'
    auto_targeting_clause_cannot_be_archived_manually = (
        'AUTO_TARGETING_CLAUSE_CANNOT_BE_ARCHIVED_MANUALLY'
    )
    archived_entity_cannot_be_modified = 'ARCHIVED_ENTITY_CANNOT_BE_MODIFIED'
    invalid_state_transition = 'INVALID_STATE_TRANSITION'
    parent_archived_forbids_updates = 'PARENT_ARCHIVED_FORBIDS_UPDATES'
    parent_status_forbids_updates_and_creates = (
        'PARENT_STATUS_FORBIDS_UPDATES_AND_CREATES'
    )


class SponsoredProductsEntityType(Enum):
    campaign = 'CAMPAIGN'
    ad_group = 'AD_GROUP'
    keyword = 'KEYWORD'
    product_ad = 'PRODUCT_AD'
    campaign_negative_keyword = 'CAMPAIGN_NEGATIVE_KEYWORD'
    negative_keyword = 'NEGATIVE_KEYWORD'
    targeting_clause = 'TARGETING_CLAUSE'
    negative_targeting_clause = 'NEGATIVE_TARGETING_CLAUSE'
    campaign_negative_targeting_clause = 'CAMPAIGN_NEGATIVE_TARGETING_CLAUSE'


class SponsoredProductsParentEntityErrorReason(Enum):
    parent_entity_does_not_target_these_marketplaces = (
        'PARENT_ENTITY_DOES_NOT_TARGET_THESE_MARKETPLACES'
    )
    parent_entity_archived = 'PARENT_ENTITY_ARCHIVED'
    parent_entity_not_found = 'PARENT_ENTITY_NOT_FOUND'


class SponsoredProductsAdServingStatusDetail(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: SponsoredProductsAdServingStatusReason | None = None
    help_url: str | None = Field(
        None,
        alias='helpUrl',
        description='A URL with additional information about the status identifier.',
    )
    message: str | None = Field(
        None,
        description='A human-readable description of the status identifier specified in the name field.',
    )


class SponsoredProductsUnsupportedOperationError(BaseModel):
    """
    Errors being used to represent an unsupported operation
    e.g. Seller are not supported to create custom text product ads.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsUnsupportedOperationErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsMissingValueError(BaseModel):
    """
    Error describing missing values in API payloads
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMissingValueErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsMalformedValueErrorReason(Enum):
    forbidden_chars = 'FORBIDDEN_CHARS'
    pattern_not_matched = 'PATTERN_NOT_MATCHED'
    too_long = 'TOO_LONG'
    too_short = 'TOO_SHORT'
    leading_or_trailing_whitespace = 'LEADING_OR_TRAILING_WHITESPACE'
    blank = 'BLANK'


class SponsoredProductsDuplicateValueErrorReason(Enum):
    duplicate_value = 'DUPLICATE_VALUE'
    name_not_unique = 'NAME_NOT_UNIQUE'
    marketplace_attributes_repeated = 'MARKETPLACE_ATTRIBUTES_REPEATED'


class SponsoredProductsAdEligibilityError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsAdEligibilityErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsProductIdentifierError(BaseModel):
    """
    Errors related to product identifiers
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsProductIdentifierErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsDeleteSponsoredProductsProductAdsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_id_filter: SponsoredProductsObjectIdFilter = Field(..., alias='adIdFilter')


class SponsoredProductsParentEntityError(BaseModel):
    """
    Errors related to parent entity
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsParentEntityErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsAsinOwnershipError(BaseModel):
    """
    Errors related to author asin ownership
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsAsinOwnershipErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnauthorizedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnauthorizedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsProductAdExtendedData(BaseModel):
    class Config:
        allow_population_by_field_name = True

    last_update_date_time: datetime | None = Field(
        None, alias='lastUpdateDateTime', description='Last updated date in ISO 8601.'
    )
    serving_status: SponsoredProductsAdServingStatus | None = Field(
        None, alias='servingStatus'
    )
    serving_status_details: list[SponsoredProductsAdServingStatusDetail] | None = Field(
        None,
        alias='servingStatusDetails',
        description='The serving status reasons of the Ad',
    )
    creation_date_time: datetime | None = Field(
        None, alias='creationDateTime', description='Creation date in ISO 8601.'
    )


class SponsoredProductsMalformedValueError(BaseModel):
    """
    Errors being used to represent malformed values
    e.g. containing not allowed characters, not following patters etc
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMalformedValueErrorReason
    fragment: str | None = Field(
        None, description='fragment of the value which is wrong'
    )
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsBillingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBillingErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInvalidInputErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityNotFoundError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityNotFoundErrorReason
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | None = None
    entity_id: str = Field(
        ..., alias='entityId', description='The entity id in the request'
    )
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottledError(BaseModel):
    """
    Error that represents failure due to API caller exceeding allowed service limits.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsThrottledErrorCode
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottlingExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsThrottledErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateSponsoredProductsProductAdsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    product_ads: list[SponsoredProductsCreateProductAd] = Field(
        ...,
        alias='productAds',
        description='An array of ads.',
        max_length=1000, min_length=0
    )


class SponsoredProductsUnsupportedMediaTypeExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnsupportedMediaTypeErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityQuotaError(BaseModel):
    """
    Errors related to exceeding quota in campaign management service
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsQuotaErrorReason
    quota_scope: SponsoredProductsQuotaScope | None = Field(None, alias='quotaScope')
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    quota: str | None = Field(None, description='optional current quota')
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsRangeError(BaseModel):
    """
    Errors related to range constraints violations
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsValueLimitErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    allowed: list[str] | None = Field(None, description='allowed values')
    cause: SponsoredProductsErrorCause | None = None
    upper_limit: str | None = Field(
        None, alias='upperLimit', description='optional upper limit'
    )
    lower_limit: str | None = Field(
        None, alias='lowerLimit', description='optional lower limit'
    )
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUpdateSponsoredProductsProductAdsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    product_ads: list[SponsoredProductsUpdateProductAd] = Field(
        ...,
        alias='productAds',
        description='An array of ads with updated values.',
        max_length=1000, min_length=0
    )


class SponsoredProductsEntityStateFilter(BaseModel):
    """
    Filter entities by state. To filter live entities, only 'ENABLED', 'PAUSED' and 'ARCHIVED' can be used
    """

    class Config:
        allow_population_by_field_name = True

    include: list[SponsoredProductsEntityState] = Field(..., max_length=10, min_length=0)


class SponsoredProductsDuplicateValueError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsDuplicateValueErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityStateError(BaseModel):
    """
    entity state update errors
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityStateErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsProductAd(BaseModel):
    class Config:
        allow_population_by_field_name = True

    global_store_setting: SponsoredProductsGlobalStoreSetting | None = Field(
        None, alias='globalStoreSetting'
    )
    ad_id: str = Field(..., alias='adId', description='The product ad identifier.')
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    custom_text: str | None = Field(
        None,
        alias='customText',
        description='The custom text that is associated with this ad. Defined for custom text ads only.',
    )
    asin: str | None = Field(
        None,
        description='The ASIN associated with the product. Defined for vendors only.',
    )
    state: SponsoredProductsEntityState
    sku: str | None = Field(
        None,
        description='The SKU associated with the product. Defined for seller accounts only.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )
    extended_data: SponsoredProductsProductAdExtendedData | None = Field(
        None, alias='extendedData'
    )


class SponsoredProductsInternalServerError(BaseModel):
    """
    Error that represents non-retryable API service error. Sending the same request will result in another error.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInternalErrorErrorCode
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsProductAdAccessErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_not_found_error: SponsoredProductsEntityNotFoundError | None = Field(
        None, alias='entityNotFoundError'
    )
    missing_value_error: SponsoredProductsMissingValueError | None = Field(
        None, alias='missingValueError'
    )
    malformed_value_error: SponsoredProductsMalformedValueError | None = Field(
        None, alias='malformedValueError'
    )
    internal_server_error: SponsoredProductsInternalServerError | None = Field(
        None, alias='internalServerError'
    )
    range_error: SponsoredProductsRangeError | None = Field(None, alias='rangeError')
    other_error: SponsoredProductsOtherError | None = Field(None, alias='otherError')
    invalid_input_error: SponsoredProductsInvalidInputError | None = Field(
        None, alias='invalidInputError'
    )
    throttled_error: SponsoredProductsThrottledError | None = Field(
        None, alias='throttledError'
    )


class SponsoredProductsProductAdSuccessResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_id: str | None = Field(None, alias='adId', description='the ProductAd ID')
    index: int = Field(
        ..., description='The index in the original list from the request.', ge=0
    )
    product_ad: SponsoredProductsProductAd | None = Field(None, alias='productAd')


class SponsoredProductsListSponsoredProductsProductAdsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total_results: int | None = Field(
        None, alias='totalResults', description='The total number of entities'
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )
    product_ads: list[SponsoredProductsProductAd] | None = Field(
        None, alias='productAds', max_length=1000, min_length=0
    )


class SponsoredProductsProductAdAccessError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsProductAdAccessErrorSelector = Field(
        ..., alias='errorValue'
    )


class SponsoredProductsListSponsoredProductsProductAdsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id_filter: SponsoredProductsReducedObjectIdFilter | None = Field(
        None, alias='campaignIdFilter'
    )
    state_filter: SponsoredProductsEntityStateFilter | None = Field(
        None, alias='stateFilter'
    )
    max_results: int | None = Field(
        None,
        alias='maxResults',
        description='Number of records to include in the paginated response. Defaults to max page size for given API',
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )
    ad_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='adIdFilter'
    )
    ad_group_id_filter: SponsoredProductsReducedObjectIdFilter | None = Field(
        None, alias='adGroupIdFilter'
    )
    include_extended_data_fields: bool | None = Field(
        None,
        alias='includeExtendedDataFields',
        description='Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus',
    )


class SponsoredProductsProductAdMutationErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_state_error: SponsoredProductsEntityStateError | None = Field(
        None, alias='entityStateError'
    )
    missing_value_error: SponsoredProductsMissingValueError | None = Field(
        None, alias='missingValueError'
    )
    asin_ownership_error: SponsoredProductsAsinOwnershipError | None = Field(
        None, alias='asinOwnershipError'
    )
    duplicate_value_error: SponsoredProductsDuplicateValueError | None = Field(
        None, alias='duplicateValueError'
    )
    range_error: SponsoredProductsRangeError | None = Field(None, alias='rangeError')
    unsupported_operation_error: SponsoredProductsUnsupportedOperationError | None = (
        Field(None, alias='unsupportedOperationError')
    )
    parent_entity_error: SponsoredProductsParentEntityError | None = Field(
        None, alias='parentEntityError'
    )
    other_error: SponsoredProductsOtherError | None = Field(None, alias='otherError')
    throttled_error: SponsoredProductsThrottledError | None = Field(
        None, alias='throttledError'
    )
    entity_not_found_error: SponsoredProductsEntityNotFoundError | None = Field(
        None, alias='entityNotFoundError'
    )
    malformed_value_error: SponsoredProductsMalformedValueError | None = Field(
        None, alias='malformedValueError'
    )
    product_identifier_error: SponsoredProductsProductIdentifierError | None = Field(
        None, alias='productIdentifierError'
    )
    ad_eligibility_error: SponsoredProductsAdEligibilityError | None = Field(
        None, alias='adEligibilityError'
    )
    billing_error: SponsoredProductsBillingError | None = Field(
        None, alias='billingError'
    )
    entity_quota_error: SponsoredProductsEntityQuotaError | None = Field(
        None, alias='entityQuotaError'
    )
    internal_server_error: SponsoredProductsInternalServerError | None = Field(
        None, alias='internalServerError'
    )


class SponsoredProductsProductAdMutationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsProductAdMutationErrorSelector = Field(
        ..., alias='errorValue'
    )


class SponsoredProductsProductAdAccessExceptionResponseContent(BaseModel):
    """
    Exception resulting in accessing campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: list[SponsoredProductsProductAdAccessError] | None = None


class SponsoredProductsProductAdMutationExceptionResponseContent(BaseModel):
    """
    Exception resulting in mutating campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: list[SponsoredProductsProductAdMutationError] | None = None


class SponsoredProductsProductAdFailureResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    index: int = Field(
        ...,
        description='the index of the product ad in the array from the request body',
        ge=0,
    )
    errors: list[SponsoredProductsProductAdMutationError] | None = Field(
        None, description='A list of validation errors'
    )


class SponsoredProductsBulkProductAdOperationResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    success: list[SponsoredProductsProductAdSuccessResponseItem] | None = Field(
        None, max_length=1000, min_length=0
    )
    error: list[SponsoredProductsProductAdFailureResponseItem] | None = Field(
        None, max_length=1000, min_length=0
    )


class SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    product_ads: SponsoredProductsBulkProductAdOperationResponse = Field(
        ..., alias='productAds'
    )


class SponsoredProductsDeleteSponsoredProductsProductAdsResponseContent(
    SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent
):
    pass


class SponsoredProductsCreateSponsoredProductsProductAdsResponseContent(
    SponsoredProductsUpdateSponsoredProductsProductAdsResponseContent
):
    pass

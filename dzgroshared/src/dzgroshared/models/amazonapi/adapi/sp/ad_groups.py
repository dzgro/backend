# generated by datamodel-codegen:
#   filename:  ad_groups.json
#   timestamp: 2025-07-23T04:04:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, List

from pydantic import BaseModel, Field
from pydantic.json_schema import SkipJsonSchema


class SponsoredProductsOtherErrorReason(Enum):
    other_error = 'OTHER_ERROR'


class SponsoredProductsQueryTermMatchType(Enum):
    """
    Match type for query filters.
    | Value |  Description |
    |-----------|------------|
    | `BROAD_MATCH` | Match if the queried value contains the filter value (substring matching). Note: If queryTermMatchType is set to BROAD_MATCH, only matches for the first query included will be returned. |
    | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |
    """

    broad_match = 'BROAD_MATCH'
    exact_match = 'EXACT_MATCH'


class SponsoredProductsMarketplace(Enum):
    us = 'US'
    ca = 'CA'
    mx = 'MX'
    br = 'BR'
    uk = 'UK'
    de = 'DE'
    fr = 'FR'
    es = 'ES'
    it = 'IT'
    in_ = 'IN'
    ae = 'AE'
    sa = 'SA'
    nl = 'NL'
    pl = 'PL'
    se = 'SE'
    tr = 'TR'
    eg = 'EG'
    jp = 'JP'
    au = 'AU'
    sg = 'SG'


class SponsoredProductsAdGroupServingStatus(Enum):
    ad_group_status_enabled = 'AD_GROUP_STATUS_ENABLED'
    ad_group_paused = 'AD_GROUP_PAUSED'
    ad_group_archived = 'AD_GROUP_ARCHIVED'
    ad_group_incomplete = 'AD_GROUP_INCOMPLETE'
    ad_group_policing_pending_review = 'AD_GROUP_POLICING_PENDING_REVIEW'
    ad_group_policing_creative_rejected = 'AD_GROUP_POLICING_CREATIVE_REJECTED'
    ad_group_low_bid = 'AD_GROUP_LOW_BID'
    campaign_status_enabled = 'CAMPAIGN_STATUS_ENABLED'
    campaign_paused = 'CAMPAIGN_PAUSED'
    campaign_archived = 'CAMPAIGN_ARCHIVED'
    pending_review = 'PENDING_REVIEW'
    rejected = 'REJECTED'
    pending_start_date = 'PENDING_START_DATE'
    ended = 'ENDED'
    campaign_out_of_budget = 'CAMPAIGN_OUT_OF_BUDGET'
    campaign_incomplete = 'CAMPAIGN_INCOMPLETE'
    portfolio_status_enabled = 'PORTFOLIO_STATUS_ENABLED'
    portfolio_paused = 'PORTFOLIO_PAUSED'
    portfolio_archived = 'PORTFOLIO_ARCHIVED'
    portfolio_out_of_budget = 'PORTFOLIO_OUT_OF_BUDGET'
    portfolio_pending_start_date = 'PORTFOLIO_PENDING_START_DATE'
    portfolio_ended = 'PORTFOLIO_ENDED'
    advertiser_policing_suspended = 'ADVERTISER_POLICING_SUSPENDED'
    advertiser_policing_pending_review = 'ADVERTISER_POLICING_PENDING_REVIEW'
    advertiser_archived = 'ADVERTISER_ARCHIVED'
    advertiser_paused = 'ADVERTISER_PAUSED'
    advertiser_out_of_budget = 'ADVERTISER_OUT_OF_BUDGET'
    advertiser_payment_failure = 'ADVERTISER_PAYMENT_FAILURE'
    advertiser_exceed_spends_limit = 'ADVERTISER_EXCEED_SPENDS_LIMIT'
    other = 'OTHER'


class SponsoredProductsErrorCause(BaseModel):
    """
    Structure describing error cause - location in the payload and data causing error
    """

    class Config:
        allow_population_by_field_name = True

    location: str = Field(
        ...,
        description='Error location, JSON Path expression specifying element of API payload causing error',
    )
    trigger: str | SkipJsonSchema[None] = Field(default=None, description='optional value causing error')


class SponsoredProductsQuotaErrorReason(Enum):
    quota_exceeded = 'QUOTA_EXCEEDED'
    non_archived_quota_exceeded = 'NON_ARCHIVED_QUOTA_EXCEEDED'


class SponsoredProductsReducedObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: List[str] = Field(..., max_length=100, min_length=0)



class SponsoredProductsNameFilter(BaseModel):
    """
    Filter entities by name
    """

    class Config:
        allow_population_by_field_name = True

    query_term_match_type: SponsoredProductsQueryTermMatchType | SkipJsonSchema[None] = Field(
        None, alias='queryTermMatchType'
    )
    include: List[str] | SkipJsonSchema[None] = Field(default=None, max_length=100, min_length=0)


class SponsoredProductsBiddingErrorReason(Enum):
    bid_gt_budget = 'BID_GT_BUDGET'
    bid_out_of_market_place_range = 'BID_OUT_OF_MARKET_PLACE_RANGE'
    bid_invalid_placement = 'BID_INVALID_PLACEMENT'
    bid_invalid_shopper_cohort_type = 'BID_INVALID_SHOPPER_COHORT_TYPE'
    bid_shopper_cohorts_more_than_allowed = 'BID_SHOPPER_COHORTS_MORE_THAN_ALLOWED'
    bid_missing_audiences = 'BID_MISSING_AUDIENCES'
    bid_audiences_more_than_allowed = 'BID_AUDIENCES_MORE_THAN_ALLOWED'
    bid_invalid_audience_segment_type = 'BID_INVALID_AUDIENCE_SEGMENT_TYPE'
    bid_invalid_audience_id = 'BID_INVALID_AUDIENCE_ID'


class SponsoredProductsAccessDeniedErrorCode(Enum):
    access_denied = 'ACCESS_DENIED'


class SponsoredProductsObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        allow_population_by_field_name = True

    include: List[str] = Field(..., max_length=1000, min_length=0)


class SponsoredProductsCreateOrUpdateEntityState(Enum):
    """
    Entity state for create or update operation
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'


class SponsoredProductsInternalErrorErrorCode(Enum):
    internal_error = 'INTERNAL_ERROR'


class SponsoredProductsQuotaScope(Enum):
    account = 'ACCOUNT'
    parent_entity = 'PARENT_ENTITY'


class SponsoredProductsThrottledErrorCode(Enum):
    throttled = 'THROTTLED'


class SponsoredProductsAdGroupServingStatusReason(Enum):
    ad_group_status_enabled_detail = 'AD_GROUP_STATUS_ENABLED_DETAIL'
    ad_group_paused_detail = 'AD_GROUP_PAUSED_DETAIL'
    ad_group_archived_detail = 'AD_GROUP_ARCHIVED_DETAIL'
    ad_group_incomplete_detail = 'AD_GROUP_INCOMPLETE_DETAIL'
    ad_group_policing_pending_review_detail = 'AD_GROUP_POLICING_PENDING_REVIEW_DETAIL'
    ad_group_policing_creative_rejected_detail = (
        'AD_GROUP_POLICING_CREATIVE_REJECTED_DETAIL'
    )
    ad_group_low_bid_detail = 'AD_GROUP_LOW_BID_DETAIL'
    campaign_status_enabled_detail = 'CAMPAIGN_STATUS_ENABLED_DETAIL'
    campaign_paused_detail = 'CAMPAIGN_PAUSED_DETAIL'
    campaign_archived_detail = 'CAMPAIGN_ARCHIVED_DETAIL'
    pending_review_detail = 'PENDING_REVIEW_DETAIL'
    rejected_detail = 'REJECTED_DETAIL'
    pending_start_date_detail = 'PENDING_START_DATE_DETAIL'
    ended_detail = 'ENDED_DETAIL'
    campaign_out_of_budget_detail = 'CAMPAIGN_OUT_OF_BUDGET_DETAIL'
    campaign_incomplete_detail = 'CAMPAIGN_INCOMPLETE_DETAIL'
    portfolio_status_enabled_detail = 'PORTFOLIO_STATUS_ENABLED_DETAIL'
    portfolio_paused_detail = 'PORTFOLIO_PAUSED_DETAIL'
    portfolio_archived_detail = 'PORTFOLIO_ARCHIVED_DETAIL'
    portfolio_out_of_budget_detail = 'PORTFOLIO_OUT_OF_BUDGET_DETAIL'
    portfolio_pending_start_date_detail = 'PORTFOLIO_PENDING_START_DATE_DETAIL'
    portfolio_ended_detail = 'PORTFOLIO_ENDED_DETAIL'
    advertiser_policing_suspended_detail = 'ADVERTISER_POLICING_SUSPENDED_DETAIL'
    advertiser_policing_pending_review_detail = (
        'ADVERTISER_POLICING_PENDING_REVIEW_DETAIL'
    )
    advertiser_archived_detail = 'ADVERTISER_ARCHIVED_DETAIL'
    advertiser_paused_detail = 'ADVERTISER_PAUSED_DETAIL'
    advertiser_out_of_budget_detail = 'ADVERTISER_OUT_OF_BUDGET_DETAIL'
    advertiser_payment_failure_detail = 'ADVERTISER_PAYMENT_FAILURE_DETAIL'
    advertiser_exceed_spends_limit_detail = 'ADVERTISER_EXCEED_SPENDS_LIMIT_DETAIL'
    other = 'OTHER'


class SponsoredProductsInvalidArgumentErrorCode(Enum):
    invalid_argument = 'INVALID_ARGUMENT'


class SponsoredProductsUnauthorizedErrorCode(Enum):
    unauthorized = 'UNAUTHORIZED'


class SponsoredProductsAccessDeniedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsAccessDeniedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputErrorReason(Enum):
    invalid_token = 'INVALID_TOKEN'


class SponsoredProductsOtherError(BaseModel):
    """
    Errors not related to any of the other error types
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsOtherErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsValueLimitErrorReason(Enum):
    too_low = 'TOO_LOW'
    too_high = 'TOO_HIGH'
    invalid_enum_value = 'INVALID_ENUM_VALUE'
    not_in_list = 'NOT_IN_LIST'


class SponsoredProductsCreateAdGroup(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ...,
        alias='campaignId',
        description='The identifier of the campaign to which the keyword is associated.',
    )
    name: str = Field(..., description='The name of the ad group.')
    state: SponsoredProductsCreateOrUpdateEntityState
    default_bid: float = Field(
        ...,
        alias='defaultBid',
        description='A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
    )


class SponsoredProductsAdGroupServingStatusDetail(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: SponsoredProductsAdGroupServingStatusReason | SkipJsonSchema[None] = None
    help_url: str | SkipJsonSchema[None] = Field(
        None,
        alias='helpUrl',
        description='A URL with additional information about the status identifier.',
    )
    message: str | SkipJsonSchema[None] = Field(
        None,
        description='A human-readable description of the status identifier specified in the name field.',
    )


class SponsoredProductsEntityNotFoundErrorReason(Enum):
    entity_not_found = 'ENTITY_NOT_FOUND'


class SponsoredProductsCreateSponsoredProductsAdGroupsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_groups: List[SponsoredProductsCreateAdGroup] = Field(
        ...,
        alias='adGroups',
        description='An array of adGroups.',
        max_length=1000,
        min_length=0,
    )


class SponsoredProductsMissingValueErrorReason(Enum):
    missing_value = 'MISSING_VALUE'


class SponsoredProductsBillingErrorReason(Enum):
    advertiser_suspended = 'ADVERTISER_SUSPENDED'
    billing_account_not_found = 'BILLING_ACCOUNT_NOT_FOUND'
    payment_profile_not_found = 'PAYMENT_PROFILE_NOT_FOUND'
    expired_payment_method = 'EXPIRED_PAYMENT_METHOD'
    vetting_failure = 'VETTING_FAILURE'
    advertiser_billing_setup_incomplete = 'ADVERTISER_BILLING_SETUP_INCOMPLETE'


class SponsoredProductsUpdateAdGroup(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | SkipJsonSchema[None] = Field(default=None, description='The name of the ad group.')
    state: SponsoredProductsCreateOrUpdateEntityState | SkipJsonSchema[None] = None
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The identifier of the keyword.'
    )
    default_bid: float | SkipJsonSchema[None] = Field(
        default=None,
        alias='defaultBid',
        description='A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
    )


class SponsoredProductsInternalServerExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInternalErrorErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsTargetingType(Enum):
    auto = 'AUTO'
    manual = 'MANUAL'


class SponsoredProductsEntityState(Enum):
    """
    The current resource state.
    | State | Description |
    | --- | --- |
    | `ENABLED` | Enabled State |
    | `PAUSED` | Paused State |
    | `PROPOSED` | Proposed State (Upcoming Feature) |
    | `ARCHIVED` | ARCHIVED State |
    | `ENABLING` | State for Draft Entity Only |
    | `USER_DELETED` | State for Draft Entity Only |
    | `OTHER` | Read Only |
    """

    enabled = 'ENABLED'
    paused = 'PAUSED'
    proposed = 'PROPOSED'
    archived = 'ARCHIVED'
    enabling = 'ENABLING'
    user_deleted = 'USER_DELETED'
    other = 'OTHER'


class SponsoredProductsUnsupportedMediaTypeErrorCode(Enum):
    unsupported_media_type = 'UNSUPPORTED_MEDIA_TYPE'


class SponsoredProductsEntityStateErrorReason(Enum):
    invalid_target_state = 'INVALID_TARGET_STATE'
    parent_entity_forbids_creation = 'PARENT_ENTITY_FORBIDS_CREATION'
    marketplace_state_cannot_be_archived = 'MARKETPLACE_STATE_CANNOT_BE_ARCHIVED'
    auto_targeting_clause_cannot_be_archived_manually = (
        'AUTO_TARGETING_CLAUSE_CANNOT_BE_ARCHIVED_MANUALLY'
    )
    archived_entity_cannot_be_modified = 'ARCHIVED_ENTITY_CANNOT_BE_MODIFIED'
    invalid_state_transition = 'INVALID_STATE_TRANSITION'
    parent_archived_forbids_updates = 'PARENT_ARCHIVED_FORBIDS_UPDATES'
    parent_status_forbids_updates_and_creates = (
        'PARENT_STATUS_FORBIDS_UPDATES_AND_CREATES'
    )


class SponsoredProductsEntityType(Enum):
    campaign = 'CAMPAIGN'
    ad_group = 'AD_GROUP'
    keyword = 'KEYWORD'
    product_ad = 'PRODUCT_AD'
    campaign_negative_keyword = 'CAMPAIGN_NEGATIVE_KEYWORD'
    negative_keyword = 'NEGATIVE_KEYWORD'
    targeting_clause = 'TARGETING_CLAUSE'
    negative_targeting_clause = 'NEGATIVE_TARGETING_CLAUSE'
    campaign_negative_targeting_clause = 'CAMPAIGN_NEGATIVE_TARGETING_CLAUSE'


class SponsoredProductsParentEntityErrorReason(Enum):
    parent_entity_does_not_target_these_marketplaces = (
        'PARENT_ENTITY_DOES_NOT_TARGET_THESE_MARKETPLACES'
    )
    parent_entity_archived = 'PARENT_ENTITY_ARCHIVED'
    parent_entity_not_found = 'PARENT_ENTITY_NOT_FOUND'


class SponsoredProductsMissingValueError(BaseModel):
    """
    Error describing missing values in API payloads
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMissingValueErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsApplicableMarketplacesErrorReason(Enum):
    applicable_marketplaces_mismatch_error = 'APPLICABLE_MARKETPLACES_MISMATCH_ERROR'


class SponsoredProductsMalformedValueErrorReason(Enum):
    forbidden_chars = 'FORBIDDEN_CHARS'
    pattern_not_matched = 'PATTERN_NOT_MATCHED'
    too_long = 'TOO_LONG'
    too_short = 'TOO_SHORT'
    leading_or_trailing_whitespace = 'LEADING_OR_TRAILING_WHITESPACE'
    blank = 'BLANK'


class SponsoredProductsBiddingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBiddingErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    upper_limit: str | SkipJsonSchema[None] = Field(default=None, alias='upperLimit')
    lower_limit: str | SkipJsonSchema[None] = Field(default=None, alias='lowerLimit')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsDuplicateValueErrorReason(Enum):
    duplicate_value = 'DUPLICATE_VALUE'
    name_not_unique = 'NAME_NOT_UNIQUE'
    marketplace_attributes_repeated = 'MARKETPLACE_ATTRIBUTES_REPEATED'


class SponsoredProductsParentEntityError(BaseModel):
    """
    Errors related to parent entity
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsParentEntityErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnauthorizedExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnauthorizedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsApplicableMarketplacesError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsApplicableMarketplacesErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsMalformedValueError(BaseModel):
    """
    Errors being used to represent malformed values
    e.g. containing not allowed characters, not following patters etc
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsMalformedValueErrorReason
    fragment: str | SkipJsonSchema[None] = Field(
        None, description='fragment of the value which is wrong'
    )
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsDeleteSponsoredProductsAdGroupsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_group_id_filter: SponsoredProductsObjectIdFilter = Field(
        ..., alias='adGroupIdFilter'
    )


class SponsoredProductsBillingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsBillingErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInvalidInputErrorReason
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityNotFoundError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityNotFoundErrorReason
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    entity_id: str = Field(
        ..., alias='entityId', description='The entity id in the request'
    )
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottledError(BaseModel):
    """
    Error that represents failure due to API caller exceeding allowed service limits.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsThrottledErrorCode
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottlingExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsThrottledErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnsupportedMediaTypeExceptionResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsUnsupportedMediaTypeErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityQuotaError(BaseModel):
    """
    Errors related to exceeding quota in campaign management service
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsQuotaErrorReason
    quota_scope: SponsoredProductsQuotaScope | SkipJsonSchema[None] = Field(default=None, alias='quotaScope')
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    quota: str | SkipJsonSchema[None] = Field(default=None, description='optional current quota')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsRangeError(BaseModel):
    """
    Errors related to range constraints violations
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsValueLimitErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    allowed: List[str] | SkipJsonSchema[None] = Field(default=None, description='allowed values')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    upper_limit: str | SkipJsonSchema[None] = Field(
        None, alias='upperLimit', description='optional upper limit'
    )
    lower_limit: str | SkipJsonSchema[None] = Field(
        None, alias='lowerLimit', description='optional lower limit'
    )
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsAdGroupExtendedData(BaseModel):
    class Config:
        allow_population_by_field_name = True

    last_update_date_time: datetime | SkipJsonSchema[None] = Field(
        None, alias='lastUpdateDateTime', description='Last updated date in ISO 8601.'
    )
    serving_status: SponsoredProductsAdGroupServingStatus | SkipJsonSchema[None] = Field(
        None, alias='servingStatus'
    )
    serving_status_details: List[SponsoredProductsAdGroupServingStatusDetail] | SkipJsonSchema[None] = (
        Field(
            None,
            alias='servingStatusDetails',
            description='The serving status reasons of the AdGroup',
        )
    )
    creation_date_time: datetime | SkipJsonSchema[None] = Field(
        None, alias='creationDateTime', description='Creation date in ISO 8601.'
    )


class SponsoredProductsUpdateSponsoredProductsAdGroupsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_groups: List[SponsoredProductsUpdateAdGroup] = Field(
        ...,
        alias='adGroups',
        description='An array of adGroups with updated values.',
        max_length=1000,
        min_length=0,
    )


class SponsoredProductsEntityStateFilter(BaseModel):
    """
    Filter entities by state. To filter live entities, only 'ENABLED', 'PAUSED' and 'ARCHIVED' can be used
    """

    class Config:
        allow_population_by_field_name = True

    include: List[SponsoredProductsEntityState] = Field(..., max_length=10, min_length=0)


class SponsoredProductsDuplicateValueError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsDuplicateValueErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityStateError(BaseModel):
    """
    entity state update errors
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsEntityStateErrorReason
    marketplace: SponsoredProductsMarketplace | SkipJsonSchema[None] = None
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInternalServerError(BaseModel):
    """
    Error that represents non-retryable API service error. Sending the same request will result in another error.
    """

    class Config:
        allow_population_by_field_name = True

    reason: SponsoredProductsInternalErrorErrorCode
    cause: SponsoredProductsErrorCause | SkipJsonSchema[None] = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsListSponsoredProductsAdGroupsRequestContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id_filter: SponsoredProductsReducedObjectIdFilter | SkipJsonSchema[None] = Field(
        default=None, alias='campaignIdFilter'
    )
    state_filter: SponsoredProductsEntityStateFilter | SkipJsonSchema[None] = Field(
        default=None, alias='stateFilter'
    )
    max_results: int | SkipJsonSchema[None] = Field(
        default=None,
        alias='maxResults',
        description='Number of records to include in the paginated response. Defaults to max page size for given API',
    )
    next_token: str | SkipJsonSchema[None] = Field(
        default=None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )
    ad_group_id_filter: SponsoredProductsObjectIdFilter | SkipJsonSchema[None] = Field(
        default=None, alias='adGroupIdFilter'
    )
    include_extended_data_fields: bool | SkipJsonSchema[None] = Field(
        default=None,
        alias='includeExtendedDataFields',
        description='Whether to get entity with extended data fields such as creationDate, lastUpdateDate, servingStatus',
    )
    name_filter: SponsoredProductsNameFilter | SkipJsonSchema[None] = Field(default=None, alias='nameFilter')
    campaign_targeting_type_filter: SponsoredProductsTargetingType | SkipJsonSchema[None] = Field(
        default=None, alias='campaignTargetingTypeFilter'
    )


class SponsoredProductsAdGroup(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ...,
        alias='campaignId',
        description='The identifier of the campaign to which the keyword is associated.',
    )
    name: str = Field(..., description='The name of the ad group.')
    state: SponsoredProductsEntityState
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The identifier of the keyword.'
    )
    default_bid: float = Field(
        ...,
        alias='defaultBid',
        description='A bid value for use when no bid is specified for keywords in the ad group. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
    )
    extended_data: SponsoredProductsAdGroupExtendedData | SkipJsonSchema[None] = Field(
        None, alias='extendedData'
    )


class SponsoredProductsAdGroupMutationErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_state_error: SponsoredProductsEntityStateError | SkipJsonSchema[None] = Field(
        None, alias='entityStateError'
    )
    missing_value_error: SponsoredProductsMissingValueError | SkipJsonSchema[None] = Field(
        None, alias='missingValueError'
    )
    bidding_error: SponsoredProductsBiddingError | SkipJsonSchema[None] = Field(
        None, alias='biddingError'
    )
    duplicate_value_error: SponsoredProductsDuplicateValueError | SkipJsonSchema[None] = Field(
        None, alias='duplicateValueError'
    )
    range_error: SponsoredProductsRangeError | SkipJsonSchema[None] = Field(default=None, alias='rangeError')
    other_error: SponsoredProductsOtherError | SkipJsonSchema[None] = Field(default=None, alias='otherError')
    parent_entity_error: SponsoredProductsParentEntityError | SkipJsonSchema[None] = Field(
        None, alias='parentEntityError'
    )
    throttled_error: SponsoredProductsThrottledError | SkipJsonSchema[None] = Field(
        None, alias='throttledError'
    )
    entity_not_found_error: SponsoredProductsEntityNotFoundError | SkipJsonSchema[None] = Field(
        None, alias='entityNotFoundError'
    )
    applicable_marketplaces_error: (
        SponsoredProductsApplicableMarketplacesError | SkipJsonSchema[None]
    ) = Field(None, alias='applicableMarketplacesError')
    malformed_value_error: SponsoredProductsMalformedValueError | SkipJsonSchema[None] = Field(
        None, alias='malformedValueError'
    )
    billing_error: SponsoredProductsBillingError | SkipJsonSchema[None] = Field(
        None, alias='billingError'
    )
    entity_quota_error: SponsoredProductsEntityQuotaError | SkipJsonSchema[None] = Field(
        None, alias='entityQuotaError'
    )
    internal_server_error: SponsoredProductsInternalServerError | SkipJsonSchema[None] = Field(
        None, alias='internalServerError'
    )


class SponsoredProductsAdGroupAccessErrorSelector(BaseModel):
    class Config:
        allow_population_by_field_name = True

    entity_not_found_error: SponsoredProductsEntityNotFoundError | SkipJsonSchema[None] = Field(
        None, alias='entityNotFoundError'
    )
    missing_value_error: SponsoredProductsMissingValueError | SkipJsonSchema[None] = Field(
        None, alias='missingValueError'
    )
    malformed_value_error: SponsoredProductsMalformedValueError | SkipJsonSchema[None] = Field(
        None, alias='malformedValueError'
    )
    internal_server_error: SponsoredProductsInternalServerError | SkipJsonSchema[None] = Field(
        None, alias='internalServerError'
    )
    range_error: SponsoredProductsRangeError | SkipJsonSchema[None] = Field(default=None, alias='rangeError')
    other_error: SponsoredProductsOtherError | SkipJsonSchema[None] = Field(default=None, alias='otherError')
    throttled_error: SponsoredProductsThrottledError | SkipJsonSchema[None] = Field(
        None, alias='throttledError'
    )
    invalid_input_error: SponsoredProductsInvalidInputError | SkipJsonSchema[None] = Field(
        None, alias='invalidInputError'
    )


class SponsoredProductsListSponsoredProductsAdGroupsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    total_results: int | SkipJsonSchema[None] = Field(
        None, alias='totalResults', description='The total number of entities'
    )
    ad_groups: List[SponsoredProductsAdGroup] | SkipJsonSchema[None] = Field(
        None, alias='adGroups', max_length=1000, min_length=0
    )
    next_token: str | SkipJsonSchema[None] = Field(
        None,
        alias='nextToken',
        description='token value allowing to navigate to the next response page',
    )


class SponsoredProductsAdGroupSuccessResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_group: SponsoredProductsAdGroup | SkipJsonSchema[None] = Field(default=None, alias='adGroup')
    index: int = Field(
        ...,
        description='the index of the adGroup in the array from the request body',
        ge=0,
    )
    ad_group_id: str | SkipJsonSchema[None] = Field(
        None, alias='adGroupId', description='the adGroup ID'
    )


class SponsoredProductsAdGroupMutationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsAdGroupMutationErrorSelector = Field(
        ..., alias='errorValue'
    )


class SponsoredProductsAdGroupAccessError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_type: str = Field(..., alias='errorType', description='The type of the error')
    error_value: SponsoredProductsAdGroupAccessErrorSelector = Field(
        ..., alias='errorValue'
    )


class SponsoredProductsAdGroupMutationExceptionResponseContent(BaseModel):
    """
    Exception resulting in mutating campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: List[SponsoredProductsAdGroupMutationError] | SkipJsonSchema[None] = None


class SponsoredProductsAdGroupFailureResponseItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    index: int = Field(
        ...,
        description='the index of the adGroup in the array from the request body',
        ge=0,
    )
    errors: List[SponsoredProductsAdGroupMutationError] | SkipJsonSchema[None] = Field(
        None, description='A list of validation errors'
    )


class SponsoredProductsAdGroupAccessExceptionResponseContent(BaseModel):
    """
    Exception resulting in accessing campaign management entities
    """

    class Config:
        allow_population_by_field_name = True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')
    errors: List[SponsoredProductsAdGroupAccessError] | SkipJsonSchema[None] = None


class SponsoredProductsBulkAdGroupOperationResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    success: List[SponsoredProductsAdGroupSuccessResponseItem] | SkipJsonSchema[None] = Field(
        None, max_length=1000, min_length=0
    )
    error: List[SponsoredProductsAdGroupFailureResponseItem] | SkipJsonSchema[None] = Field(
        None, max_length=1000, min_length=0
    )


class SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ad_groups: SponsoredProductsBulkAdGroupOperationResponse = Field(
        ..., alias='adGroups'
    )


class SponsoredProductsUpdateSponsoredProductsAdGroupsResponseContent(
    SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent
):
    pass


class SponsoredProductsDeleteSponsoredProductsAdGroupsResponseContent(
    SponsoredProductsCreateSponsoredProductsAdGroupsResponseContent
):
    pass
# generated by datamodel-codegen:
#   filename:  multi_country_theme-based_bid_recommendations.json
#   timestamp: 2025-07-23T04:04:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field


class Type(Enum):
    """
    The type of bids in bid analyses. <br>`SUGGESTED_UPPER` - The upper bound for the suggested bid. <br>`SUGGESTED_LOWER` - The lower bound for the suggested bid. <br>`SUGGESTED` - The suggested bid value. <br>'ALTERNATIVE' - The alternative bids that is included in the bid analyses.
    """

    suggested_upper = 'SUGGESTED_UPPER'
    suggested_lower = 'SUGGESTED_LOWER'
    suggested = 'SUGGESTED'
    alternative = 'ALTERNATIVE'


class Predicate(Enum):
    placement_top = 'PLACEMENT_TOP'
    placement_rest_of_search = 'PLACEMENT_REST_OF_SEARCH'
    placement_product_page = 'PLACEMENT_PRODUCT_PAGE'


class BidPlacementAdjustment(BaseModel):
    """
    Specifies bid adjustments based on the placement location. Use `PLACEMENT_TOP` for the top of the search page. Use `PLACEMENT_REST_OF_SEARCH` for the rest of the search page. Use `PLACEMENT_PRODUCT_PAGE` for a product page.
    """

    class Config:
        validate_by_name= True

    predicate: Predicate | None = None
    percentage: int | None = Field(None, ge=0, le=900)


class Theme(Enum):
    """
    The bid recommendation theme. This API currently supports `CONVERSION_OPPORTUNITIES`, `PRIME_DAY`, `FALL_PRIME_DEAL_EVENT`, and `BFCM_HOLIDAY` themes.
    """

    conversion_opportunities = 'CONVERSION_OPPORTUNITIES'
    prime_day = 'PRIME_DAY'
    fall_prime_deal_event = 'FALL_PRIME_DEAL_EVENT'
    bfcm_holiday = 'BFCM_HOLIDAY'


class CountryCodes(BaseModel):
    """
    A list of country codes. Supported country codes:
    | Country Code |  Country            |
    |-------------|----------------------|
    | US          | United States        |
    | CA          | Canada               |
    | MX          | Mexico               |
    | BR          | Brazil               |
    | UK          | United Kingdom       |
    | DE          | Germany              |
    | FR          | France               |
    | ES          | Spain                |
    | IT          | Italy                |
    | IN          | India                |
    | AE          | United Arab Emirates |
    | SA          | Saudi Arabia         |
    | NL          | Netherlands          |
    | PL          | Poland               |
    | BE          | Belgium              |
    | SE          | Sweden               |
    | TR          | Turkey               |
    | EG          | Egypt                |
    | JP          | Japan                |
    | AU          | Australia            |
    | SG          | Singapore            |
    """

    class Config:
        validate_by_name= True

    __root__: list[str] = Field(
        ...,
        description='A list of country codes. Supported country codes:\n| Country Code |  Country            |\n|-------------|----------------------|\n| US          | United States        |\n| CA          | Canada               |\n| MX          | Mexico               |\n| BR          | Brazil               |\n| UK          | United Kingdom       |\n| DE          | Germany              |\n| FR          | France               |\n| ES          | Spain                |\n| IT          | Italy                |\n| IN          | India                |\n| AE          | United Arab Emirates |\n| SA          | Saudi Arabia         |\n| NL          | Netherlands          |\n| PL          | Poland               |\n| BE          | Belgium              |\n| SE          | Sweden               |\n| TR          | Turkey               |\n| EG          | Egypt                |\n| JP          | Japan                |\n| AU          | Australia            |\n| SG          | Singapore            |',
        max_items=50,
        min_items=0,
        unique_items=True,
    )


class RecommendationType(Enum):
    """
    The bid recommendation type.
    """

    bids_for_new_ad_group = 'BIDS_FOR_NEW_AD_GROUP'


class BidAnalysisImpactMetrics(BaseModel):
    class Config:
        validate_by_name= True

    estimated_impression_avg: int = Field(
        ...,
        alias='estimatedImpressionAvg',
        description='Number indicating the average of the estimated impressions',
    )
    estimated_impression_upper: int = Field(
        ...,
        alias='estimatedImpressionUpper',
        description='Number indicating an upper bound of the estimated impressions',
    )
    estimated_impression_lower: int = Field(
        ...,
        alias='estimatedImpressionLower',
        description='Number indicating a lower bound of the estimated impressions',
    )


class MultiCountryBidRecommendationError(BaseModel):
    class Config:
        validate_by_name= True

    country_codes: list[str] | None = Field(
        None, alias='countryCodes', description='Countries where error have occurred'
    )
    code: str | None = Field(None, description='Machine readable error code.')
    message: str | None = Field(
        None, description='Human readable 1 liner error message'
    )


class RecommendationType1(Enum):
    """
    The bid recommendation type.
    """

    bids_for_existing_ad_group = 'BIDS_FOR_EXISTING_AD_GROUP'


class SuggestedBidValue(BaseModel):
    class Config:
        validate_by_name= True

    __root__: float = Field(..., description='The suggested bid.', ge=0.0)


class SuggestedBidValues(BaseModel):
    class Config:
        validate_by_name= True

    __root__: list[SuggestedBidValue] = Field(..., max_items=3)


class BiddingStrategy(Enum):
    """
    The bidding strategy selected for the campaign. Use `LEGACY_FOR_SALES` to lower your bid in real time when your ad may be less likely to convert to a sale. Use `AUTO_FOR_SALES` to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use `MANUAL` to use your exact bid along with any manual adjustments.
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'


class MultiCountryThemeBasedBidRecommendationCompleteFailureResponse(BaseModel):
    class Config:
        validate_by_name= True

    errors: list[MultiCountryBidRecommendationError] = Field(
        ...,
        description='List of errors occurred while processing multi country request.',
    )


class GlobalStoreSetting(BaseModel):
    """
    This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).
    """

    class Config:
        validate_by_name= True

    catalog_source_country_code: str | None = Field(
        None,
        alias='catalogSourceCountryCode',
        description='Country code of source marketplace where seller has listed the product. Possible source country codes include US, UK, DE, JP, and AE.',
    )


class ProductDetails(BaseModel):
    class Config:
        validate_by_name= True

    global_store_setting: GlobalStoreSetting | None = Field(
        None,
        alias='globalStoreSetting',
        description='This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).',
    )
    asin: str | None = Field(None, description='The identifier of the product.')


class MultiCountryTargetingExpressionType(Enum):
    close_match = 'CLOSE_MATCH'
    loose_match = 'LOOSE_MATCH'
    substitutes = 'SUBSTITUTES'
    complements = 'COMPLEMENTS'
    keyword_broad_match = 'KEYWORD_BROAD_MATCH'
    keyword_exact_match = 'KEYWORD_EXACT_MATCH'
    keyword_phrase_match = 'KEYWORD_PHRASE_MATCH'
    pat_asin = 'PAT_ASIN'
    pat_category = 'PAT_CATEGORY'
    pat_category_refinement = 'PAT_CATEGORY_REFINEMENT'
    keyword_group = 'KEYWORD_GROUP'


class BidAnalysis(BaseModel):
    class Config:
        validate_by_name= True

    bid: float = Field(..., ge=0.0)
    type: Type = Field(
        ...,
        description="The type of bids in bid analyses. <br>`SUGGESTED_UPPER` - The upper bound for the suggested bid. <br>`SUGGESTED_LOWER` - The lower bound for the suggested bid. <br>`SUGGESTED` - The suggested bid value. <br>'ALTERNATIVE' - The alternative bids that is included in the bid analyses.",
    )
    impact_metrics: BidAnalysisImpactMetrics = Field(..., alias='impactMetrics')


class BidAnalyses(BaseModel):
    class Config:
        validate_by_name= True

    __root__: list[BidAnalysis] = Field(..., max_items=10, min_items=0)


class MultiCountryProduct(BaseModel):
    """
    This field provides the details for multi country product.
    """

    class Config:
        validate_by_name= True

    __root__: dict[str, ProductDetails] | None = Field(
        None, description='Product value'
    )


class Bidding(BaseModel):
    """
    Bidding control configuration for the campaign.
    """

    class Config:
        validate_by_name= True

    adjustments: list[BidPlacementAdjustment] | None = Field(
        None,
        description='Placement adjustment configuration for the campaign.',
        max_items=3,
        min_items=1,
    )
    strategy: BiddingStrategy


class MultiCountryTargetingExpression(BaseModel):
    """
    The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases. your keyword targeting ads with search phrases. Use `PAT_ASIN` to match your product attribute targeting ads with product ASIN. Use `PAT_CATEGORY` to match your product attribute targeting ads with product category. Use `PAT_CATEGORY_REFINEMENT` to match your product attribute targeting ads with product attribute, including brand, price, rating, prime shipping eligible, age range and genre. Use `KEYWORD_GROUP` to match your keyword targeting ads with keyword group.
    """

    class Config:
        validate_by_name= True

    country_values: Any | None = Field(None, alias='countryValues')
    type: MultiCountryTargetingExpressionType


class MultiCountryTargetingExpressionList(BaseModel):
    """
    The list of targeting expressions. Maximum of 100 per request per country, use pagination for more if needed.
    """

    class Config:
        validate_by_name= True

    __root__: list[MultiCountryTargetingExpression] = Field(
        ...,
        description='The list of targeting expressions. Maximum of 100 per request per country, use pagination for more if needed.',
        example=[
            {'type': 'CLOSE_MATCH'},
            {'type': 'LOOSE_MATCH'},
            {'type': 'SUBSTITUTES'},
            {'type': 'COMPLEMENTS'},
        ],
        max_items=100,
    )


class MultiCountryBidRecommendationPerTargetingExpression(BaseModel):
    class Config:
        validate_by_name= True

    country_suggested_bids: Any = Field(..., alias='countrySuggestedBids')
    expression: MultiCountryTargetingExpression


class BidAnalysesPerPlacement(BaseModel):
    class Config:
        validate_by_name= True

    all: BidAnalyses = Field(..., alias='ALL')
    placement_top: BidAnalyses = Field(..., alias='PLACEMENT_TOP')
    placement_rest_of_search: BidAnalyses = Field(..., alias='PLACEMENT_REST_OF_SEARCH')
    placement_product_page: BidAnalyses = Field(..., alias='PLACEMENT_PRODUCT_PAGE')


class MultiCountryAsinsThemeBasedBidRecommendationRequest(BaseModel):
    class Config:
        validate_by_name= True

    targeting_expressions: MultiCountryTargetingExpressionList = Field(
        ..., alias='targetingExpressions'
    )
    country_codes: CountryCodes = Field(..., alias='countryCodes')
    bidding: Bidding = Field(
        ..., description='Bidding control configuration for the campaign.'
    )
    recommendation_type: RecommendationType = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    include_analysis: bool = Field(
        'false',
        alias='includeAnalysis',
        description='Flag to include new bid analyzer data.',
    )
    products: list[MultiCountryProduct] | None = Field(
        None,
        description='This represents the list of products in the request.',
        max_items=50,
        min_items=1,
    )


class MultiCountryBidAnalysesPerTargetingExpression(BaseModel):
    class Config:
        validate_by_name= True

    expression: MultiCountryTargetingExpression
    country_bid_analyses: Any | None = Field(None, alias='countryBidAnalyses')


class MultiCountryAdGroupThemeBasedBidRecommendationRequest(BaseModel):
    class Config:
        validate_by_name= True

    targeting_expressions: MultiCountryTargetingExpressionList = Field(
        ..., alias='targetingExpressions'
    )
    country_codes: CountryCodes | None = Field(None, alias='countryCodes')
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    recommendation_type: RecommendationType1 = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    include_analysis: bool = Field(
        'false',
        alias='includeAnalysis',
        description='Flag to include new bid analyzer data.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )


class MultiCountryThemeBasedBidRecommendation(BaseModel):
    class Config:
        validate_by_name= True

    theme: Theme
    bid_analyses_for_targeting_expressions: (
        list[MultiCountryBidAnalysesPerTargetingExpression] | None
    ) = Field(
        None,
        alias='bidAnalysesForTargetingExpressions',
        description='The bid analyses for targeting expressions listed in the request.',
    )
    bid_recommendations_for_targeting_expressions: list[
        MultiCountryBidRecommendationPerTargetingExpression
    ] = Field(
        ...,
        alias='bidRecommendationsForTargetingExpressions',
        description='The bid recommendations for targeting expressions listed in the request.',
    )


class MultiCountryThemeBasedBidRecommendationResponse(BaseModel):
    """
    A list of multi country bid recommendation themes and associated bid recommendations.
    """

    class Config:
        validate_by_name= True

    bid_recommendations: list[MultiCountryThemeBasedBidRecommendation] = Field(
        ..., alias='bidRecommendations', max_items=2, min_items=0
    )
    errors: list[MultiCountryBidRecommendationError] | None = Field(
        None,
        description='List of errors occurred while processing multi country request.',
    )

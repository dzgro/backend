# generated by datamodel-codegen:
#   filename:  targetpromotiongroups.json
#   timestamp: 2025-07-23T04:03:00+00:00

from __future__ import annotations

from datetime import date
from enum import Enum

from pydantic import BaseModel, Field


class SponsoredProductsOtherErrorReason(Enum):
    other_error = 'OTHER_ERROR'


class SponsoredProductsMarketplace(Enum):
    us = 'US'
    ca = 'CA'
    mx = 'MX'
    br = 'BR'
    uk = 'UK'
    de = 'DE'
    fr = 'FR'
    es = 'ES'
    it = 'IT'
    in_ = 'IN'
    ae = 'AE'
    sa = 'SA'
    nl = 'NL'
    pl = 'PL'
    se = 'SE'
    tr = 'TR'
    eg = 'EG'
    jp = 'JP'
    au = 'AU'
    sg = 'SG'


class SponsoredProductsTargetPromotionGroup(BaseModel):
    """
    A Target Promotion Group that groups an Auto-Targeting Campaign/AdGroup with a Manual-Targeting Keyword Campaign/AdGroup, and a
    Manual-Targeting Product Campaign/AdGroup
    """

    class Config:
        validate_by_name= True

    product_campaign_ad_group_ids: list[str] | None = Field(
        None,
        alias='productCampaignAdGroupIds',
        description='The Ids of the manual product-targeting AdGroups associated with the target promotion group',
        max_items=1,
        min_items=1,
    )
    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    auto_targeting_campaign_ad_ids: list[str] | None = Field(
        None,
        alias='autoTargetingCampaignAdIds',
        description="The list of Product Ad Ids in the Auto-Targeting campaign's Ad Group that's tied to the Target Promotion Group.",
        max_items=1000,
        min_items=0,
    )
    keyword_campaign_ad_group_ids: list[str] | None = Field(
        None,
        alias='keywordCampaignAdGroupIds',
        description='The Ids of the manual keyword-targeting AdGroups associated with the target promotion group',
        max_items=1,
        min_items=1,
    )
    state: str | None = Field(
        None, description='The state of the target promotion group.'
    )
    target_promotion_group_name: str | None = Field(
        None,
        alias='targetPromotionGroupName',
        description='The name of the target promotion group.',
    )
    auto_targeting_campaign_ad_group_id: str | None = Field(
        None,
        alias='autoTargetingCampaignAdGroupId',
        description='The Id of the auto-targeting AdGroup associated with the target promotion group',
    )


class SponsoredProductsProductTargetV2(BaseModel):
    """
    A product target.
    """

    class Config:
        validate_by_name= True

    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    target_id: str | None = Field(
        None, alias='targetId', description='The id of the product target.'
    )
    expression_type: str | None = Field(
        None,
        alias='expressionType',
        description='The the expression type (for PRODUCT). One of PRODUCT_EXACT, PRODUCT_SIMILAR',
    )
    destination_ad_group_id: str | None = Field(
        None,
        alias='destinationAdGroupId',
        description='The adGroupId of the destination manual-targeting adGroup where the target belongs.',
    )
    target: str | None = Field(None, description='The product ASIN of the target.')


class SponsoredProductsErrorCause(BaseModel):
    """
    Structure describing error cause - location in the payload and data causing error
    """

    class Config:
        validate_by_name= True

    location: str = Field(
        ...,
        description='Error location, JSON Path expression specifying element of API payload causing error',
    )
    trigger: str | None = Field(None, description='optional value causing error')


class SponsoredProductsQuotaErrorReason(Enum):
    quota_exceeded = 'QUOTA_EXCEEDED'
    non_archived_quota_exceeded = 'NON_ARCHIVED_QUOTA_EXCEEDED'


class SponsoredProductsCreateTargetPromotionGroupsResponseContent(BaseModel):
    """
    Response object for creating a target promotion group.
    """

    class Config:
        validate_by_name= True

    target_promotion_group: SponsoredProductsTargetPromotionGroup | None = Field(
        None, alias='targetPromotionGroup'
    )


class ProductTargetDetailsV2(BaseModel):
    class Config:
        validate_by_name= True

    product_target_details_v2: SponsoredProductsProductTargetV2 = Field(
        ..., alias='productTargetDetailsV2'
    )


class SponsoredProductsBiddingErrorReason(Enum):
    bid_gt_budget = 'BID_GT_BUDGET'
    bid_out_of_market_place_range = 'BID_OUT_OF_MARKET_PLACE_RANGE'
    bid_invalid_placement = 'BID_INVALID_PLACEMENT'
    bid_invalid_shopper_cohort_type = 'BID_INVALID_SHOPPER_COHORT_TYPE'
    bid_shopper_cohorts_more_than_allowed = 'BID_SHOPPER_COHORTS_MORE_THAN_ALLOWED'
    bid_missing_audiences = 'BID_MISSING_AUDIENCES'
    bid_audiences_more_than_allowed = 'BID_AUDIENCES_MORE_THAN_ALLOWED'
    bid_invalid_audience_segment_type = 'BID_INVALID_AUDIENCE_SEGMENT_TYPE'
    bid_invalid_audience_id = 'BID_INVALID_AUDIENCE_ID'


class SponsoredProductsCreateTarget(BaseModel):
    """
    Target created in the target promotion group.
    """

    class Config:
        validate_by_name= True

    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    target_id: str | None = Field(
        None, alias='targetId', description='The id of the target that got created.'
    )
    manual_targeting_ad_group_id: str | None = Field(
        None,
        alias='manualTargetingAdGroupId',
        description='The adGroupId of the manual-targeting campaign where the target belongs.',
    )


class SponsoredProductsAccessDeniedErrorCode(Enum):
    access_denied = 'ACCESS_DENIED'


class SponsoredProductsTags(BaseModel):
    """
    A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
    """

    class Config:
        validate_by_name= True

    __root__: dict[str, str] | None = None


class SponsoredProductsObjectIdFilter(BaseModel):
    """
    Filter entities by the list of objectIds
    """

    class Config:
        validate_by_name= True

    include: list[str] = Field(..., max_items=1000, min_items=0)


class SponsoredProductsKeywordTargetV2(BaseModel):
    """
    A keyword target.
    """

    class Config:
        validate_by_name= True

    keyword_id: str | None = Field(
        None, alias='keywordId', description='The id of the keyword target.'
    )
    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    match_type: str | None = Field(
        None,
        alias='matchType',
        description='The match type (for KEYWORDs). One of EXACT, PHRASE, BROAD',
    )
    destination_ad_group_id: str | None = Field(
        None,
        alias='destinationAdGroupId',
        description='The adGroupId of the destination manual-targeting adGroup where the target belongs.',
    )
    keyword_text: str | None = Field(
        None, alias='keywordText', description='The keyword text.'
    )


class SponsoredProductsInternalErrorErrorCode(Enum):
    internal_error = 'INTERNAL_ERROR'


class SponsoredProductsQuotaScope(Enum):
    account = 'ACCOUNT'
    parent_entity = 'PARENT_ENTITY'


class SponsoredProductsThrottledErrorCode(Enum):
    throttled = 'THROTTLED'


class SponsoredProductsTargetingClauseSetupErrorReason(Enum):
    targeting_type_not_allowed_for_auto_targeting_campaign = (
        'TARGETING_TYPE_NOT_ALLOWED_FOR_AUTO_TARGETING_CAMPAIGN'
    )
    type_conflict_in_ad_group = 'TYPE_CONFLICT_IN_AD_GROUP'
    auto_targeting_clause_cannot_be_created_manually = (
        'AUTO_TARGETING_CLAUSE_CANNOT_BE_CREATED_MANUALLY'
    )
    targeting_expression_invalid_value = 'TARGETING_EXPRESSION_INVALID_VALUE'


class SponsoredProductsTargetType(Enum):
    """
    Indicates if the recommendation target is a Keyword or ASIN
    """

    keyword = 'KEYWORD'
    asin = 'ASIN'


class SponsoredProductsInvalidArgumentErrorCode(Enum):
    invalid_argument = 'INVALID_ARGUMENT'


class SponsoredProductsTarget(BaseModel):
    """
    Target promotion group's target.
    """

    class Config:
        validate_by_name= True

    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    target_id: str | None = Field(
        None, alias='targetId', description='The id of the target.'
    )
    expression_type: str | None = Field(
        None,
        alias='expressionType',
        description='The match type (for KEYWORDs) or the expression type (for PRODUCT). One of QUERY_BROAD_MATCHES,\n    QUERY_EXACT_MATCHES, QUERY_PHRASE_MATCHES, ASIN_SAME_AS, ASIN_EXPANDED_FROM',
    )
    manual_targeting_ad_group_id: str | None = Field(
        None,
        alias='manualTargetingAdGroupId',
        description='The adGroupId of the manual-targeting campaign where the target belongs.',
    )
    target: str | None = Field(
        None, description='The keyword text or the product ASIN of the target.'
    )


class SponsoredProductsListTargetPromotionGroupTargetsV2RequestContent(BaseModel):
    """
    Request object for querying target promotion group targets.
    """

    class Config:
        validate_by_name= True

    max_results: int = Field(
        1000,
        alias='maxResults',
        description='The maximum number of results requested.',
        ge=1,
        le=1000,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='Token value allowing to navigate to the next or previous response page',
    )
    target_promotion_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='targetPromotionGroupIdFilter'
    )
    ad_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='adGroupIdFilter'
    )


class SponsoredProductsAccessDeniedExceptionResponseContent(BaseModel):
    class Config:
        validate_by_name= True

    code: SponsoredProductsAccessDeniedErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputErrorReason(Enum):
    invalid_token = 'INVALID_TOKEN'


class SponsoredProductsTargetingExpressionMatchType(Enum):
    product_exact = 'PRODUCT_EXACT'
    product_similar = 'PRODUCT_SIMILAR'


class SponsoredProductsServiceUnavailableExceptionErrorCode(Enum):
    service_unavailable_exception = 'SERVICE_UNAVAILABLE_EXCEPTION'


class SponsoredProductsServiceUnavailableExceptionResponseContent(BaseModel):
    """
    Server unable to process request. Please retry later.
    """

    class Config:
        validate_by_name= True

    code: SponsoredProductsServiceUnavailableExceptionErrorCode
    message: str


class SponsoredProductsExistingCampaignDetails(BaseModel):
    """
    The request object for creating a new target promotion group with existing campaigns. Please note that the adGroupIds provided need to
    contain the same Ad ASINs/SKUs combination as the Auto-Targeting adGroup for the target promotion group.
    """

    class Config:
        validate_by_name= True

    product_campaign_ad_group_ids: list[str] | None = Field(
        None,
        alias='productCampaignAdGroupIds',
        description='AdGroupIds of existing manual campaigns to be used as part of the Target Promotion Group for\n    promoting product targets.',
        max_items=1,
        min_items=1,
    )
    keyword_campaign_ad_group_ids: list[str] | None = Field(
        None,
        alias='keywordCampaignAdGroupIds',
        description='AdGroupIds of existing manual campaigns to be used as part of the Target Promotion Group for\n    promoting keyword targets.',
        max_items=1,
        min_items=1,
    )


class SponsoredProductsOtherError(BaseModel):
    """
    Errors not related to any of the other error types
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsOtherErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsListTargetPromotionGroupsV2RequestContent(BaseModel):
    """
    Request object for querying target promotion groups.
    """

    class Config:
        validate_by_name= True

    max_results: int = Field(
        1000,
        alias='maxResults',
        description='The maximum number of results requested.',
        ge=1,
        le=1000,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='Token value allowing to navigate to the next or previous response page',
    )
    target_promotion_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='targetPromotionGroupIdFilter'
    )
    source_ad_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='sourceAdGroupIdFilter'
    )
    destination_ad_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='destinationAdGroupIdFilter'
    )


class SponsoredProductsExpressionTypeErrorReason(Enum):
    unsupported_expression_type = 'UNSUPPORTED_EXPRESSION_TYPE'


class SponsoredProductsValueLimitErrorReason(Enum):
    too_low = 'TOO_LOW'
    too_high = 'TOO_HIGH'
    invalid_enum_value = 'INVALID_ENUM_VALUE'
    not_in_list = 'NOT_IN_LIST'


class SponsoredProductsEntityNotFoundErrorReason(Enum):
    entity_not_found = 'ENTITY_NOT_FOUND'


class SponsoredProductsNewAdGroup(BaseModel):
    class Config:
        validate_by_name= True

    ad_group_name: str = Field(
        ..., alias='adGroupName', description='The name of the new ad group.'
    )
    targeting_types: list[str] = Field(
        ...,
        alias='targetingTypes',
        description='List of targeting types to be used for targets in the ad group. Supported types are KEYWORD and PRODUCT.',
        max_items=1,
        min_items=1,
    )
    default_bid: float = Field(
        ...,
        alias='defaultBid',
        description='The default bid value that gets applied if no bid is provided for the target. For more information about bid constraints by marketplace,\n    see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
        ge=0.0,
    )


class SponsoredProductsListTargetPromotionGroupsRequestContent(BaseModel):
    """
    Request object for querying target promotion groups.
    """

    class Config:
        validate_by_name= True

    max_results: int = Field(
        1000,
        alias='maxResults',
        description='The maximum number of results requested.',
        ge=1,
        le=1000,
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='Token value allowing to navigate to the next or previous response page',
    )
    target_promotion_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='targetPromotionGroupIdFilter'
    )
    ad_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='adGroupIdFilter'
    )


class SponsoredProductsRecommendationReason(BaseModel):
    """
    Provides a reason for why this target is being recommended for harvesting
    """

    class Config:
        validate_by_name= True

    reason: str | None = Field(None, description='The reason for the recommendation')
    data: str | None = Field(
        None, description='The data supporting the recommendation reason'
    )


class SponsoredProductsExpressionTypeError(BaseModel):
    class Config:
        validate_by_name= True

    reason: SponsoredProductsExpressionTypeErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsNewCampaignBudget(BaseModel):
    """
    The budget for the campaigns in the target promotion group.
    """

    class Config:
        validate_by_name= True

    budget_type: str = Field(..., alias='budgetType', description='DAILY.')
    budget: float = Field(..., description='The value of the budget.', ge=0.0)


class SponsoredProductsMissingValueErrorReason(Enum):
    missing_value = 'MISSING_VALUE'


class SponsoredProductsNewCampaignPlacementBidding(BaseModel):
    """
    The product placement.
    """

    class Config:
        validate_by_name= True

    percentage: int = Field(..., description='The bidding placement percentage.')
    placement: str = Field(
        ...,
        description='The bidding placement. One of PLACEMENT_TOP, PLACEMENT_PRODUCT_PAGE, PLACEMENT_REST_OF_SEARCH.',
    )


class SponsoredProductsListTargetPromotionGroupTargetsResponseContent(BaseModel):
    """
    Response object for querying target promotion group targets.
    """

    class Config:
        validate_by_name= True

    total_results: int | None = Field(
        None, alias='totalResults', description='The total number of results available.'
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the\n    request. If the nextToken field is empty, there are no further results.',
    )
    targets: list[SponsoredProductsTarget] | None = Field(
        None, max_items=1000, min_items=0
    )


class SponsoredProductsNewCampaignDynamicBidding(BaseModel):
    """
    Specifies bidding controls.
    """

    class Config:
        validate_by_name= True

    placement_bidding: list[SponsoredProductsNewCampaignPlacementBidding] | None = (
        Field(
            None,
            alias='placementBidding',
            description='The product placement.',
            max_items=3,
            min_items=0,
        )
    )
    strategy: str = Field(
        ..., description='One of LEGACY_FOR_SALES, AUTO_FOR_SALES, MANUAL, RULE_BASED.'
    )


class SponsoredProductsBillingErrorReason(Enum):
    advertiser_suspended = 'ADVERTISER_SUSPENDED'
    billing_account_not_found = 'BILLING_ACCOUNT_NOT_FOUND'
    payment_profile_not_found = 'PAYMENT_PROFILE_NOT_FOUND'
    expired_payment_method = 'EXPIRED_PAYMENT_METHOD'
    vetting_failure = 'VETTING_FAILURE'
    advertiser_billing_setup_incomplete = 'ADVERTISER_BILLING_SETUP_INCOMPLETE'


class SponsoredProductsExistingAdGroup(BaseModel):
    class Config:
        validate_by_name= True

    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The id of the Ad Group.'
    )


class SponsoredProductsInternalServerExceptionResponseContent(BaseModel):
    class Config:
        validate_by_name= True

    code: SponsoredProductsInternalErrorErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsListTargetPromotionGroupTargetsRequestContent(
    SponsoredProductsListTargetPromotionGroupTargetsV2RequestContent
):
    """
    Request object for querying target promotion group targets.
    """


class SponsoredProductsKeywordMatchType(Enum):
    exact = 'EXACT'
    phrase = 'PHRASE'
    broad = 'BROAD'


class SponsoredProductsTargetingClauseSetupError(BaseModel):
    """
    Errors related to targeting clause setup
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsTargetingClauseSetupErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnauthenticatedExceptionCode(Enum):
    unauthenticated = 'UNAUTHENTICATED'


class SponsoredProductsUnsupportedMediaTypeErrorCode(Enum):
    unsupported_media_type = 'UNSUPPORTED_MEDIA_TYPE'


class SponsoredProductsEntityStateErrorReason(Enum):
    invalid_target_state = 'INVALID_TARGET_STATE'
    parent_entity_forbids_creation = 'PARENT_ENTITY_FORBIDS_CREATION'
    marketplace_state_cannot_be_archived = 'MARKETPLACE_STATE_CANNOT_BE_ARCHIVED'
    auto_targeting_clause_cannot_be_archived_manually = (
        'AUTO_TARGETING_CLAUSE_CANNOT_BE_ARCHIVED_MANUALLY'
    )
    archived_entity_cannot_be_modified = 'ARCHIVED_ENTITY_CANNOT_BE_MODIFIED'
    invalid_state_transition = 'INVALID_STATE_TRANSITION'
    parent_archived_forbids_updates = 'PARENT_ARCHIVED_FORBIDS_UPDATES'
    parent_status_forbids_updates_and_creates = (
        'PARENT_STATUS_FORBIDS_UPDATES_AND_CREATES'
    )


class SponsoredProductsEntityType(Enum):
    campaign = 'CAMPAIGN'
    ad_group = 'AD_GROUP'
    keyword = 'KEYWORD'
    product_ad = 'PRODUCT_AD'
    campaign_negative_keyword = 'CAMPAIGN_NEGATIVE_KEYWORD'
    negative_keyword = 'NEGATIVE_KEYWORD'
    targeting_clause = 'TARGETING_CLAUSE'
    negative_targeting_clause = 'NEGATIVE_TARGETING_CLAUSE'
    campaign_negative_targeting_clause = 'CAMPAIGN_NEGATIVE_TARGETING_CLAUSE'


class SponsoredProductsNotImplementedExceptionCode(Enum):
    not_implemented = 'NOT_IMPLEMENTED'


class SponsoredProductsError(BaseModel):
    class Config:
        validate_by_name= True

    error_message: str | None = Field(None, alias='errorMessage')
    error_code: str | None = Field(None, alias='errorCode')


class SponsoredProductsCreateTargetRequest(BaseModel):
    """
    Request object for the target promotion group's target.
    """

    class Config:
        validate_by_name= True

    expression_type: str = Field(
        ...,
        alias='expressionType',
        description='The match type (for KEYWORDs) or the expression type (for PRODUCT). One of QUERY_BROAD_MATCHES,\n    QUERY_EXACT_MATCHES, QUERY_PHRASE_MATCHES, ASIN_SAME_AS, ASIN_EXPANDED_FROM',
    )
    bid: float | None = Field(
        None,
        description='Bid associated with the target. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
        ge=0.0,
    )
    target: str = Field(
        ..., description='The keyword or the product ASIN to be targeted.'
    )


class SponsoredProductsParentEntityErrorReason(Enum):
    parent_entity_does_not_target_these_marketplaces = (
        'PARENT_ENTITY_DOES_NOT_TARGET_THESE_MARKETPLACES'
    )
    parent_entity_archived = 'PARENT_ENTITY_ARCHIVED'
    parent_entity_not_found = 'PARENT_ENTITY_NOT_FOUND'


class SponsoredProductsUnauthenticatedExceptionResponseContent(BaseModel):
    """
    Unauthenticated. Request failed because user is not authenticated.
    """

    class Config:
        validate_by_name= True

    code: SponsoredProductsUnauthenticatedExceptionCode | None = None
    message: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class SponsoredProductsMissingValueError(BaseModel):
    """
    Error describing missing values in API payloads
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsMissingValueErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsGetTargetPromotionGroupsRecommendationsRequestContent(BaseModel):
    class Config:
        validate_by_name= True

    campaign_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='campaignIdFilter'
    )
    max_results: int | None = Field(
        None,
        alias='maxResults',
        description='Number of records to include in the paginated response. Defaults to 1000.',
        ge=1,
        le=1000,
    )
    next_token: str | None = Field(
        None, alias='nextToken', description='Token for fetching the next page'
    )
    ad_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='adIdFilter'
    )
    ad_group_id_filter: SponsoredProductsObjectIdFilter | None = Field(
        None, alias='adGroupIdFilter'
    )


class SponsoredProductsListTargetPromotionGroupsResponseContent(BaseModel):
    """
    Response object for querying target promotion groups.
    """

    class Config:
        validate_by_name= True

    total_results: int | None = Field(
        None, alias='totalResults', description='The total number of results available.'
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the\n    request. If the nextToken field is empty, there are no further results.',
    )
    target_promotion_groups: list[SponsoredProductsTargetPromotionGroup] | None = Field(
        None, alias='targetPromotionGroups', max_items=1000, min_items=0
    )


class SponsoredProductsMalformedValueErrorReason(Enum):
    forbidden_chars = 'FORBIDDEN_CHARS'
    pattern_not_matched = 'PATTERN_NOT_MATCHED'
    too_long = 'TOO_LONG'
    too_short = 'TOO_SHORT'
    leading_or_trailing_whitespace = 'LEADING_OR_TRAILING_WHITESPACE'
    blank = 'BLANK'


class SponsoredProductsResponseAdGroup(BaseModel):
    """
    Ad groups where targets can be promoted.
    """

    class Config:
        validate_by_name= True

    ad_group_id: str | None = Field(
        None, alias='adGroupId', description='The id of the ad group in the campaign.'
    )


class SponsoredProductsBiddingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsBiddingErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    upper_limit: str | None = Field(None, alias='upperLimit')
    lower_limit: str | None = Field(None, alias='lowerLimit')
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsTargetPromotionGroupV2(BaseModel):
    """
    A Target Promotion Group that groups a source AdGroup with one or more destination Manual Keyword/Product Targeting AdGroup(s)
    """

    class Config:
        validate_by_name= True

    ad_ids: list[str] | None = Field(
        None,
        alias='adIds',
        description="The list of Product Ad Ids in the source Ad Group that's tied to the Target Promotion Group.",
        max_items=1000,
        min_items=0,
    )
    source_ad_group_id: str | None = Field(
        None,
        alias='sourceAdGroupId',
        description='The Id of the source AdGroup associated with the target promotion group',
    )
    target_promotion_group_id: str | None = Field(
        None,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group.',
    )
    source_campaign_id: str | None = Field(
        None,
        alias='sourceCampaignId',
        description='The campaign Id of the source AdGroup associated with the target promotion group',
    )
    state: str | None = Field(
        None, description='The state of the target promotion group.'
    )
    destination_ad_groups: list[SponsoredProductsResponseAdGroup] | None = Field(
        None,
        alias='destinationAdGroups',
        description='The destination manual targeting AdGroups associated with the target promotion group.',
        max_items=1000,
        min_items=0,
    )
    target_promotion_group_name: str | None = Field(
        None,
        alias='targetPromotionGroupName',
        description='The name of the target promotion group.',
    )


class SponsoredProductsDuplicateValueErrorReason(Enum):
    duplicate_value = 'DUPLICATE_VALUE'
    name_not_unique = 'NAME_NOT_UNIQUE'
    marketplace_attributes_repeated = 'MARKETPLACE_ATTRIBUTES_REPEATED'


class SponsoredProductsLocaleErrorReason(Enum):
    invalid_locale = 'INVALID_LOCALE'


class SponsoredProductsParentEntityError(BaseModel):
    """
    Errors related to parent entity
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsParentEntityErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsSchemaValidationExceptionResponseContent(BaseModel):
    class Config:
        validate_by_name= True

    code: SponsoredProductsInvalidArgumentErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateTargetPromotionGroupTargetsRequestContent(BaseModel):
    """
    Request object for creating target promotion group targets in a target promotion group.
    """

    class Config:
        validate_by_name= True

    target_promotion_group_id: str = Field(
        ...,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group where the targets are being added.',
    )
    targets: list[SponsoredProductsCreateTargetRequest] | None = Field(
        None,
        description='List of targets to be added to the target promotion group.',
        max_items=1000,
        min_items=0,
    )


class SponsoredProductsMalformedValueError(BaseModel):
    """
    Errors being used to represent malformed values
    e.g. containing not allowed characters, not following patters etc
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsMalformedValueErrorReason
    fragment: str | None = Field(
        None, description='fragment of the value which is wrong'
    )
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsRecommendedTarget(BaseModel):
    class Config:
        validate_by_name= True

    ad_id: str | None = Field(
        None,
        alias='adId',
        description='The ID of an ad for which the targets are recommended',
    )
    campaign_id: str | None = Field(
        None,
        alias='campaignId',
        description='The ID of a campaign for which the targets are recommended',
    )
    target_type: SponsoredProductsTargetType | None = Field(None, alias='targetType')
    ad_asin: str | None = Field(
        None, alias='adAsin', description='The ASIN of the product being advertised'
    )
    recommended_target: str | None = Field(
        None,
        alias='recommendedTarget',
        description='The keyword or ASIN that is being targeted',
    )
    ad_group_id: str | None = Field(
        None,
        alias='adGroupId',
        description='The ID of an ad group for which the targets are recommended',
    )
    recommendation_reasons: list[SponsoredProductsRecommendationReason] | None = Field(
        None,
        alias='recommendationReasons',
        description='Provides a list of reasons for why this target is being recommended for harvesting',
        max_items=1000,
        min_items=0,
    )


class SponsoredProductsNotImplementedExceptionResponseContent(BaseModel):
    """
    Operation is not implemented.
    """

    class Config:
        validate_by_name= True

    code: SponsoredProductsNotImplementedExceptionCode | None = None
    message: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class SponsoredProductsBillingError(BaseModel):
    """
    Errors related to bids
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsBillingErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsInvalidInputError(BaseModel):
    """
    Errors related to ad eligibility
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsInvalidInputErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateTargetPromotionGroupTargetsSuccessResponseItem(BaseModel):
    """
    Response object of successfully created target promotion group target.
    """

    class Config:
        validate_by_name= True

    expression_type: str | None = Field(
        None,
        alias='expressionType',
        description='The expression type of the target that was requested to be created.',
    )
    target_details: SponsoredProductsCreateTarget | None = Field(
        None, alias='targetDetails'
    )
    target: str | None = Field(
        None, description='The target that was requested to be created.'
    )


class SponsoredProductsEntityNotFoundError(BaseModel):
    class Config:
        validate_by_name= True

    reason: SponsoredProductsEntityNotFoundErrorReason
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | None = None
    entity_id: str = Field(
        ..., alias='entityId', description='The entity id in the request'
    )
    message: str = Field(..., description='Human readable error message')


class KeywordTargetDetailsV2(BaseModel):
    class Config:
        validate_by_name= True

    keyword_target_details_v2: SponsoredProductsKeywordTargetV2 = Field(
        ..., alias='keywordTargetDetailsV2'
    )


class SponsoredProductsTargetPromotionGroupTargetDetails(BaseModel):
    class Config:
        validate_by_name= True

    __root__: KeywordTargetDetailsV2 | ProductTargetDetailsV2


class SponsoredProductsThrottledError(BaseModel):
    """
    Error that represents failure due to API caller exceeding allowed service limits.
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsThrottledErrorCode
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsThrottlingExceptionResponseContent(BaseModel):
    class Config:
        validate_by_name= True

    code: SponsoredProductsThrottledErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsUnsupportedMediaTypeExceptionResponseContent(BaseModel):
    class Config:
        validate_by_name= True

    code: SponsoredProductsUnsupportedMediaTypeErrorCode
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsEntityQuotaError(BaseModel):
    """
    Errors related to exceeding quota in campaign management service
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsQuotaErrorReason
    quota_scope: SponsoredProductsQuotaScope | None = Field(None, alias='quotaScope')
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    quota: str | None = Field(None, description='optional current quota')
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateProductTarget(BaseModel):
    """
    A product target.
    """

    class Config:
        validate_by_name= True

    match_type: SponsoredProductsTargetingExpressionMatchType = Field(
        ..., alias='matchType'
    )
    bid: float | None = Field(
        None,
        description='Bid associated with the target. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
        ge=0.0,
    )
    target: str = Field(..., description='The product ASIN of the target.')


class BiddingError(BaseModel):
    class Config:
        validate_by_name= True

    bidding_error: SponsoredProductsBiddingError = Field(..., alias='biddingError')


class BillingError(BaseModel):
    class Config:
        validate_by_name= True

    billing_error: SponsoredProductsBillingError = Field(..., alias='billingError')


class EntityNotFoundError(BaseModel):
    class Config:
        validate_by_name= True

    entity_not_found_error: SponsoredProductsEntityNotFoundError = Field(
        ..., alias='entityNotFoundError'
    )


class EntityQuotaError(BaseModel):
    class Config:
        validate_by_name= True

    entity_quota_error: SponsoredProductsEntityQuotaError = Field(
        ..., alias='entityQuotaError'
    )


class ExpressionTypeError(BaseModel):
    class Config:
        validate_by_name= True

    expression_type_error: SponsoredProductsExpressionTypeError = Field(
        ..., alias='expressionTypeError'
    )


class MalformedValueError(BaseModel):
    class Config:
        validate_by_name= True

    malformed_value_error: SponsoredProductsMalformedValueError = Field(
        ..., alias='malformedValueError'
    )


class MissingValueError(BaseModel):
    class Config:
        validate_by_name= True

    missing_value_error: SponsoredProductsMissingValueError = Field(
        ..., alias='missingValueError'
    )


class ParentEntityError(BaseModel):
    class Config:
        validate_by_name= True

    parent_entity_error: SponsoredProductsParentEntityError = Field(
        ..., alias='parentEntityError'
    )


class OtherError(BaseModel):
    class Config:
        validate_by_name= True

    other_error: SponsoredProductsOtherError = Field(..., alias='otherError')


class InvalidInputError(BaseModel):
    class Config:
        validate_by_name= True

    invalid_input_error: SponsoredProductsInvalidInputError = Field(
        ..., alias='invalidInputError'
    )


class ThrottledError(BaseModel):
    class Config:
        validate_by_name= True

    throttled_error: SponsoredProductsThrottledError = Field(
        ..., alias='throttledError'
    )


class TargetingClauseSetupError(BaseModel):
    class Config:
        validate_by_name= True

    targeting_clause_setup_error: SponsoredProductsTargetingClauseSetupError = Field(
        ..., alias='targetingClauseSetupError'
    )


class SponsoredProductsCreateTargetPromotionGroupTargetsBatchError(BaseModel):
    """
    Response object of failed target promotion group target.
    """

    class Config:
        validate_by_name= True

    index: str | None = Field(None, description='index of the item in the request.')
    sub_errors: list[SponsoredProductsError] | None = Field(
        None,
        alias='subErrors',
        description='A list of the errors encountered.',
        max_items=100,
        min_items=1,
    )


class ProductTarget(BaseModel):
    """
    Request object for target promotion group's target.
    """

    class Config:
        validate_by_name= True

    product_target: SponsoredProductsCreateProductTarget = Field(
        ..., alias='productTarget'
    )


class SponsoredProductsListTargetPromotionGroupsV2ResponseContent(BaseModel):
    """
    Response object for querying target promotion groups.
    """

    class Config:
        validate_by_name= True

    total_results: int | None = Field(
        None, alias='totalResults', description='The total number of results available.'
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the\n    request. If the nextToken field is empty, there are no further results.',
    )
    target_promotion_groups: list[SponsoredProductsTargetPromotionGroupV2] | None = (
        Field(None, alias='targetPromotionGroups', max_items=1000, min_items=0)
    )


class SponsoredProductsRangeError(BaseModel):
    """
    Errors related to range constraints violations
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsValueLimitErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    allowed: list[str] | None = Field(None, description='allowed values')
    cause: SponsoredProductsErrorCause | None = None
    upper_limit: str | None = Field(
        None, alias='upperLimit', description='optional upper limit'
    )
    lower_limit: str | None = Field(
        None, alias='lowerLimit', description='optional lower limit'
    )
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsNewCampaignDetails(BaseModel):
    """
    The request object for creating a new target promotion group with new campaigns.
    """

    class Config:
        validate_by_name= True

    end_date: date | None = Field(
        None,
        alias='endDate',
        description='The end date of the new target promotion group entities. The format of the date is YYYY-MM-DD.',
    )
    name_prefix: str = Field(
        ...,
        alias='namePrefix',
        description="The name prefix to be used for the entities under the target promotion group. e.g. if the namePrefix\n    is ABC, we will create a keyword campaign with the name 'ABC-ManualKeywordTargeting-Campaign-AutoGenerated'",
    )
    dynamic_bidding: SponsoredProductsNewCampaignDynamicBidding | None = Field(
        None, alias='dynamicBidding'
    )
    start_date: date | None = Field(
        None,
        alias='startDate',
        description="The start date of the new target promotion group entities. Default is today's date. The format of the date is YYYY-MM-DD.",
    )
    default_bid: float = Field(
        ...,
        alias='defaultBid',
        description='The default bid value that gets applied if no bid is provided for the target. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
        ge=0.0,
    )
    budget: SponsoredProductsNewCampaignBudget
    tags: SponsoredProductsTags | None = None


class SponsoredProductsCreateTargetPromotionGroupTargetsBatchSuccess(BaseModel):
    """
    Response object of successfully created target promotion group target.
    """

    class Config:
        validate_by_name= True

    index: str | None = Field(None, description='index of the item in the request.')
    target_details: SponsoredProductsTargetPromotionGroupTargetDetails | None = Field(
        None, alias='targetDetails'
    )


class SponsoredProductsListTargetPromotionGroupTargetsV2ResponseContent(BaseModel):
    """
    Response object for querying target promotion group targets.
    """

    class Config:
        validate_by_name= True

    total_results: int | None = Field(
        None, alias='totalResults', description='The total number of results available.'
    )
    next_token: str | None = Field(
        None,
        alias='nextToken',
        description='To retrieve the next page of results, call the same operation and specify this token in the\n    request. If the nextToken field is empty, there are no further results.',
    )
    targets: list[SponsoredProductsTargetPromotionGroupTargetDetails] | None = Field(
        None, max_items=1000, min_items=0
    )


class SponsoredProductsCreateTargetPromotionGroupTargetsV2ResponseContent(BaseModel):
    """
    Response object for creating target promotion group targets.
    """

    class Config:
        validate_by_name= True

    success: (
        list[SponsoredProductsCreateTargetPromotionGroupTargetsBatchSuccess] | None
    ) = Field(None, max_items=1000, min_items=0)
    error: list[SponsoredProductsCreateTargetPromotionGroupTargetsBatchError] | None = (
        Field(None, max_items=1000, min_items=0)
    )


class SponsoredProductsDuplicateValueError(BaseModel):
    class Config:
        validate_by_name= True

    reason: SponsoredProductsDuplicateValueErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateTargetPromotionGroupsRequestContent(BaseModel):
    """
    Request object for creating a Target Promotion Group.
    """

    class Config:
        validate_by_name= True

    ad_ids: list[str] | None = Field(
        None,
        alias='adIds',
        description='The list of adIds (optional) of the Ad Group of the Auto-Targeting campaign, that will be part of the Target Promotion Group. If this\n    list is empty, all the Product Ads under the Ad Group will be part of the Target Promotion Group.',
        max_items=1000,
        min_items=1,
    )
    existing_campaign_details: SponsoredProductsExistingCampaignDetails | None = Field(
        None, alias='existingCampaignDetails'
    )
    ad_group_id: str = Field(
        ...,
        alias='adGroupId',
        description='The adGroupId of the Ad Group of an Auto-Targeting campaign that will be part of the Target Promotion Group.',
    )
    new_campaign_details: SponsoredProductsNewCampaignDetails | None = Field(
        None, alias='newCampaignDetails'
    )


class SponsoredProductsNewCampaign(BaseModel):
    class Config:
        validate_by_name= True

    ad_groups: list[SponsoredProductsNewAdGroup] = Field(
        ...,
        alias='adGroups',
        description='List of ad groups to be created inside the new campaign.',
        max_items=1,
        min_items=1,
    )
    end_date: date | None = Field(
        None,
        alias='endDate',
        description='The end date of the new target promotion group entities. The format of the date is YYYY-MM-DD.',
    )
    campaign_name: str = Field(
        ..., alias='campaignName', description='The campaign name.'
    )
    dynamic_bidding: SponsoredProductsNewCampaignDynamicBidding | None = Field(
        None, alias='dynamicBidding'
    )
    start_date: date | None = Field(
        None,
        alias='startDate',
        description="The start date of the new target promotion group entities. Default is today's date. The format of the date is YYYY-MM-DD.",
    )
    budget: SponsoredProductsNewCampaignBudget
    tags: SponsoredProductsTags | None = None


class SponsoredProductsCreateKeywordTarget(BaseModel):
    """
    A keyword target.
    """

    class Config:
        validate_by_name= True

    match_type: SponsoredProductsKeywordMatchType = Field(..., alias='matchType')
    bid: float | None = Field(
        None,
        description='Bid associated with the target. For more information about bid constraints by marketplace, see [bid limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).',
        ge=0.0,
    )
    keyword: str = Field(..., description='The keyword text.')


class SponsoredProductsCreateTargetPromotionGroupsV2ResponseContent(BaseModel):
    """
    Response object for creating a target promotion group.
    """

    class Config:
        validate_by_name= True

    target_promotion_group: SponsoredProductsTargetPromotionGroupV2 | None = Field(
        None, alias='targetPromotionGroup'
    )


class SponsoredProductsEntityStateError(BaseModel):
    """
    entity state update errors
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsEntityStateErrorReason
    marketplace: SponsoredProductsMarketplace | None = None
    entity_type: SponsoredProductsEntityType = Field(..., alias='entityType')
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsLocaleError(BaseModel):
    class Config:
        validate_by_name= True

    reason: SponsoredProductsLocaleErrorReason
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsCreateTargetPromotionGroupsV2RequestContent(BaseModel):
    """
    Request object for creating a Target Promotion Group.
    """

    class Config:
        validate_by_name= True

    ad_ids: list[str] | None = Field(
        None,
        alias='adIds',
        description='The list of adIds (optional) of the source Ad Group, that will be part of the Target Promotion Group. If this\n    list is not provided, all the Product Ads under the source Ad Group will be part of the Target Promotion Group.',
        max_items=1000,
        min_items=0,
    )
    existing_campaign_details: list[SponsoredProductsExistingAdGroup] | None = Field(
        None,
        alias='existingCampaignDetails',
        description='List of existing manual campaign ad groups to be added in the Target Promotion Group. It must contain one keyword ad group, or one\n    product ad group, or both. The request will fail if this field is provided alongside newCampaignDetails.',
        max_items=2,
        min_items=1,
    )
    target_promotion_group_name: str = Field(
        ...,
        alias='targetPromotionGroupName',
        description='The name of the target promotion group that will be created.',
    )
    ad_group_id: str = Field(
        ...,
        alias='adGroupId',
        description='The adGroupId of the source Ad Group that will be part of the Target Promotion Group.',
    )
    new_campaign_details: list[SponsoredProductsNewCampaign] | None = Field(
        None,
        alias='newCampaignDetails',
        description='List of new destination manual campaigns to be created as part of the Target Promotion Group. It must contain setting for the creation of\n     one keyword ad group, or one product ad group, or both. The request will fail if this field is provided alongside existingCampaignDetails.',
        max_items=2,
        min_items=1,
    )


class SponsoredProductsInternalServerError(BaseModel):
    """
    Error that represents non-retryable API service error. Sending the same request will result in another error.
    """

    class Config:
        validate_by_name= True

    reason: SponsoredProductsInternalErrorErrorCode
    cause: SponsoredProductsErrorCause | None = None
    message: str = Field(..., description='Human readable error message')


class SponsoredProductsGetTargetPromotionGroupsRecommendationsResponseContent(
    BaseModel
):
    class Config:
        validate_by_name= True

    total_results: int = Field(
        ..., alias='totalResults', description='Total number of records available'
    )
    next_token: str | None = Field(
        None, alias='nextToken', description='Token for fetching the next page'
    )
    targets: list[SponsoredProductsRecommendedTarget] = Field(
        ...,
        description='List of optimized targets for the request, as recommended by Amazon heuristics',
        max_items=1000,
        min_items=0,
    )


class DuplicateValueError(BaseModel):
    class Config:
        validate_by_name= True

    duplicate_value_error: SponsoredProductsDuplicateValueError = Field(
        ..., alias='duplicateValueError'
    )


class EntityStateError(BaseModel):
    class Config:
        validate_by_name= True

    entity_state_error: SponsoredProductsEntityStateError = Field(
        ..., alias='entityStateError'
    )


class LocaleError(BaseModel):
    class Config:
        validate_by_name= True

    locale_error: SponsoredProductsLocaleError = Field(..., alias='localeError')


class RangeError(BaseModel):
    class Config:
        validate_by_name= True

    range_error: SponsoredProductsRangeError = Field(..., alias='rangeError')


class InternalServerError(BaseModel):
    class Config:
        validate_by_name= True

    internal_server_error: SponsoredProductsInternalServerError = Field(
        ..., alias='internalServerError'
    )


class SponsoredProductsCreateTargetErrorSelector(BaseModel):
    class Config:
        validate_by_name= True

    __root__: (
        BiddingError
        | BillingError
        | DuplicateValueError
        | EntityNotFoundError
        | EntityQuotaError
        | EntityStateError
        | ExpressionTypeError
        | LocaleError
        | MalformedValueError
        | MissingValueError
        | ParentEntityError
        | RangeError
        | OtherError
        | InternalServerError
        | InvalidInputError
        | ThrottledError
        | TargetingClauseSetupError
    )


class KeywordTarget(BaseModel):
    """
    Request object for target promotion group's target.
    """

    class Config:
        validate_by_name= True

    keyword_target: SponsoredProductsCreateKeywordTarget = Field(
        ..., alias='keywordTarget'
    )


class SponsoredProductsCreateTargetRequestV2(BaseModel):
    class Config:
        validate_by_name= True

    __root__: KeywordTarget | ProductTarget = Field(
        ..., description="Request object for target promotion group's target."
    )


class SponsoredProductsCreateTargetError(BaseModel):
    """
    Response object of failed target promotion group target.
    """

    class Config:
        validate_by_name= True

    error_type: str | None = Field(
        None, alias='errorType', description='The type of the error.'
    )
    error_value: SponsoredProductsCreateTargetErrorSelector | None = Field(
        None, alias='errorValue'
    )


class SponsoredProductsCreateTargetPromotionGroupTargetsV2RequestContent(BaseModel):
    """
    Request object for creating target promotion group targets in a target promotion group.
    """

    class Config:
        validate_by_name= True

    target_promotion_group_id: str = Field(
        ...,
        alias='targetPromotionGroupId',
        description='The id of the target promotion group where the targets are being added.',
    )
    targets: list[SponsoredProductsCreateTargetRequestV2] | None = Field(
        None,
        description='List of targets to be added to the target promotion group.',
        max_items=1000,
        min_items=1,
    )


class SponsoredProductsCreateTargetPromotionGroupTargetsFailureResponseItem(BaseModel):
    """
    Response object of failed target promotion group target.
    """

    class Config:
        validate_by_name= True

    expression_type: str | None = Field(
        None,
        alias='expressionType',
        description='The expression type of the target that was requested to be created.',
    )
    errors: list[SponsoredProductsCreateTargetError] | None = Field(
        None,
        description='Response object of failed target promotion group target.',
        max_items=10000,
        min_items=0,
    )
    target: str | None = Field(
        None, description='The target that was requested to be created.'
    )


class SponsoredProductsCreateTargetPromotionGroupTargetsResponseContent(BaseModel):
    """
    Response object for creating target promotion group targets.
    """

    class Config:
        validate_by_name= True

    success: (
        list[SponsoredProductsCreateTargetPromotionGroupTargetsSuccessResponseItem]
        | None
    ) = Field(
        None,
        description='List of successfully created targets.',
        max_items=1000,
        min_items=0,
    )
    errors: (
        list[SponsoredProductsCreateTargetPromotionGroupTargetsFailureResponseItem]
        | None
    ) = Field(
        None,
        description='List of targets that failed to create.',
        max_items=1000,
        min_items=0,
    )

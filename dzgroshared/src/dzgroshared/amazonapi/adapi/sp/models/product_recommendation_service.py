# generated by datamodel-codegen:
#   filename:  product_recommendation_service.json
#   timestamp: 2025-07-23T04:04:19+00:00

from __future__ import annotations

from pydantic import BaseModel, Field


class InternalServerException(BaseModel):
    """
    Returns information about an InternalServerException.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class ProductRecommendation(BaseModel):
    """
    Recommended asin and related information.
    """

    class Config:
        validate_by_name= True

    themes: list[str] | None = Field(
        None, description='List of themes associated with this recommended ASIN.'
    )
    recommended_asin: str | None = Field(
        None,
        alias='recommendedAsin',
        description='Recommended ASIN',
        example='BX20002121',
        max_length=10,
        min_length=10,
    )


class RecommendedAsin(BaseModel):
    class Config:
        validate_by_name= True

    __root__: str = Field(..., example='BX20002121', max_length=10, min_length=10)


class ThemeRecommendation(BaseModel):
    """
    Recommended asins grouped by theme attribute.
    """

    class Config:
        validate_by_name= True

    description: str | None = Field(
        None,
        description='A theme name representing the context around the recommended list of ASINs.',
        example='These target ASINs generated sales for the input ASIN in the past 30 days.',
    )
    recommended_asins: list[RecommendedAsin] | None = Field(
        None,
        alias='recommendedAsins',
        description='List of recommended ASINs under current theme.',
    )
    theme: str | None = Field(
        None,
        description='A theme name representing the context around the recommended list of ASINs.',
        example='Top Converting targets',
    )


class ProductRecommendationsByASIN(BaseModel):
    """
    Product recommendations supplemented with relevant information.
    """

    class Config:
        validate_by_name= True

    next_cursor: str | None = Field(
        None,
        alias='nextCursor',
        description='An identifier to fetch next set of `ProductRecommendation` records in the result set if available. This will be null when at the end of result set.',
        example='MTAxNTExOTQ1MjAwNzI5NDE=',
    )
    previous_cursor: str | None = Field(
        None,
        alias='previousCursor',
        description='Optional parameter that links to the previous result set served. This parameter will be null on the first request.',
        example='TQ1MjAwNzI5NDE=',
    )
    recommendations: list[ProductRecommendation] | None = Field(
        None, description='An array of `ProductRecommendation` objects.'
    )


class ThrottlingException(BaseModel):
    """
    Returns information about a ThrottlingException.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class UnprocessableEntityException(BaseModel):
    """
    Returns information about UnprocessableEntityException.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class BadRequestException(BaseModel):
    """
    Returns information about a BadRequestException.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class AdAsin(RecommendedAsin):
    pass


class GetProductRecommendationsRequest(BaseModel):
    """
    Request structure to get ASIN recommendations for a set of input ASINs.
    """

    class Config:
        validate_by_name= True

    cursor: str | None = Field(
        None,
        description='A optional cursor value that can be used to fetch next or previous set of records.',
        example='MTAxNTwNzI5NDE=',
    )
    ad_asins: list[AdAsin] = Field(
        ..., alias='adAsins', description='List of input ASINs.'
    )
    count: int | None = Field(
        None,
        description='Count of objects requested in the response. The count will be applied on the objects returned under `recommendations` array in response body.  <ul> <li>Requesting `application/vnd.spproductrecommendationresponse.themes.v3+json` mediatype applies the count on `ThemeRecommendation` objects.If no count value is passed a default of `5` is assumed. The API will return a maximum of `10` themes irrespective of how large the count is set. </li> <li>Requesting `application/vnd.spproductrecommendationresponse.asins.v3+json` mediatype applies count on the `ProductRecommendation` objects in response body.If no count value is passed a default of `100` is assumed. The API will return a maximum of `1000` recommendations irrespective of how large the count is set. </li> </ul> Please refer the response Schemas for more info.',
        example='5',
        ge=1,
    )
    locale: str | None = Field(
        None,
        description='Theme names and descriptions will be provided in the language for your supported locale. Available options are en_US (U.S. English), en_GB (UK English), zh_CN (Chinese), es_ES (Spanish), jp_JP (Japanese), de_DE (German), fr_FR (French), it_IT(Italian). If locale is not provided or unsupported, the theme names and descriptions will be returned in U.S. English (en_US).',
        example='en_US',
    )


class ProductRecommendationsByTheme(BaseModel):
    """
    Product recommendations grouped by theme attribute.
    """

    class Config:
        validate_by_name= True

    next_cursor: str | None = Field(
        None,
        alias='nextCursor',
        description='An identifier to fetch next set of `ThemeRecommendation` records in the result set if available. This will be null when at the end of result set.',
        example='MTAxNTExOzI5NDE=',
    )
    previous_cursor: str | None = Field(
        None,
        alias='previousCursor',
        description='Optional parameter that links to the previous result set served to the requester.',
        example='OTQ1wNzI5NDE=',
    )
    recommendations: list[ThemeRecommendation] | None = Field(
        None, description='An array of `ThemeRecommendation` objects'
    )

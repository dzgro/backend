from typing import List
# generated by datamodel-codegen:
#   filename:  budgetrulesrecommendation.json
#   timestamp: 2025-07-23T04:03:50+00:00

from __future__ import annotations

from datetime import datetime

from pydantic import BaseModel, Field


class SPBudgetRulesRecommendationEvent(BaseModel):
    class Config:
        validate_by_name= True

    event_id: str | None = Field(
        None, alias='eventId', description='The event identifier.'
    )
    end_date: str | None = Field(
        None, alias='endDate', description='The end date in YYYYMMDD format.'
    )
    suggested_budget_increase_percent: float | None = Field(
        None,
        alias='suggestedBudgetIncreasePercent',
        description='The suggested budget increase expressed as a percent.',
    )
    event_name: str | None = Field(
        None, alias='eventName', description='The event name.'
    )
    start_date: str | None = Field(
        None, alias='startDate', description='The start date in YYYYMMDD format.'
    )


class SPBudgetRulesRecommendationEventRequest(BaseModel):
    class Config:
        validate_by_name= True

    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )


class SPBudgetRulesRecommendationEventResponse(BaseModel):
    """
    Special events with date range and suggested budget increase.
    """

    class Config:
        validate_by_name= True

    recommended_budget_rule_events: List[SPBudgetRulesRecommendationEvent] | None = (
        Field(
            None,
            alias='recommendedBudgetRuleEvents',
            description='A list of recommended special events with date range and suggested budget increase.',
        )
    )


class SPIndividualEvent(BaseModel):
    class Config:
        validate_by_name= True

    event_id: str | None = Field(
        None, alias='eventId', description='The event identifier.'
    )
    end_date: datetime | None = Field(
        None, alias='endDate', description='The end date in ISO-8601 format.'
    )
    event_name: str | None = Field(
        None, alias='eventName', description='The event name.'
    )
    start_date: datetime | None = Field(
        None, alias='startDate', description='The start date in ISO-8601 format.'
    )


class SPBudgetRulesRecommendationError(BaseModel):
    """
    The Error Response Object.
    """

    class Config:
        validate_by_name= True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class SPGroupedEvent(BaseModel):
    class Config:
        validate_by_name= True

    grouped_event_id: str | None = Field(
        None, alias='groupedEventId', description='The grouped event identifier.'
    )
    grouped_event_name: str | None = Field(
        None, alias='groupedEventName', description='The grouped event name.'
    )
    end_date: datetime | None = Field(
        None, alias='endDate', description='The end date in ISO-8601 format.'
    )
    start_date: datetime | None = Field(
        None, alias='startDate', description='The start date in ISO-8601 format.'
    )


class SPGetAllRuleEventRequest(BaseModel):
    pass

    class Config:
        validate_by_name= True


class SPGetRuleEventError(SPBudgetRulesRecommendationError):
    """
    The Error Response Object.
    """


class SPGetAllRuleEventResponse(BaseModel):
    """
    All Special individual and grouped events with date range.
    """

    class Config:
        validate_by_name= True

    grouped_events: List[SPGroupedEvent] | None = Field(
        None,
        alias='groupedEvents',
        description='A list of grouped events with date range.',
    )
    events: List[SPIndividualEvent] | None = Field(
        None, description='A list of individual events with date range.'
    )

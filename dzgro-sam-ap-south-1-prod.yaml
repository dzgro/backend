AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Prod template for region ap-south-1
Resources:
  AmazonDailyReportLambdaRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonDailyReportLambdaRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: LambdaSQSAccessAmazonReportsProdQ
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - Fn::GetAtt:
              - AmazonReportsProdQ
              - Arn
      - PolicyName: LambdaS3AccessDzgroAmzReportDataProdBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource:
            - Fn::Sub: ${DzgroAmzReportDataProdBucket}/*
  ApiGatewayProd:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Tags:
        Project: Dzgro
        Environment: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Dzgro API
          version: '1.0'
        paths:
          /webhook/rzrpay:
            POST:
              responses:
                '200':
                  description: Success
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}
                  - QueueName:
                      Fn::GetAtt:
                      - RazorpayWebhookProdQ
                      - QueueName
                credentials:
                  Fn::GetAtt:
                  - ApiGatewayRoleProd
                  - Arn
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                requestTemplates:
                  application/x-www-form-urlencoded: Action=SendMessage&MessageBody=$input.body&MessageAttribute.1.Name=x-razorpay-event-id&MessageAttribute.1.Value.StringValue=$input.params().header.get('x-razorpay-event-id')&MessageAttribute.1.Value.DataType=String&MessageAttribute.2.Name=X-Razorpay-Signature&MessageAttribute.2.Value.StringValue=$input.params().header.get('X-Razorpay-Signature')&MessageAttribute.2.Value.DataType=String
  ApiGatewayRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLambdaInvoke
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*Prod
      - PolicyName: ApiGatewaySQSAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource:
              Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*Prod
  DzgroAmzReportDataProdBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dzgro-amz-report-data-prod
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  AmazonReportsProdQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: AmazonReportsProdQ
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - AmazonReportsProdDLQ
          - Arn
        maxReceiveCount: 1
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  AmazonReportsProdDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: AmazonReportsProdDLQ
      VisibilityTimeout: 900
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  AmazonReportsProdEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - AmazonReportsProdQ
        - Arn
      FunctionName:
        Ref: AmazonDailyReportProdFunction
  AmazonDailyReportProdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AmazonDailyReportProdFunction
      Handler: handler.handler
      Runtime: python3.12
      Architectures:
      - x86_64
      CodeUri: functions/AmazonDailyReport
      Description: General Description
      Timeout: 900
      Layers:
      - arn:aws:lambda:ap-south-1:522814698847:layer:dzgroshared_layer:7
      Role:
        Fn::GetAtt:
        - AmazonDailyReportLambdaRoleProd
        - Arn
      Tags:
        Project: Dzgro
        Environment: Prod
      Environment:
        Variables:
          ENV: Prod
  DzgroReportsLambdaRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DzgroReportsLambdaRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: LambdaSQSAccessDzgroReportsProdQ
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - Fn::GetAtt:
              - DzgroReportsProdQ
              - Arn
  DzgroReportsProdQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DzgroReportsProdQ
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - DzgroReportsProdDLQ
          - Arn
        maxReceiveCount: 1
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  DzgroReportsProdDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DzgroReportsProdDLQ
      VisibilityTimeout: 900
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  DzgroReportsProdEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - DzgroReportsProdQ
        - Arn
      FunctionName:
        Ref: DzgroReportsProdFunction
  DzgroReportsProdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DzgroReportsProdFunction
      Handler: handler.handler
      Runtime: python3.12
      Architectures:
      - x86_64
      CodeUri: functions/DzgroReports
      Description: General Description
      Timeout: 900
      Layers:
      - arn:aws:lambda:ap-south-1:522814698847:layer:dzgroshared_layer:7
      Role:
        Fn::GetAtt:
        - DzgroReportsLambdaRoleProd
        - Arn
      Tags:
        Project: Dzgro
        Environment: Prod
      Environment:
        Variables:
          ENV: Prod
  DzgroReportsS3TriggerLambdaRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DzgroReportsS3TriggerLambdaRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  DzgroReportDataProdBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dzgro-report-data-prod
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  DzgroReportsS3TriggerProdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DzgroReportsS3TriggerProdFunction
      Handler: handler.handler
      Runtime: python3.12
      Architectures:
      - x86_64
      CodeUri: functions/DzgroReportsS3Trigger
      Description: General Description
      Timeout: 900
      Layers:
      - arn:aws:lambda:ap-south-1:522814698847:layer:dzgroshared_layer:7
      Role:
        Fn::GetAtt:
        - DzgroReportsS3TriggerLambdaRoleProd
        - Arn
      Tags:
        Project: Dzgro
        Environment: Prod
      Environment:
        Variables:
          ENV: Prod
      Events:
        S3UploadEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: DzgroReportDataProdBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .parquet
  PaymentInvoiceProcessorLambdaRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PaymentInvoiceProcessorLambdaRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: LambdaSQSAccessPaymentProcessorProdQ
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - Fn::GetAtt:
              - PaymentProcessorProdQ
              - Arn
      - PolicyName: LambdaS3AccessDzgroInvoiceProdBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource:
            - Fn::Sub: ${DzgroInvoiceProdBucket}/*
  DzgroInvoiceProdBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dzgro-invoice-prod
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  PaymentProcessorProdQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PaymentProcessorProdQ
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - PaymentProcessorProdDLQ
          - Arn
        maxReceiveCount: 1
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  PaymentProcessorProdDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PaymentProcessorProdDLQ
      VisibilityTimeout: 900
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  PaymentProcessorProdEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - PaymentProcessorProdQ
        - Arn
      FunctionName:
        Ref: PaymentInvoiceProcessorProdFunction
  PaymentInvoiceProcessorProdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PaymentInvoiceProcessorProdFunction
      Handler: handler.handler
      Runtime: python3.12
      Architectures:
      - x86_64
      CodeUri: functions/PaymentInvoiceProcessor
      Description: General Description
      Timeout: 900
      Layers:
      - arn:aws:lambda:ap-south-1:522814698847:layer:dzgroshared_layer:7
      Role:
        Fn::GetAtt:
        - PaymentInvoiceProcessorLambdaRoleProd
        - Arn
      Tags:
        Project: Dzgro
        Environment: Prod
      Environment:
        Variables:
          ENV: Prod
  RazorpayWebhookProcessorLambdaRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RazorpayWebhookProcessorLambdaRoleProd
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: LambdaSQSAccessRazorpayWebhookProdQ
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - Fn::GetAtt:
              - RazorpayWebhookProdQ
              - Arn
  RazorpayWebhookProdQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RazorpayWebhookProdQ
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - RazorpayWebhookProdDLQ
          - Arn
        maxReceiveCount: 1
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  RazorpayWebhookProdDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RazorpayWebhookProdDLQ
      VisibilityTimeout: 900
      Tags:
      - Key: Project
        Value: Dzgro
      - Key: Environment
        Value: Prod
  RazorpayWebhookProcessorProdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RazorpayWebhookProcessorProdFunction
      Handler: handler.handler
      Runtime: python3.12
      Architectures:
      - x86_64
      CodeUri: functions/RazorpayWebhookProcessor
      Description: General Description
      Timeout: 900
      Layers:
      - arn:aws:lambda:ap-south-1:522814698847:layer:dzgroshared_layer:7
      Role:
        Fn::GetAtt:
        - RazorpayWebhookProcessorLambdaRoleProd
        - Arn
      Tags:
        Project: Dzgro
        Environment: Prod
      Environment:
        Variables:
          ENV: Prod

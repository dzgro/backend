# generated by datamodel-codegen:
#   filename:  product_targeting.json
#   timestamp: 2025-07-23T04:02:41+00:00

from __future__ import annotations

from pydantic import BaseModel, Field


class BrandLoP(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(None, description='Name of brand.')
    id: str | None = Field(None, description='Id of brand.')


class InternalServerException(BaseModel):
    """
    Returns information about an InternalServerException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class Brand(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(
        None,
        description='Name of brand. This field is OPTIONAL if the Brand object is being used as an input.',
    )
    id: str | None = Field(
        None,
        description='Id of brand. This field is REQUIRED if the Brand object is being used as an input. Use the GetRefinementsForCategory to retrieve Brand Node IDs.',
    )


class BrandsLoP(BaseModel):
    """
    List of Brands.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[BrandLoP] = Field(..., description='List of Brands.')


class AgeRange(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(
        None,
        description='Name of Age Range. This field is OPTIONAL if the Age Range object is being used as an input.',
    )
    id: str | None = Field(
        None,
        description='Id of Age Range. This field is REQUIRED if the Age Range object is being used as an input. Use the GetRefinementsForCategory to retrieve Age Range Node IDs.',
    )


class CategoryItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    parent: str | None = Field(None, description='The category id of the parent node')
    path: str | None = Field(
        None,
        description='The path of the category, which contains the current category and all parent categories',
    )
    can_be_targeted: bool | None = Field(
        None,
        alias='canBeTargeted',
        description='A flag which indicates if the current node may be targeted',
    )
    name: str | None = Field(None, description='The name of the category')
    id: str | None = Field(None, description='The category id of the current node')


class GenreLoP(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(None, description='Name of Genre.')
    id: str | None = Field(
        None,
        description='Id of Genre. Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs.',
    )
    translated_name: str | None = Field(
        None,
        alias='translatedName',
        description='Translated name of the Genre based off locale send in the query parameter.',
    )


class AgeRangeLoP(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(None, description='Name of Age Range.')
    id: str | None = Field(
        None,
        description='Id of Age Range. Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Range Node IDs.',
    )
    translated_name: str | None = Field(
        None,
        alias='translatedName',
        description='Translated name of Age Range based off locale sent in request.',
    )


class TargetableCategoriesLoP(BaseModel):
    """
    Response object containing all targetable categories for the advertiser's marketplace in a language of preference (LoP) provide by the locale query parameter. ID is the category ID. NA is the name. TN is the translated name in the language of preference. CH is the list of child categories. TA is if the category is targetable. AsinCountRange is the AsinCounts of the node. Version 4 adds the number of targetable ASINs to each category.
    """

    class Config:
        allow_population_by_field_name = True

    category_tree: str | None = Field(None, alias='categoryTree')


class RatingRange(BaseModel):
    """
    Rating range is restricted to integers between 0 and 5, inclusive. Min must be less than or equal to max. We use this to retrieve the number of targetable ASINs that falls within this rating range.
    """

    class Config:
        allow_population_by_field_name = True

    min: int | None = None
    max: int | None = None


class ThrottlingException(BaseModel):
    """
    Returns information about a ThrottlingException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class GetCategoryRecommendationsForAsinsRequest(BaseModel):
    """
    Request object to retrieve Category Recommendations based on the input ASINs.
    """

    class Config:
        allow_population_by_field_name = True

    asins: list[str] | None = Field(
        None,
        description='List of input ASINs. This API does not check if the ASINs are valid ASINs.',
        max_items=10000,
    )
    include_ancestor: bool | None = Field(
        None,
        alias='includeAncestor',
        description='Enable this if you would like to retrieve categories which are ancestor nodes of the original recommended categories. This may increase the number of categories returned, but decrease the relevancy of those categories.',
    )


class TargetableCategories(BaseModel):
    """
    Response object containing all targetable categories for the advertiser's marketplace. ID is the category ID. NA is the name. CH is the list of child categories. TA is if the category is targetable. AsinCountRange is the AsinCounts of the node. Version 4 adds the number of targetable ASINs to each category.
    """

    class Config:
        allow_population_by_field_name = True

    category_tree: str | None = Field(None, alias='categoryTree')


class Genre(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str | None = Field(
        None,
        description='Name of Genre. This field is OPTIONAL if the Genre object is being used as an input.',
    )
    id: str | None = Field(
        None,
        description='Id of Genre. This field is REQUIRED if the Genre object is being used as an input. Use the GetRefinementsForCategory to retrieve Genre Node IDs.',
    )


class Genres(BaseModel):
    """
    List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[Genre] = Field(
        ...,
        description='List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.',
    )


class UnprocessableEntityException(BaseModel):
    """
    Returns information about UnprocessableEntityException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class SearchBrandsRequest(BaseModel):
    """
    Request object for SearchBrands API.
    """

    class Config:
        allow_population_by_field_name = True

    keyword: str


class BadRequestException(BaseModel):
    """
    Returns information about a BadRequestException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class CategoryRecommendations(BaseModel):
    """
    Response object for the GetCategoryRecommendationsForAsins API.
    """

    class Config:
        allow_population_by_field_name = True

    categories: list[CategoryItem] | None = Field(
        None, description='List of category recommendations'
    )


class Brands(BaseModel):
    """
    List of Brands.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[Brand] = Field(..., description='List of Brands.')


class PriceRange(BaseModel):
    """
    A range of prices. We use this to retrieve the number of targetable ASINs that falls within this price range.
    """

    class Config:
        allow_population_by_field_name = True

    min: float | None = None
    max: float | None = None


class UnauthorizedException(BaseModel):
    """
    Returns information about an UnauthorizedException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class IntegerRange(BaseModel):
    class Config:
        allow_population_by_field_name = True

    min: int | None = None
    max: int | None = None


class AccessDeniedException(BaseModel):
    """
    Returns information about an AccessDeniedException.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class GenresLoPItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: GenreLoP = Field(..., max_items=300, min_items=0)


class GenresLoP(BaseModel):
    """
    List of Genres in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs. Genres are only available for categories related to books.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[GenresLoPItem] = Field(
        ...,
        description='List of Genres in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Genre Node IDs. Genres are only available for categories related to books.',
    )


class AgeRangesLoPItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: AgeRangeLoP = Field(..., max_items=15, min_items=0)


class AgeRangesLoP(BaseModel):
    """
    List of Age Ranges in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[AgeRangesLoPItem] = Field(
        ...,
        description="List of Age Ranges in a language of preference (LoP). Use the POST /sp/targets/category/{categoryId}/refinements endpoint to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.",
    )


class AgeRanges(BaseModel):
    """
    List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[AgeRange] = Field(
        ...,
        description="List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children's toys and games.",
    )


class TargetableAsinCounts(BaseModel):
    """
    Response object to get number of targetable asins for refinements provided by the user
    """

    class Config:
        allow_population_by_field_name = True

    asin_counts: IntegerRange | None = Field(None, alias='asinCounts')


class CategoryItemWithAsinCounts(BaseModel):
    class Config:
        allow_population_by_field_name = True

    category_path: str | None = Field(
        None,
        alias='categoryPath',
        description='The path of the category, which contains the current category and all parent categories',
    )
    name: str | None = Field(None, description='The name of the category')
    asin_counts: IntegerRange | None = Field(
        None, alias='asinCounts', description='An integer range between min and max'
    )
    parent_category_id: str | None = Field(
        None, alias='parentCategoryId', description='The category id of the parent node'
    )
    id: str | None = Field(None, description='The category id of the current node')


class CategoryItemWithAsinCountsLoP(BaseModel):
    class Config:
        allow_population_by_field_name = True

    category_path: str | None = Field(
        None,
        alias='categoryPath',
        description='The path of the category, which contains the current category and all parent categories',
    )
    name: str | None = Field(None, description='The name of the category')
    translated_category_path: str | None = Field(
        None,
        alias='translatedCategoryPath',
        description='The translated path of the category, which contains the current category and all parent categories.',
    )
    asin_counts: IntegerRange | None = Field(
        None,
        alias='asinCounts',
        description='The number of asins belonging to the category.',
    )
    parent_category_id: str | None = Field(
        None, alias='parentCategoryId', description='The category id of the parent node'
    )
    id: str | None = Field(None, description='The category id of the current node')
    translated_name: str | None = Field(
        None, alias='translatedName', description='The translated name of the category.'
    )


class Refinements(BaseModel):
    """
    Response object for the GetRefinementsForCategory API, containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
    """

    class Config:
        allow_population_by_field_name = True

    age_ranges: AgeRanges | None = Field(None, alias='ageRanges')
    brands: Brands | None = None
    genres: Genres | None = None


class RefinementsLoP(BaseModel):
    """
    Response object for the POST /sp/targets/category/{categoryId}/refinements endpoint, containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
    """

    class Config:
        allow_population_by_field_name = True

    age_ranges: AgeRangesLoP | None = Field(None, alias='ageRanges')
    brands: BrandsLoP | None = None
    genres: GenresLoP | None = None


class Category(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: CategoryItemWithAsinCountsLoP = Field(..., max_items=50, min_items=0)


class CategoryRecommendationsWithAsinCountsLoP(BaseModel):
    """
    Response object for the GetCategoryRecommendationsForAsins API.
    """

    class Config:
        allow_population_by_field_name = True

    categories: list[Category] | None = Field(
        None, description='List of category recommendations'
    )


class CategoryRecommendationsWithAsinCounts(BaseModel):
    """
    Response object for the GetCategoryRecommendationsForAsins API.
    """

    class Config:
        allow_population_by_field_name = True

    categories: list[CategoryItemWithAsinCounts] | None = Field(
        None, description='List of category recommendations'
    )


class GetTargetableAsinCountsRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    age_ranges: AgeRanges | None = Field(None, alias='ageRanges')
    brands: Brands | None = None
    genres: Genres | None = None
    is_prime_shipping: bool | None = Field(
        None,
        alias='isPrimeShipping',
        description='Indicates if products have prime shipping',
    )
    rating_range: RatingRange | None = Field(None, alias='ratingRange')
    category: str = Field(
        ...,
        description='The category node id. Please use the GetTargetableCategories API or GetCategoryRecommendationsForASINs API to retrieve category IDs.',
    )
    price_range: PriceRange | None = Field(None, alias='priceRange')

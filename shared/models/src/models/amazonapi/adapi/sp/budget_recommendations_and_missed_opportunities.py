from typing import List
# generated by datamodel-codegen:
#   filename:  budget_recommendations_and_missed_opportunities.json
#   timestamp: 2025-07-23T04:03:39+00:00

from __future__ import annotations

from pydantic import BaseModel, Field


class BudgetRuleRecommendation(BaseModel):
    class Config:
        allow_population_by_field_name = True

    suggested_budget_increase_percent: float | None = Field(
        None,
        alias='suggestedBudgetIncreasePercent',
        description='suggested increase percent',
    )
    rule_name: str | None = Field(
        None, alias='ruleName', description='rule name for the recomemendation'
    )
    rule_id: str | None = Field(
        None, alias='ruleId', description='rule id for the recomemendation'
    )


class SevenDaysMissedOpportunities(BaseModel):
    class Config:
        allow_population_by_field_name = True

    estimated_missed_sales_lower: float | None = Field(
        None,
        alias='estimatedMissedSalesLower',
        description='Lower bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.',
    )
    estimated_missed_sales_upper: float | None = Field(
        None,
        alias='estimatedMissedSalesUpper',
        description='Upper bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.',
    )
    end_date: str | None = Field(
        None,
        alias='endDate',
        description='End date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time',
    )
    estimated_missed_impressions_lower: int | None = Field(
        None,
        alias='estimatedMissedImpressionsLower',
        description='Lower bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.',
    )
    estimated_missed_clicks_lower: int | None = Field(
        None,
        alias='estimatedMissedClicksLower',
        description='Lower bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.',
    )
    estimated_missed_clicks_upper: int | None = Field(
        None,
        alias='estimatedMissedClicksUpper',
        description='Upper bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.',
    )
    estimated_missed_impressions_upper: int | None = Field(
        None,
        alias='estimatedMissedImpressionsUpper',
        description='Upper bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.',
    )
    start_date: str | None = Field(
        None,
        alias='startDate',
        description='Starting date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time',
    )
    percent_time_in_budget: float | None = Field(
        None,
        alias='percentTimeInBudget',
        description='percentage of time the campaign is active with a budget. Provided as a decimal ranging from 0 to 1 (e.g. 0.76 means the campaign was in budget for 76% of the time between the startDate and endDate period)',
    )


class BudgetRecommendationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_ids: List[str] = Field(
        ...,
        alias='campaignIds',
        description='List of campaigns.',
        max_items=100,
        min_items=1,
    )


class BudgetRecommendationForExistingCampaign(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ..., alias='campaignId', description='encrypted campaignId'
    )
    suggested_budget: float = Field(
        ..., alias='suggestedBudget', description='recommended budget for the campaign.'
    )
    index: int = Field(
        ...,
        description='Correlate the recommendation to the campaign index in the request. Zero-based',
    )
    seven_days_missed_opportunities: SevenDaysMissedOpportunities = Field(
        ..., alias='sevenDaysMissedOpportunities'
    )
    budget_rule_recommendation: BudgetRuleRecommendation = Field(
        ..., alias='budgetRuleRecommendation'
    )


class SPTORBudgetRecommendationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class BudgetRecommendationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ..., alias='campaignId', description='encrypted campaignId'
    )
    index: int = Field(
        ...,
        description='Correlate the recommendation to the campaign index in the request. Zero-based',
    )
    error: SPTORBudgetRecommendationError = Field(..., alias='Error')


class BudgetRecommendationResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    budget_recommendations_success_results: List[
        BudgetRecommendationForExistingCampaign
    ] = Field(
        ...,
        alias='budgetRecommendationsSuccessResults',
        description='List of successful budget recomendation for campagins.',
    )
    budget_recommendations_error_results: List[BudgetRecommendationError] = Field(
        ...,
        alias='budgetRecommendationsErrorResults',
        description='List of errors that occured when generating bduget recommendation.',
    )

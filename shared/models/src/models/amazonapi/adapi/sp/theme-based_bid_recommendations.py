# generated by datamodel-codegen:
#   filename:  theme-based_bid_recommendations.json
#   timestamp: 2025-07-23T04:02:14+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class RecommendationType(Enum):
    """
    The bid recommendation type.
    """

    bids_for_new_ad_group = 'BIDS_FOR_NEW_AD_GROUP'


class Type(Enum):
    """
    The type of bids in bid analyses. <br>`SUGGESTED_UPPER` - The upper bound for the suggested bid. <br>`SUGGESTED_LOWER` - The lower bound for the suggested bid. <br>`SUGGESTED` - The suggested bid value. <br>'ALTERNATIVE' - The alternative bids that is included in the bid analyses.
    """

    suggested_upper = 'SUGGESTED_UPPER'
    suggested_lower = 'SUGGESTED_LOWER'
    suggested = 'SUGGESTED'
    alternative = 'ALTERNATIVE'


class RecommendationType2(Enum):
    """
    The bid recommendation type.
    """

    bids_for_existing_ad_group = 'BIDS_FOR_EXISTING_AD_GROUP'


class Type1(Enum):
    close_match = 'CLOSE_MATCH'
    loose_match = 'LOOSE_MATCH'
    substitutes = 'SUBSTITUTES'
    complements = 'COMPLEMENTS'
    keyword_broad_match = 'KEYWORD_BROAD_MATCH'
    keyword_exact_match = 'KEYWORD_EXACT_MATCH'
    keyword_phrase_match = 'KEYWORD_PHRASE_MATCH'


class TargetingExpression(BaseModel):
    """
    The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases. your keyword targeting ads with search phrases.
    """

    class Config:
        allow_population_by_field_name = True

    type: Type1
    value: str | None = Field(None, description='The targeting expression value.')


class RangeMetricValue(BaseModel):
    """
    Describes lower and upper bounds of the range. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    lower: int | None = None
    upper: int | None = None


class Theme(Enum):
    """
    The bid recommendation theme. This API currently supports `CONVERSION_OPPORTUNITIES`, `PRIME_DAY`, `FALL_PRIME_DEAL_EVENT`, and `BFCM_HOLIDAY` themes.
    """

    conversion_opportunities = 'CONVERSION_OPPORTUNITIES'
    prime_day = 'PRIME_DAY'
    fall_prime_deal_event = 'FALL_PRIME_DEAL_EVENT'
    bfcm_holiday = 'BFCM_HOLIDAY'


class TargetingExpressionList(BaseModel):
    """
    The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[TargetingExpression] = Field(
        ...,
        description='The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.',
        example=[
            {'type': 'CLOSE_MATCH'},
            {'type': 'LOOSE_MATCH'},
            {'type': 'SUBSTITUTES'},
            {'type': 'COMPLEMENTS'},
        ],
        max_items=100,
    )


class BidRecommendationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    code: str = Field(..., description='A machine-readable error code.')
    details: str = Field(
        ..., description='A human-readable description of the response.'
    )


class Type2(Enum):
    close_match = 'CLOSE_MATCH'
    loose_match = 'LOOSE_MATCH'
    substitutes = 'SUBSTITUTES'
    complements = 'COMPLEMENTS'
    keyword_broad_match = 'KEYWORD_BROAD_MATCH'
    keyword_exact_match = 'KEYWORD_EXACT_MATCH'
    keyword_phrase_match = 'KEYWORD_PHRASE_MATCH'
    pat_asin = 'PAT_ASIN'
    pat_category = 'PAT_CATEGORY'
    pat_category_refinement = 'PAT_CATEGORY_REFINEMENT'
    keyword_group = 'KEYWORD_GROUP'


class TargetingExpressionV4(BaseModel):
    """
    The targeting expression. The `type` property specifies the targeting option. Use `CLOSE_MATCH` to match your auto targeting ads closely to the specified value. Use `LOOSE_MATCH` to match your auto targeting ads broadly to the specified value. Use `SUBSTITUTES` to display your auto targeting ads along with substitutable products. Use `COMPLEMENTS` to display your auto targeting ads along with affiliated products. Use `KEYWORD_BROAD_MATCH` to broadly match your keyword targeting ads with search queries. Use `KEYWORD_EXACT_MATCH` to exactly match your keyword targeting ads with search queries. Use `KEYWORD_PHRASE_MATCH` to match your keyword targeting ads with search phrases. your keyword targeting ads with search phrases. Use `PAT_ASIN` to match your product attribute targeting ads with product ASIN. Use `PAT_CATEGORY` to match your product attribute targeting ads with product category. Use `PAT_CATEGORY_REFINEMENT` to match your product attribute targeting ads with product attribute, including brand, price, rating, prime shipping eligible, age range and genre. Use `KEYWORD_GROUP` to match your keyword targeting ads with keyword group.
    """

    class Config:
        allow_population_by_field_name = True

    type: Type2
    value: str | None = Field(None, description='The targeting expression value.')


class BidAnalysisImpactMetrics(BaseModel):
    class Config:
        allow_population_by_field_name = True

    estimated_impression_avg: int = Field(
        ...,
        alias='estimatedImpressionAvg',
        description='Number indicating the average of the estimated impressions',
    )
    estimated_impression_upper: int = Field(
        ...,
        alias='estimatedImpressionUpper',
        description='Number indicating an upper bound of the estimated impressions',
    )
    estimated_impression_lower: int = Field(
        ...,
        alias='estimatedImpressionLower',
        description='Number indicating a lower bound of the estimated impressions',
    )


class SuggestedBidImpactMetrics(BaseModel):
    class Config:
        allow_population_by_field_name = True

    estimated_impression_upper: int | None = Field(
        None, alias='estimatedImpressionUpper'
    )
    estimated_impression_lower: int | None = Field(
        None, alias='estimatedImpressionLower'
    )


class Predicate(Enum):
    placement_top = 'PLACEMENT_TOP'
    placement_rest_of_search = 'PLACEMENT_REST_OF_SEARCH'
    placement_product_page = 'PLACEMENT_PRODUCT_PAGE'


class PlacementAdjustment(BaseModel):
    """
    Specifies bid adjustments based on the placement location. Use `PLACEMENT_TOP` for the top of the search page. Use `PLACEMENT_REST_OF_SEARCH` for the rest of the search page. Use `PLACEMENT_PRODUCT_PAGE` for a product page.
    """

    class Config:
        allow_population_by_field_name = True

    predicate: Predicate | None = None
    percentage: int | None = Field(None, ge=0, le=900)


class ImpactMetric(BaseModel):
    """
    The impact metrics are given in the same order of suggested bids. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    values: list[RangeMetricValue] | None = None


class BidValue(BaseModel):
    """
    Bid value of the bid recommendations.
    """

    class Config:
        allow_population_by_field_name = True

    suggested_bid: float = Field(
        ..., alias='suggestedBid', description='The suggested bid.', ge=0.0
    )


class AdGroupThemeBasedBidRecommendationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    targeting_expressions: TargetingExpressionList = Field(
        ..., alias='targetingExpressions'
    )
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    recommendation_type: RecommendationType2 = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )


class BiddingStrategy(Enum):
    """
    The bidding strategy selected for the campaign. Use `LEGACY_FOR_SALES` to lower your bid in real time when your ad may be less likely to convert to a sale. Use `AUTO_FOR_SALES` to increase your bid in real time when your ad may be more likely to convert to a sale or lower your bid when less likely to convert to a sale. Use `MANUAL` to use your exact bid along with any manual adjustments.
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'


class BidRecommendationPerTargetingExpression(BaseModel):
    class Config:
        allow_population_by_field_name = True

    bid_values: list[BidValue] = Field(..., alias='bidValues', max_items=3)
    targeting_expression: TargetingExpression = Field(..., alias='targetingExpression')


class Bidding(BaseModel):
    """
    Bidding control configuration for the campaign.
    """

    class Config:
        allow_population_by_field_name = True

    adjustments: list[PlacementAdjustment] | None = Field(
        None,
        description='Placement adjustment configuration for the campaign.',
        max_items=3,
    )
    strategy: BiddingStrategy


class AsinsThemeBasedBidRecommendationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    asins: list[str] = Field(
        ..., description='The list of ad ASINs in the ad group.', max_items=50
    )
    targeting_expressions: TargetingExpressionList = Field(
        ..., alias='targetingExpressions'
    )
    bidding: Bidding = Field(
        ..., description='Bidding control configuration for the campaign.'
    )
    recommendation_type: RecommendationType = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )


class GlobalStoreSetting(BaseModel):
    """
    This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).
    """

    class Config:
        allow_population_by_field_name = True

    catalog_source_country_code: str | None = Field(
        None,
        alias='catalogSourceCountryCode',
        description='Country code of source marketplace where seller has listed the product. Possible source country codes include US, UK, DE, JP, and AE.',
    )


class ProductDetails(BaseModel):
    class Config:
        allow_population_by_field_name = True

    global_store_setting: GlobalStoreSetting | None = Field(
        None,
        alias='globalStoreSetting',
        description='This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).',
    )
    asin: str | None = Field(None, description='The identifier of the product.')


class BidAnalysis(BaseModel):
    class Config:
        allow_population_by_field_name = True

    bid: float = Field(..., ge=0.0)
    type: Type = Field(
        ...,
        description="The type of bids in bid analyses. <br>`SUGGESTED_UPPER` - The upper bound for the suggested bid. <br>`SUGGESTED_LOWER` - The lower bound for the suggested bid. <br>`SUGGESTED` - The suggested bid value. <br>'ALTERNATIVE' - The alternative bids that is included in the bid analyses.",
    )
    impact_metrics: BidAnalysisImpactMetrics = Field(..., alias='impactMetrics')


class BidAnalyses(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: list[BidAnalysis] = Field(..., max_items=10, min_items=0)


class TargetingExpressionListV4(BaseModel):
    """
    The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[TargetingExpressionV4] = Field(
        ...,
        description='The list of targeting expressions. Maximum of 100 per request, use pagination for more if needed.',
        example=[
            {'type': 'CLOSE_MATCH'},
            {'type': 'LOOSE_MATCH'},
            {'type': 'SUBSTITUTES'},
            {'type': 'COMPLEMENTS'},
        ],
        max_items=100,
    )


class ImpactMetrics(BaseModel):
    """
    For the CONVERSION_OPPORTUNITIES theme, the impact metrics are weekly clicks and orders received for similar products. For other event-based themes, the impact metrics are clicks and orders received for similar products during the event days. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    clicks: ImpactMetric | None = None
    orders: ImpactMetric | None = None


class BidRecommendationPerTargetingExpressionV4(BaseModel):
    class Config:
        allow_population_by_field_name = True

    bid_values: list[BidValue] = Field(..., alias='bidValues', max_items=3)
    targeting_expression: TargetingExpressionV4 = Field(
        ..., alias='targetingExpression'
    )


class BidRecommendationPerTargetingExpressionV5(BaseModel):
    class Config:
        allow_population_by_field_name = True

    suggested_bid_impact_metrics: SuggestedBidImpactMetrics | None = Field(
        None, alias='suggestedBidImpactMetrics'
    )
    bid_values: list[BidValue] = Field(..., alias='bidValues', max_items=3)
    targeting_expression: TargetingExpressionV4 = Field(
        ..., alias='targetingExpression'
    )


class ThemeBasedBidRecommendation(BaseModel):
    class Config:
        allow_population_by_field_name = True

    theme: Theme
    bid_recommendations_for_targeting_expressions: list[
        BidRecommendationPerTargetingExpression
    ] = Field(
        ...,
        alias='bidRecommendationsForTargetingExpressions',
        description='The bid recommendations for targeting expressions listed in the request.',
    )
    impact_metrics: ImpactMetrics | None = Field(None, alias='impactMetrics')


class BidAnalysesPerPlacement(BaseModel):
    class Config:
        allow_population_by_field_name = True

    all: BidAnalyses = Field(..., alias='ALL')
    placement_top: BidAnalyses = Field(..., alias='PLACEMENT_TOP')
    placement_rest_of_search: BidAnalyses = Field(..., alias='PLACEMENT_REST_OF_SEARCH')
    placement_product_page: BidAnalyses = Field(..., alias='PLACEMENT_PRODUCT_PAGE')


class AsinsThemeBasedBidRecommendationRequestV5(BaseModel):
    class Config:
        allow_population_by_field_name = True

    asins: list[str] = Field(
        ..., description='The list of ad ASINs in the ad group.', max_items=50
    )
    targeting_expressions: TargetingExpressionListV4 = Field(
        ..., alias='targetingExpressions'
    )
    product_details_list: list[ProductDetails] | None = Field(
        None,
        alias='productDetailsList',
        description='The list of products in the request, required for GlobalStore ASINs.',
        max_items=50,
    )
    bidding: Bidding = Field(
        ..., description='Bidding control configuration for the campaign.'
    )
    recommendation_type: RecommendationType = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    include_analysis: bool = Field(
        'false',
        alias='includeAnalysis',
        description='Flag to include new bid analyzer data.',
    )


class AsinsThemeBasedBidRecommendationRequestV4(BaseModel):
    class Config:
        allow_population_by_field_name = True

    asins: list[str] = Field(
        ..., description='The list of ad ASINs in the ad group.', max_items=50
    )
    targeting_expressions: TargetingExpressionListV4 = Field(
        ..., alias='targetingExpressions'
    )
    product_details_list: list[ProductDetails] | None = Field(
        None,
        alias='productDetailsList',
        description='The list of products in the request, required for GlobalStore ASINs.',
        max_items=50,
    )
    bidding: Bidding = Field(
        ..., description='Bidding control configuration for the campaign.'
    )
    recommendation_type: RecommendationType = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )


class AdGroupThemeBasedBidRecommendationRequestV5(BaseModel):
    class Config:
        allow_population_by_field_name = True

    targeting_expressions: TargetingExpressionListV4 = Field(
        ..., alias='targetingExpressions'
    )
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    recommendation_type: RecommendationType2 = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    include_analysis: bool = Field(
        'false',
        alias='includeAnalysis',
        description='Flag to include new bid analyzer data.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )


class AdGroupThemeBasedBidRecommendationRequestV4(BaseModel):
    class Config:
        allow_population_by_field_name = True

    targeting_expressions: TargetingExpressionListV4 = Field(
        ..., alias='targetingExpressions'
    )
    campaign_id: str = Field(
        ..., alias='campaignId', description='The campaign identifier.'
    )
    recommendation_type: RecommendationType2 = Field(
        ..., alias='recommendationType', description='The bid recommendation type.'
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The ad group identifier.'
    )


class ThemeBasedBidRecommendationV4(BaseModel):
    class Config:
        allow_population_by_field_name = True

    theme: Theme
    bid_recommendations_for_targeting_expressions: list[
        BidRecommendationPerTargetingExpressionV4
    ] = Field(
        ...,
        alias='bidRecommendationsForTargetingExpressions',
        description='The bid recommendations for targeting expressions listed in the request.',
    )


class ThemeBasedBidRecommendationResponse(BaseModel):
    """
    A list of bid recommendation themes and associated bid recommendations.
    """

    class Config:
        allow_population_by_field_name = True

    bid_recommendations: list[ThemeBasedBidRecommendation] = Field(
        ..., alias='bidRecommendations', max_items=2
    )


class BidAnalysesPerTargetingExpression(BaseModel):
    class Config:
        allow_population_by_field_name = True

    bid_analyses: BidAnalysesPerPlacement = Field(..., alias='bidAnalyses')
    targeting_expression: TargetingExpressionV4 = Field(
        ..., alias='targetingExpression'
    )


class ThemeBasedBidRecommendationResponseV4(BaseModel):
    """
    A list of bid recommendation themes and associated bid recommendations.
    """

    class Config:
        allow_population_by_field_name = True

    bid_recommendations: list[ThemeBasedBidRecommendationV4] = Field(
        ..., alias='bidRecommendations', max_items=2
    )


class ThemeBasedBidRecommendationV5(BaseModel):
    class Config:
        allow_population_by_field_name = True

    theme: Theme
    bid_analyses_for_targeting_expressions: (
        list[BidAnalysesPerTargetingExpression] | None
    ) = Field(
        None,
        alias='bidAnalysesForTargetingExpressions',
        description='The bid analyses for targeting expressions listed in the request.',
    )
    bid_recommendations_for_targeting_expressions: list[
        BidRecommendationPerTargetingExpressionV5
    ] = Field(
        ...,
        alias='bidRecommendationsForTargetingExpressions',
        description='The bid recommendations for targeting expressions listed in the request.',
    )


class ThemeBasedBidRecommendationResponseV5(BaseModel):
    """
    A list of bid recommendation themes and associated bid recommendations.
    """

    class Config:
        allow_population_by_field_name = True

    bid_recommendations: list[ThemeBasedBidRecommendationV5] = Field(
        ..., alias='bidRecommendations', max_items=2
    )

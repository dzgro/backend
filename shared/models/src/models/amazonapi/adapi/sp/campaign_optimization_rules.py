# generated by datamodel-codegen:
#   filename:  campaign_optimization_rules.json
#   timestamp: 2025-07-23T04:02:46+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class RuleState(Enum):
    """
    The campaign optimization rule state.
    """

    enabled = 'ENABLED'
    disabled = 'DISABLED'


class CampaignOptimizationRuleError(BaseModel):
    """
    The Error Response Object.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(
        None, description='An enumerated error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class RuleType(Enum):
    """
    The type of the campaign optimization rule. Only Support BID as of now
    """

    bid = 'BID'
    keyword = 'KEYWORD'
    product = 'PRODUCT'


class RuleAction(Enum):
    """
    The action taken when the campaign optimization rule is enabled. Defaults to adopt
    """

    adopt = 'ADOPT'


class RuleName(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ..., description='The campaign optimization rule name.', max_length=355
    )


class RuleCampaignId(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., description='campaignId')


class RuleStatus(Enum):
    """
    The campaign optimization rule status. Read-Only
    """

    active = 'ACTIVE'
    archived = 'ARCHIVED'


class SPCampaignOptimizationNotificationAPIRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_ids: list[RuleCampaignId] = Field(
        ..., alias='campaignIds', description='A list of campaign ids', max_items=100
    )


class RuleRecommendationError(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_id: RuleCampaignId | None = Field(None, alias='campaignId')
    error: CampaignOptimizationRuleError | None = Field(None, alias='Error')


class RuleRecommendationMetrics(BaseModel):
    """
    Performance Metrics supported by the rule recommendation
    """

    class Config:
        allow_population_by_field_name = True

    roas: float | None = Field(None, description='return on ad spend value')


class RuleRecommendation(BaseModel):
    class Config:
        allow_population_by_field_name = True

    performance_metrics_exists: bool | None = Field(
        None,
        alias='performanceMetricsExists',
        description='If true, performance metrics for the campaign are available in performanceMetrics response field.',
    )
    campaign_id: RuleCampaignId | None = Field(None, alias='campaignId')
    performance_metrics: RuleRecommendationMetrics | None = Field(
        None, alias='performanceMetrics'
    )


class RuleCreationDate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description='Time of campaign optimization rule creation in ISO 8061. Read-only.',
    )


class SPCampaignOptimizationRecommendationsAPIRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    require_performance_metrics: bool = Field(
        'true',
        alias='requirePerformanceMetrics',
        description='If set to false, eligible campaigns without a recommendation for performanceMetrics are also provided in response.Check performanceMetricsExists response field to know if performanceMetrics is available for eligible campaign.',
    )
    campaign_ids: list[RuleCampaignId] = Field(
        ..., alias='campaignIds', description='A list of campaign ids', max_items=100
    )


class RecurrenceType(Enum):
    """
    The frequency of the rule application.
    """

    daily = 'DAILY'


class RuleNotificationError(RuleRecommendationError):
    pass


class RuleConditionMetric(Enum):
    """
    The advertising performance metric. ROAS is the only supported metric.
    """

    roas = 'ROAS'
    average_bid = 'AVERAGE_BID'


class CampaignOptimizationId(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ..., description='The persistent rule identifier.', max_length=355
    )


class ComparisonOperator(Enum):
    """
    The comparison operator.
    """

    greater_than = 'GREATER_THAN'
    less_than = 'LESS_THAN'
    equal_to = 'EQUAL_TO'
    less_than_or_equal_to = 'LESS_THAN_OR_EQUAL_TO'
    greater_than_or_equal_to = 'GREATER_THAN_OR_EQUAL_TO'


class DeleteSPCampaignOptimizationRuleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_optimization_id: CampaignOptimizationId | None = Field(
        None, alias='campaignOptimizationId'
    )
    code: str | None = Field(
        None, description='An enumerated success or error code for machine use.'
    )
    details: str | None = Field(
        None, description='A human-readable description of the error, if unsuccessful'
    )


class RuleNotification(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rule_state: RuleState | None = Field(None, alias='ruleState')
    campaign_optimization_id: CampaignOptimizationId | None = Field(
        None, alias='campaignOptimizationId'
    )
    campaign_id: RuleCampaignId | None = Field(None, alias='campaignId')
    notification_string: str | None = Field(
        None,
        alias='notificationString',
        description='Explains why the rule state is disabled',
    )


class SPCampaignOptimizationRecommendationAPIResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_optimization_recommendations: list[RuleRecommendation] | None = Field(
        None,
        alias='CampaignOptimizationRecommendations',
        description='List of campaigns eligible for optimization rule.',
        max_items=100,
    )
    campaign_optimization_recommendations_error: (
        list[RuleRecommendationError] | None
    ) = Field(
        None,
        alias='CampaignOptimizationRecommendationsError',
        description='List of campaigns not eligible for optimization rule.',
        max_items=100,
    )


class CreateSPCampaignOptimizationRulesResponse(
    DeleteSPCampaignOptimizationRuleResponse
):
    pass


class UpdateSPCampaignOptimizationRuleResponse(
    DeleteSPCampaignOptimizationRuleResponse
):
    pass


class SPCampaignOptimizationNotificationAPIResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_optimization_recommendations_error: list[RuleNotificationError] | None = (
        Field(
            None,
            alias='CampaignOptimizationRecommendationsError',
            description='List of errors that occured when generating campaign optimization notifications.',
            max_items=100,
        )
    )
    campaign_optimization_notifications: list[RuleNotification] | None = Field(
        None,
        alias='CampaignOptimizationNotifications',
        description='List of successful campaign optimization notifications for campaigns.',
        max_items=100,
    )


class RuleCondition(BaseModel):
    class Config:
        allow_population_by_field_name = True

    metric_name: RuleConditionMetric = Field(..., alias='metricName')
    comparison_operator: ComparisonOperator = Field(..., alias='comparisonOperator')
    threshold: float = Field(..., description='The performance threshold value.')


class RuleConditionList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: list[RuleCondition] = Field(..., max_items=3)


class CampaignOptimizationRule(BaseModel):
    class Config:
        allow_population_by_field_name = True

    recurrence: RecurrenceType | None = None
    rule_action: RuleAction | None = Field(None, alias='ruleAction')
    campaign_optimization_id: CampaignOptimizationId = Field(
        ..., alias='campaignOptimizationId'
    )
    created_date: RuleCreationDate | None = Field(None, alias='createdDate')
    rule_condition: RuleConditionList | None = Field(None, alias='ruleCondition')
    rule_type: RuleType | None = Field(None, alias='ruleType')
    rule_name: RuleName | None = Field(None, alias='ruleName')
    campaign_ids: list[RuleCampaignId] | None = Field(
        None, alias='campaignIds', max_items=100
    )
    rule_status: RuleStatus | None = Field(None, alias='ruleStatus')


class GetSPCampaignOptimizationRuleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    campaign_optimization_rule: CampaignOptimizationRule | None = Field(
        None, alias='CampaignOptimizationRule'
    )


class UpdateSPCampaignOptimizationRulesRequest(BaseModel):
    """
    Request object for updating campaign optimization rule
    """

    class Config:
        allow_population_by_field_name = True

    recurrence: RecurrenceType
    rule_action: RuleAction = Field(..., alias='ruleAction')
    campaign_optimization_id: CampaignOptimizationId = Field(
        ..., alias='campaignOptimizationId'
    )
    rule_condition: RuleConditionList = Field(..., alias='ruleCondition')
    rule_type: RuleType = Field(..., alias='ruleType')
    rule_name: RuleName | None = Field(None, alias='ruleName')
    campaign_ids: list[RuleCampaignId] = Field(
        ..., alias='campaignIds', description='A list of campaign ids', max_items=20
    )


class CreateSPCampaignOptimizationRulesRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    recurrence: RecurrenceType
    rule_action: RuleAction = Field(..., alias='ruleAction')
    rule_condition: RuleConditionList = Field(..., alias='ruleCondition')
    rule_type: RuleType = Field(..., alias='ruleType')
    rule_name: RuleName | None = Field(None, alias='ruleName')
    campaign_ids: list[RuleCampaignId] = Field(
        ..., alias='campaignIds', description='A list of campaign ids', max_items=20
    )

# generated by datamodel-codegen:
#   filename:  keyword_targets.json
#   timestamp: 2025-07-23T04:02:20+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field


class SPTargetingCountryErrors(BaseModel):
    """
    The Error Response Object.
    """

    class Config:
        allow_population_by_field_name = True

    country_codes: list[str] | None = Field(
        None,
        alias='countryCodes',
        description='List of country codes this error returned for.',
    )
    code: str | None = Field(None, description='The HTTP status code of the response.')
    message: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class BiddingStrategy(Enum):
    """
    The bid recommendations returned will depend on the bidding strategy. <br> LEGACY_FOR_SALES - Dynamic Bids (Down only) <br> AUTO_FOR_SALES - Dynamic Bids (Up or down) <br> MANUAL - Fixed Bids
    """

    legacy_for_sales = 'LEGACY_FOR_SALES'
    auto_for_sales = 'AUTO_FOR_SALES'
    manual = 'MANUAL'
    rule_based = 'RULE_BASED'


class RecommendationType(Enum):
    """
    The recommendationType to retrieve recommended keyword targets for a list of ASINs.
    """

    keywords_for_asins = 'KEYWORDS_FOR_ASINS'


class RangeMetricValue(BaseModel):
    """
    Describes lower and upper bounds of the range. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    lower: int | None = None
    upper: int | None = None


class RecommendationType1(Enum):
    """
    The recommendationType to retrieve recommended keyword targets for an existing ad group.
    """

    keywords_for_adgroup = 'KEYWORDS_FOR_ADGROUP'


class MatchType(Enum):
    """
    Keyword match type. The default value will be BROAD.
    """

    broad = 'BROAD'
    exact = 'EXACT'
    phrase = 'PHRASE'


class KeywordTarget(BaseModel):
    class Config:
        allow_population_by_field_name = True

    match_type: MatchType | None = Field(
        None,
        alias='matchType',
        description='Keyword match type. The default value will be BROAD.',
    )
    keyword: str | None = Field(None, description='The keyword value')
    bid: float | None = Field(
        None,
        description='The bid value for the keyword, in minor currency units (example: cents). The default value will be the suggested bid.',
    )
    user_selected_keyword: bool | None = Field(
        None,
        alias='userSelectedKeyword',
        description='Flag that tells if keyword was selected by the user or was recommended by KRS',
    )


class BidValues(BaseModel):
    """
    Suggested bid range
    """

    class Config:
        allow_population_by_field_name = True

    suggested: float | None = Field(None, description='The suggested bid')
    range_start: float | None = Field(
        None, alias='rangeStart', description='The bid range start'
    )
    range_end: float | None = Field(
        None, alias='rangeEnd', description='The bid range end'
    )


class ThemedBid(BaseModel):
    class Config:
        allow_population_by_field_name = True

    suggested_bid: BidValues | None = Field(None, alias='suggestedBid')
    match_type: MatchType | None = Field(
        None,
        alias='matchType',
        description='Keyword match type. The default value will be BROAD.',
    )
    rank: float | None = Field(None, description='The keyword target rank.')
    theme: str | None = Field(
        None,
        description='The theme of the bid recommendation. The default theme is CONVERSION_OPPORTUNITIES.',
    )
    bid: float | None = Field(
        None,
        description='The bid value for the keyword, in minor currency units (example: cents). The default value will be the suggested bid.',
    )


class ImpactMetric(BaseModel):
    """
    The impact metrics are given in the same order of suggested bids. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    values: list[RangeMetricValue] | None = None


class SortDimension(Enum):
    """
    The ranking metric value. Supported values: CLICKS, CONVERSIONS, DEFAULT. DEFAULT will be applied if no value passed in.
    """

    clicks = 'CLICKS'
    conversions = 'CONVERSIONS'
    default = 'DEFAULT'


class Locale(Enum):
    """
    Translations are for readability and do not affect the targeting of ads. Supported marketplace to locale mappings can be found at the <a href='https://advertising.amazon.com/API/docs/en-us/localization/#/Keyword%20Localization'>POST /keywords/localize</a> endpoint. Note: Translations will be null if locale is unsupported.
    """

    ar_eg = 'ar_EG'
    de_de = 'de_DE'
    en_ae = 'en_AE'
    en_au = 'en_AU'
    en_ca = 'en_CA'
    en_gb = 'en_GB'
    en_in = 'en_IN'
    en_sa = 'en_SA'
    en_sg = 'en_SG'
    en_us = 'en_US'
    es_es = 'es_ES'
    es_mx = 'es_MX'
    fr_fr = 'fr_FR'
    it_it = 'it_IT'
    ja_jp = 'ja_JP'
    nl_nl = 'nl_NL'
    pl_pl = 'pl_PL'
    pt_br = 'pt_BR'
    sv_se = 'sv_SE'
    tr_tr = 'tr_TR'
    zh_cn = 'zh_CN'


class RecommendationOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    max_recommendations: float = Field(
        '200',
        alias='maxRecommendations',
        description='The max size of recommended target. Set it to 0 if you only want to rank user-defined keywords.',
        ge=0.0,
        le=200.0,
    )
    sort_dimension: SortDimension | None = Field(
        None,
        alias='sortDimension',
        description='The ranking metric value. Supported values: CLICKS, CONVERSIONS, DEFAULT. DEFAULT will be applied if no value passed in.',
    )
    locale: Locale | None = Field(
        None,
        description="Translations are for readability and do not affect the targeting of ads. Supported marketplace to locale mappings can be found at the <a href='https://advertising.amazon.com/API/docs/en-us/localization/#/Keyword%20Localization'>POST /keywords/localize</a> endpoint. Note: Translations will be null if locale is unsupported.",
    )


class KeywordTargetRankRecommendationRequest(RecommendationOptions):
    class Config:
        allow_population_by_field_name = True

    targets: list[KeywordTarget] | None = Field(
        None,
        description='A list of targets that need to be ranked',
        max_items=100,
        min_items=0,
    )


class SPTargetingError(BaseModel):
    """
    The Error Response Object.
    """

    class Config:
        allow_population_by_field_name = True

    code: str | None = Field(None, description='The HTTP status code of the response.')
    details: str | None = Field(
        None, description='A human-readable description of the response.'
    )


class GlobalStoreSetting(BaseModel):
    """
    This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).
    """

    class Config:
        allow_population_by_field_name = True

    catalog_source_country_code: str | None = Field(
        None,
        alias='catalogSourceCountryCode',
        description='Country code of source marketplace where seller has listed the product. Possible source country codes include US, UK, DE, JP, and AE.',
    )


class ProductDetails(BaseModel):
    class Config:
        allow_population_by_field_name = True

    global_store_setting: GlobalStoreSetting | None = Field(
        None,
        alias='globalStoreSetting',
        description='This denotes the fields related to [GlobalStore Program](https://sellercentral.amazon.com/help/hub/reference/external/202139180).',
    )
    asin: str | None = Field(None, description='The identifier of the product.')


class CountryKeyword(BaseModel):
    class Config:
        allow_population_by_field_name = True

    bid: float | None = Field(
        None,
        description='The bid value for the keyword, in minor currency units (example: cents). The default value will be the suggested bid.',
    )
    value: str | None = Field(None, description='The keyword value')
    user_selected_keyword: bool | None = Field(
        None,
        alias='userSelectedKeyword',
        description='Flag that tells if keyword was selected by the user or was recommended by KRS',
    )


class BidSuggestion(BaseModel):
    """
    Suggested bid range in major and minor currency units (example: dollars and cents).
    """

    class Config:
        allow_population_by_field_name = True

    suggested: float | None = Field(None, description='The suggested bid')
    range_start: float | None = Field(
        None, alias='rangeStart', description='The bid range start'
    )
    bid_rec_id: str | None = Field(
        None, alias='bidRecId', description='The bid recommendation id'
    )
    range_end: float | None = Field(
        None, alias='rangeEnd', description='The bid range end'
    )


class RankedKeywordTargetsForAdGroupRequest(KeywordTargetRankRecommendationRequest):
    """
    This request type is used to retrieve recommended keyword targets for an existing ad group. Set the recommendationType to KEYWORDS_FOR_ADGROUP to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ..., alias='campaignId', description='The identifier of the campaign'
    )
    recommendation_type: RecommendationType1 = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for an existing ad group.',
    )
    bids_enabled: bool = Field(
        'true',
        alias='bidsEnabled',
        description='Set this parameter to false if you do not want to retrieve bid suggestions for your keyword targets. Defaults to true.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The identifier of the ad group'
    )


class RankedTargetWithThemedBids(BaseModel):
    class Config:
        allow_population_by_field_name = True

    search_term_impression_share: float | None = Field(
        None,
        alias='searchTermImpressionShare',
        description='The account-level ad-attributed impression share for the search-term/keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 30 days. This metric helps advertisers identify potential opportunities based on their share on relevant keywords. This information is only available for keywords the advertiser targeted with ad impressions.',
    )
    translation: str | None = Field(
        None, description='The translation of keyword if a locale is passed in'
    )
    bid_info: list[ThemedBid] | None = Field(
        None,
        alias='bidInfo',
        description='A list of keyword bid info',
        max_items=15,
        min_items=0,
    )
    search_term_impression_rank: float | None = Field(
        None,
        alias='searchTermImpressionRank',
        description='The account-level ad-attributed impression rank for the search-term/keyword. Provides [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 30 days. It tells an advertiser how many advertisers had higher share of ad impressions. This information is only available for keywords the advertiser targeted with ad impressions.',
    )
    keyword: str | None = Field(None, description='The keyword value')
    user_selected_keyword: bool | None = Field(
        None,
        alias='userSelectedKeyword',
        description='Flag that tells if keyword was selected by the user or was recommended by KRS',
    )
    rec_id: str | None = Field(
        None, alias='recId', description='The recommended keyword target id'
    )


class AsinsBasedRequest(RecommendationOptions):
    class Config:
        allow_population_by_field_name = True

    bidding_strategy: BiddingStrategy = Field(
        'LEGACY_FOR_SALES',
        alias='biddingStrategy',
        description='The bid recommendations returned will depend on the bidding strategy. <br> LEGACY_FOR_SALES - Dynamic Bids (Down only) <br> AUTO_FOR_SALES - Dynamic Bids (Up or down) <br> MANUAL - Fixed Bids',
    )
    recommendation_type: RecommendationType | None = Field(
        None,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for a list of ASINs.',
    )
    bids_enabled: bool = Field(
        'true',
        alias='bidsEnabled',
        description='Set this parameter to false if you do not want to retrieve bid suggestions for your keyword targets. Defaults to true.',
    )


class AdGroupBasedRequest(RecommendationOptions):
    class Config:
        allow_population_by_field_name = True

    campaign_id: str | None = Field(
        None, alias='campaignId', description='The identifier of the campaign'
    )
    recommendation_type: RecommendationType1 | None = Field(
        None,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for an existing ad group.',
    )
    bids_enabled: bool = Field(
        'true',
        alias='bidsEnabled',
        description='Set this parameter to false if you do not want to retrieve bid suggestions for your keyword targets. Defaults to true.',
    )
    ad_group_id: str | None = Field(
        None, alias='adGroupId', description='The identifier of the ad group'
    )


class CountryTarget(BaseModel):
    class Config:
        allow_population_by_field_name = True

    country_keywords: dict[str, CountryKeyword] | None = Field(
        None,
        alias='countryKeywords',
        description='Map represents the same keyword in a different countries and locales. Key is a 2-letter country code, value is a keyword object with value and bid fields',
    )
    match_type: MatchType | None = Field(
        None,
        alias='matchType',
        description='Keyword match type. The default value will be BROAD.',
    )


class GlobalRankedKeywordTargetsForAsinsRequest(AsinsBasedRequest):
    """
    This request type is used to retrieve recommended keyword targets for ASINs. Set the recommendationType to KEYWORDS_FOR_ASINS to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    targets: list[CountryTarget] | None = Field(
        None,
        description='An array list of countryTargets. CountryTarget is an object with CountryKeywords map representing same keyword in a different locales. Key is a 2-letter country code, value is a keyword object.',
        max_items=100,
        min_items=0,
    )
    products: list[dict[str, ProductDetails]] | None = Field(
        None,
        description='It represents an array list of countryProducts. CountryProducts is a map representing same product in a different marketplaces. Key is a 2-letter country code, value is a product.',
        max_items=50,
        min_items=0,
    )
    recommendation_type: RecommendationType = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for a list of ASINs.',
    )


class ImpactMetrics(BaseModel):
    """
    For the CONVERSION_OPPORTUNITIES theme, the impact metrics are weekly clicks and orders received for similar products. For other event-based themes, the impact metrics are clicks and orders received for similar products during the event days. <br> Note: This object is nullable
    """

    class Config:
        allow_population_by_field_name = True

    clicks: ImpactMetric | None = None
    orders: ImpactMetric | None = None


class RankedTargetWithThemedBidsList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: list[RankedTargetWithThemedBids] = Field(..., max_items=200, min_items=0)


class AsinsKeywordTargetRankRecommendationRequest(
    KeywordTargetRankRecommendationRequest
):
    """
    This request type is used to retrieve recommended keyword targets for ASINs. Set the recommendationType to KEYWORDS_FOR_ASINS to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    asins: list[str] = Field(
        ..., description='An array list of Asins', max_items=50, min_items=0
    )
    recommendation_type: RecommendationType = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for a list of ASINs.',
    )


class KeywordBidInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    suggested_bid: BidSuggestion | None = Field(None, alias='suggestedBid')
    match_type: MatchType | None = Field(
        None,
        alias='matchType',
        description='Keyword match type. The default value will be BROAD.',
    )
    rank: float | None = Field(None, description='The keyword target rank')
    bid: float | None = Field(
        None,
        description='The bid value for the keyword, in minor currency units (example: cents). The default value will be the suggested bid.',
    )


class AdGroupKeywordTargetRankRecommendationRequest(
    KeywordTargetRankRecommendationRequest
):
    """
    This request type is used to retrieve recommended keyword targets for an existing ad group. Set the recommendationType to KEYWORDS_FOR_ADGROUP to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    campaign_id: str = Field(
        ..., alias='campaignId', description='The identifier of the campaign'
    )
    recommendation_type: RecommendationType1 = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for an existing ad group.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The identifier of the ad group'
    )


class GlobalRankedKeywordTargetsForAdGroupRequest(AdGroupBasedRequest):
    """
    This request type is used to retrieve recommended keyword targets for an existing ad group. Set the recommendationType to KEYWORDS_FOR_ADGROUP to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    targets: list[CountryTarget] | None = Field(
        None,
        description='A list of targets that need to be ranked',
        max_items=100,
        min_items=0,
    )
    recommendation_type: RecommendationType1 = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for an existing ad group.',
    )
    ad_group_id: str = Field(
        ..., alias='adGroupId', description='The identifier of the ad group'
    )
    campaign_id: str = Field(
        ..., alias='campaignId', description='The identifier of the campaign'
    )


class ProductDetailsList(BaseModel):
    """
    The list of products in the request.
    """

    class Config:
        allow_population_by_field_name = True

    __root__: list[ProductDetails] = Field(
        ...,
        description='The list of products in the request.',
        max_items=50,
        min_items=0,
    )


class KeywordTargetResponse(KeywordTarget):
    class Config:
        allow_population_by_field_name = True

    suggested_bid: BidSuggestion | None = Field(None, alias='suggestedBid')
    translation: str | None = Field(
        None, description='The translation of keyword if a locale is passed in'
    )
    rank: float | None = Field(None, description='The keyword target rank')


class RankedKeywordTargetsForAsinsRequest(KeywordTargetRankRecommendationRequest):
    """
    This request type is used to retrieve recommended keyword targets for ASINs. Set the recommendationType to KEYWORDS_FOR_ASINS to use this request type.
    """

    class Config:
        allow_population_by_field_name = True

    asins: list[str] = Field(
        ..., description='An array list of Asins', max_items=50, min_items=0
    )
    product_details_list: ProductDetailsList | None = Field(
        None, alias='productDetailsList'
    )
    bidding_strategy: BiddingStrategy = Field(
        'LEGACY_FOR_SALES',
        alias='biddingStrategy',
        description='The bid recommendations returned will depend on the bidding strategy. <br> LEGACY_FOR_SALES - Dynamic Bids (Down only) <br> AUTO_FOR_SALES - Dynamic Bids (Up or down) <br> MANUAL - Fixed Bids',
    )
    recommendation_type: RecommendationType = Field(
        ...,
        alias='recommendationType',
        description='The recommendationType to retrieve recommended keyword targets for a list of ASINs.',
    )
    bids_enabled: bool = Field(
        'true',
        alias='bidsEnabled',
        description='Set this parameter to false if you do not want to retrieve bid suggestions for your keyword targets. Defaults to true.',
    )


class RecKeywordTarget(BaseModel):
    class Config:
        allow_population_by_field_name = True

    search_term_impression_share: float | None = Field(
        None,
        alias='searchTermImpressionShare',
        description='The account-level ad-attributed impression share for the search-term/keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 30 days. This metric helps advertisers identify potential opportunities based on their share on relevant keywords. This information is only available for keywords the advertiser targeted with ad impressions.',
    )
    translation: str | None = Field(
        None, description='The translation of keyword if a locale is passed in'
    )
    bid_info: list[KeywordBidInfo] | None = Field(
        None,
        alias='bidInfo',
        description='A list of keyword bid info',
        max_items=3,
        min_items=0,
    )
    search_term_impression_rank: float | None = Field(
        None,
        alias='searchTermImpressionRank',
        description='The account-level ad-attributed impression rank for the search-term/keyword. Provides [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 30 days. It tells an advertiser how many advertisers had higher share of ad impressions. This information is only available for keywords the advertiser targeted with ad impressions.',
    )
    keyword: str | None = Field(None, description='The keyword value')
    user_selected_keyword: bool | None = Field(
        None,
        alias='userSelectedKeyword',
        description='Flag that tells if keyword was selected by the user or was recommended by KRS',
    )
    rec_id: str | None = Field(
        None, alias='recId', description='The recommended keyword target id'
    )


class RankedTargetResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    keyword_target_list: list[RecKeywordTarget] | None = Field(
        None,
        alias='keywordTargetList',
        description='A list of ranked keyword targets',
        max_items=200,
        min_items=0,
    )


class RankedTargetWithThemedBidsResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    keyword_target_list: RankedTargetWithThemedBidsList | None = Field(
        None, alias='keywordTargetList'
    )
    impact_metrics: list[ImpactMetrics] | None = Field(
        None,
        alias='impactMetrics',
        description='A list of impact metrics which anticipates the number of clicks and orders you will receive if you target all targeting expressions using the low, medium, and high suggested bid.',
        max_items=5,
        min_items=0,
    )


class GlobalRankedTargetWithThemedBidsResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    country_codes: dict[str, RankedTargetWithThemedBidsResponse] | None = Field(
        None, alias='countryCodes'
    )

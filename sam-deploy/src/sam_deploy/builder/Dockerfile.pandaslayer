# Multi-stage optimized Dockerfile for PandasLayer
# Stage 1: Base image with common tools
FROM public.ecr.aws/lambda/python:3.12 AS base
LABEL cache.key="pandaslayer"

# Install system dependencies once
RUN dnf update -y && dnf install -y zip findutils && dnf clean all

# Upgrade pip and build tools
RUN pip install --upgrade pip setuptools wheel

# Stage 2: Dependencies installation with caching
FROM base AS deps
ENV PYTHONUNBUFFERED=1
ENV PIP_CACHE_DIR=/pip-cache
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Create pip cache directory
RUN mkdir -p /pip-cache

# Create requirements file
RUN echo -e "pandas==2.3.3\nopenpyxl==3.1.5" > /tmp/requirements.txt

# Show what we're installing
RUN echo "Installing dependencies:" && cat /tmp/requirements.txt

# Create layer directory structure
RUN mkdir -p /tmp/layer/python/lib/python3.12/site-packages/

# Install dependencies with cache mount
RUN --mount=type=cache,target=/pip-cache \
    pip install --cache-dir=/pip-cache \
    --no-deps \
    -r /tmp/requirements.txt \
    -t /tmp/layer/python/lib/python3.12/site-packages/ \
    --verbose

# Install dependencies with dependency resolution
RUN --mount=type=cache,target=/pip-cache \
    pip install --cache-dir=/pip-cache \
    -r /tmp/requirements.txt \
    -t /tmp/layer/python/lib/python3.12/site-packages/ \
    --verbose

# Stage 3: Final layer creation
FROM deps AS final

# Clean up unnecessary files to reduce layer size
RUN find /tmp/layer -name "*.pyc" -delete
RUN find /tmp/layer -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
RUN find /tmp/layer -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true

# Create zip file
WORKDIR /tmp/layer
RUN zip -r9 pandaslayer.zip python/ -x "*.pyc" "*/__pycache__/*"

# Verify layer contents
RUN echo "Layer size:" && du -sh pandaslayer.zip
RUN echo "Layer structure:" && unzip -l pandaslayer.zip | head -20
RUN echo "Installed packages:" && pip list --path /tmp/layer/python/lib/python3.12/site-packages
